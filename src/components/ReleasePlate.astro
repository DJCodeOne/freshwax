---
// src/components/ReleasePlate.astro
interface Track {
  id: string;
  title: string;
  preview_url: string | null;
  track_number: number;
}

interface Props {
  id: string;
  title: string;
  artist: string;
  label?: string;
  artworkUrl: string;
  releaseDate: string;
  isPreorder: boolean;
  hasVinyl: boolean;
  vinylStock?: number;
  digitalPrice: number;
  vinylPrice?: number;
  tracks: Track[];
  extraNotes?: string;
  description?: string;
}

const { 
  id = '', 
  title = '', 
  artist = '', 
  label = '',
  artworkUrl = '', 
  releaseDate = '', 
  isPreorder = false, 
  hasVinyl = false, 
  vinylStock = 0,
  digitalPrice = 0, 
  vinylPrice = 0,
  tracks = [],
  extraNotes = '',
  description = ''
} = Astro.props;

const formattedDate = new Date(releaseDate).toLocaleDateString('en-GB', {
  day: 'numeric',
  month: 'short',
  year: 'numeric'
});

const vinylAvailable = hasVinyl && vinylStock > 0;
const initialTracksDesktop = 2;
const initialTracksMobile = 2;
const trackPrice = 1.00;
---

<article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300" data-label={label} data-artist={artist}>
  <!-- Mobile Layout -->
  <div class="sm:hidden">
    <div class="relative w-full">
      <img src={artworkUrl} alt={`${title} by ${artist}`} class="w-full aspect-square object-cover" />
      
      <div class="absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/80 to-transparent flex gap-2 justify-center">
        <button 
          data-release-id={id}
          data-product-type="digital"
          data-price={digitalPrice}
          data-title={title}
          data-artist={artist}
          class="add-to-cart bg-blue-500 hover:bg-blue-600 active:bg-blue-700 text-white px-3 py-2 rounded-lg flex items-center gap-2 transition-colors text-sm font-semibold"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
          </svg>
          £{digitalPrice.toFixed(2)}
        </button>
        
        {hasVinyl && (
          <button 
            data-release-id={id}
            data-product-type="vinyl"
            data-price={vinylPrice}
            data-digital-price={digitalPrice}
            data-title={title}
            data-artist={artist}
            data-includes-digital="true"
            disabled={!vinylAvailable}
            class={`add-to-cart px-3 py-2 rounded-lg flex items-center gap-2 transition-colors text-sm font-semibold ${vinylAvailable ? 'bg-purple-500 hover:bg-purple-600 active:bg-purple-700 text-white' : 'bg-gray-400 text-gray-200 cursor-not-allowed'}`}
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="1.5"/>
              <circle cx="12" cy="12" r="6" fill="none" stroke="currentColor" stroke-width="1.5"/>
              <circle cx="12" cy="12" r="2" fill="currentColor"/>
            </svg>
            {vinylAvailable ? `£${vinylPrice?.toFixed(2)}` : 'Sold Out'}
          </button>
        )}
      </div>
    </div>
    
    <div class="p-4">
      <div class="mb-3">
        <h3 class="text-xl font-bold text-gray-900 mb-1 leading-tight">{title}</h3>
        <button 
          class="filter-by-artist text-base text-gray-600 mb-1 hover:text-blue-600 hover:underline transition-colors text-left"
          data-artist={artist}
        >
          {artist}
        </button>
        {label && (
          <button 
            class="filter-by-label text-sm text-gray-500 mb-2 hover:text-blue-600 hover:underline transition-colors block text-left"
            data-label={label}
          >
            {label}
          </button>
        )}
        
        <div class="flex items-center gap-2 flex-wrap">
          {isPreorder && <span class="inline-block bg-orange-100 text-orange-800 text-xs font-semibold px-2 py-0.5 rounded">Pre-order</span>}
          <span class="text-xs text-gray-500">{isPreorder ? `Ships ${formattedDate}` : formattedDate}</span>
          {vinylAvailable && vinylStock <= 5 && <span class="inline-block bg-red-100 text-red-800 text-xs font-semibold px-2 py-0.5 rounded">Only {vinylStock} left</span>}
          {hasVinyl && vinylAvailable && <span class="inline-block bg-purple-100 text-purple-800 text-xs font-semibold px-2 py-0.5 rounded">Vinyl includes digital</span>}
        </div>
      </div>
      
      {extraNotes && <div class="mb-3 p-2 bg-blue-50 border-l-4 border-blue-400 rounded"><p class="text-xs text-blue-900">{extraNotes}</p></div>}
      
      {tracks.length > 0 && (
        <div class="mt-3">
          <div class="space-y-2">
            {tracks.slice(0, initialTracksMobile).map((track) => (
              <div class="flex items-center gap-2 bg-gray-50 rounded p-2">
                <span class="text-xs font-semibold text-gray-500 w-5 flex-shrink-0">{track.track_number}.</span>
                <p class="text-xs font-medium text-gray-900 flex-1 min-w-0 truncate" title={track.title}>{track.title}</p>
                <button class="play-button flex-shrink-0 flex items-center justify-center w-6 h-6 rounded bg-blue-500 text-white hover:bg-blue-600 transition-colors" data-track-id={track.id} title="Play">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                </button>
                <div class="w-24 flex-shrink-0 waveform-inline" data-track-id={track.id}></div>
                <button 
                  class="buy-track flex-shrink-0 bg-green-500 hover:bg-green-600 active:bg-green-700 text-white text-xs font-bold px-2.5 py-1.5 rounded transition-colors whitespace-nowrap ml-1"
                  data-track-id={track.id}
                  data-track-title={track.title}
                  data-track-price={trackPrice}
                  data-release-id={id}
                  data-artist={artist}
                  title="Buy track"
                >
                  £{trackPrice.toFixed(2)}
                </button>
                <audio class="hidden track-audio" data-track-id={track.id} preload="none">
                  <source src={track.preview_url || 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'} type="audio/mpeg" />
                </audio>
              </div>
            ))}
          </div>
          {tracks.length > initialTracksMobile && (
            <details class="mt-2">
              <summary class="cursor-pointer text-xs text-blue-600 hover:text-blue-800 font-semibold p-2 bg-gray-50 rounded hover:bg-gray-100 transition-colors">
                + Show {tracks.length - initialTracksMobile} more track{tracks.length - initialTracksMobile !== 1 ? 's' : ''}
              </summary>
              <div class="space-y-2 mt-2">
                {tracks.slice(initialTracksMobile).map((track) => (
                  <div class="flex items-center gap-2 bg-gray-50 rounded p-2">
                    <span class="text-xs font-semibold text-gray-500 w-5 flex-shrink-0">{track.track_number}.</span>
                    <p class="text-xs font-medium text-gray-900 flex-1 min-w-0 truncate" title={track.title}>{track.title}</p>
                    <button class="play-button flex-shrink-0 flex items-center justify-center w-6 h-6 rounded bg-blue-500 text-white hover:bg-blue-600 transition-colors" data-track-id={track.id} title="Play">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                    </button>
                    <div class="w-24 flex-shrink-0 waveform-inline" data-track-id={track.id}></div>
                    <button 
                      class="buy-track flex-shrink-0 bg-green-500 hover:bg-green-600 active:bg-green-700 text-white text-xs font-bold px-2.5 py-1.5 rounded transition-colors whitespace-nowrap ml-1"
                      data-track-id={track.id}
                      data-track-title={track.title}
                      data-track-price={trackPrice}
                      data-release-id={id}
                      data-artist={artist}
                      title="Buy track"
                    >
                      £{trackPrice.toFixed(2)}
                    </button>
                    <audio class="hidden track-audio" data-track-id={track.id} preload="none">
                      <source src={track.preview_url || 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'} type="audio/mpeg" />
                    </audio>
                  </div>
                ))}
              </div>
            </details>
          )}
        </div>
      )}
    </div>
  </div>
  
  <!-- Desktop Layout -->
  <div class="hidden sm:flex">
    <div class="relative w-64 h-64 flex-shrink-0">
      <img src={artworkUrl} alt={`${title} by ${artist}`} class="w-full h-full object-cover" />
      
      <div class="absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/70 to-transparent flex gap-2 justify-center">
        <button 
          data-release-id={id}
          data-product-type="digital"
          data-price={digitalPrice}
          data-title={title}
          data-artist={artist}
          class="add-to-cart bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
          </svg>
          <span class="text-sm font-semibold">£{digitalPrice.toFixed(2)}</span>
        </button>
        
        {hasVinyl && (
          <button 
            data-release-id={id}
            data-product-type="vinyl"
            data-price={vinylPrice}
            data-digital-price={digitalPrice}
            data-title={title}
            data-artist={artist}
            data-includes-digital="true"
            disabled={!vinylAvailable}
            class={`add-to-cart px-4 py-2 rounded-lg flex items-center gap-2 transition-colors ${vinylAvailable ? 'bg-purple-500 hover:bg-purple-600 text-white' : 'bg-gray-400 text-gray-200 cursor-not-allowed'}`}
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="1.5"/>
              <circle cx="12" cy="12" r="6" fill="none" stroke="currentColor" stroke-width="1.5"/>
              <circle cx="12" cy="12" r="2" fill="currentColor"/>
            </svg>
            <span class="text-sm font-semibold">{vinylAvailable ? `£${vinylPrice?.toFixed(2)}` : 'Sold Out'}</span>
          </button>
        )}
      </div>
    </div>
    
    <div class="flex-1 p-6 flex flex-col">
      <div class="mb-3">
        <h3 class="text-2xl font-bold text-gray-900 mb-1">{title}</h3>
        <button 
          class="filter-by-artist text-lg text-gray-600 mb-1 hover:text-blue-600 hover:underline transition-colors text-left"
          data-artist={artist}
        >
          {artist}
        </button>
        {label && (
          <button 
            class="filter-by-label text-base text-gray-500 mb-2 hover:text-blue-600 hover:underline transition-colors block text-left"
            data-label={label}
          >
            {label}
          </button>
        )}
        
        <div class="flex items-center gap-2 flex-wrap">
          {isPreorder && <span class="inline-block bg-orange-100 text-orange-800 text-xs font-semibold px-2.5 py-1 rounded">Pre-order</span>}
          <span class="text-sm text-gray-500">{isPreorder ? `Ships ${formattedDate}` : formattedDate}</span>
          {vinylAvailable && vinylStock <= 5 && <span class="inline-block bg-red-100 text-red-800 text-xs font-semibold px-2.5 py-1 rounded">Only {vinylStock} left</span>}
          {hasVinyl && vinylAvailable && <span class="inline-block bg-purple-100 text-purple-800 text-xs font-semibold px-2.5 py-1 rounded">Vinyl includes digital</span>}
        </div>
      </div>
      
      {extraNotes && <div class="mb-3 p-3 bg-blue-50 border-l-4 border-blue-400 rounded"><p class="text-sm text-blue-900">{extraNotes}</p></div>}
      
      {tracks.length > 0 && (
        <div class="flex-1 flex flex-col">
          <div class="space-y-2">
            {tracks.slice(0, initialTracksDesktop).map((track) => (
              <div class="flex items-center gap-3 bg-gray-50 rounded p-2">
                <span class="text-sm font-semibold text-gray-500 w-6 flex-shrink-0">{track.track_number}.</span>
                <p class="text-sm font-medium text-gray-900 flex-1 min-w-0 truncate" title={track.title}>{track.title}</p>
                <button class="play-button flex-shrink-0 flex items-center justify-center w-7 h-7 rounded bg-blue-500 text-white hover:bg-blue-600 transition-colors" data-track-id={track.id} title="Play">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                </button>
                <div class="w-48 flex-shrink-0 waveform-inline" data-track-id={track.id}></div>
                <button 
                  class="buy-track flex-shrink-0 bg-green-500 hover:bg-green-600 active:bg-green-700 text-white text-sm font-bold px-4 py-2 rounded transition-colors whitespace-nowrap ml-2"
                  data-track-id={track.id}
                  data-track-title={track.title}
                  data-track-price={trackPrice}
                  data-release-id={id}
                  data-artist={artist}
                  title="Buy track"
                >
                  £{trackPrice.toFixed(2)}
                </button>
                <audio class="hidden track-audio" data-track-id={track.id} preload="none">
                  <source src={track.preview_url || 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'} type="audio/mpeg" />
                </audio>
              </div>
            ))}
          </div>
          {tracks.length > initialTracksDesktop && (
            <details class="mt-2">
              <summary class="cursor-pointer text-sm text-blue-600 hover:text-blue-800 font-semibold p-2 bg-gray-50 rounded hover:bg-gray-100 transition-colors">
                + Show {tracks.length - initialTracksDesktop} more track{tracks.length - initialTracksDesktop !== 1 ? 's' : ''}
              </summary>
              <div class="space-y-2 mt-2">
                {tracks.slice(initialTracksDesktop).map((track) => (
                  <div class="flex items-center gap-3 bg-gray-50 rounded p-2">
                    <span class="text-sm font-semibold text-gray-500 w-6 flex-shrink-0">{track.track_number}.</span>
                    <p class="text-sm font-medium text-gray-900 flex-1 min-w-0 truncate" title={track.title}>{track.title}</p>
                    <button class="play-button flex-shrink-0 flex items-center justify-center w-7 h-7 rounded bg-blue-500 text-white hover:bg-blue-600 transition-colors" data-track-id={track.id} title="Play">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                    </button>
                    <div class="w-48 flex-shrink-0 waveform-inline" data-track-id={track.id}></div>
                    <button 
                      class="buy-track flex-shrink-0 bg-green-500 hover:bg-green-600 active:bg-green-700 text-white text-sm font-bold px-4 py-2 rounded transition-colors whitespace-nowrap ml-2"
                      data-track-id={track.id}
                      data-track-title={track.title}
                      data-track-price={trackPrice}
                      data-release-id={id}
                      data-artist={artist}
                      title="Buy track"
                    >
                      £{trackPrice.toFixed(2)}
                    </button>
                    <audio class="hidden track-audio" data-track-id={track.id} preload="none">
                      <source src={track.preview_url || 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'} type="audio/mpeg" />
                    </audio>
                  </div>
                ))}
              </div>
            </details>
          )}
        </div>
      )}
    </div>
  </div>
</article>

<script>
  function initWaveforms() {
    document.querySelectorAll('.waveform-inline').forEach(container => {
      if (container.children.length === 0) {
        const trackId = container.getAttribute('data-track-id');
        const audio = document.querySelector(`audio[data-track-id="${trackId}"]`);
        if (audio) {
          const canvas = document.createElement('canvas');
          canvas.className = 'h-8 cursor-pointer rounded';
          canvas.width = 200;
          canvas.height = 32;
          
          const ctx = canvas.getContext('2d');
          const bars = 40;
          const barWidth = canvas.width / bars;
          
          function draw(progress = 0) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let i = 0; i < bars; i++) {
              const h = (Math.random() * 0.6 + 0.2) * canvas.height;
              ctx.fillStyle = i / bars < progress ? '#FBBF24' : '#3b82f6';
              ctx.fillRect(i * barWidth, (canvas.height - h) / 2, barWidth - 1, h);
            }
          }
          
          draw();
          container.appendChild(canvas);
          
          canvas.onclick = (e) => {
            const rect = canvas.getBoundingClientRect();
            audio.currentTime = (e.clientX - rect.left) / canvas.width * audio.duration;
          };
          
          audio.ontimeupdate = () => draw(audio.currentTime / audio.duration);
        }
      }
    });

    document.querySelectorAll('.play-button').forEach(btn => {
      if (!btn.initialized) {
        btn.initialized = true;
        btn.onclick = () => {
          const trackId = btn.getAttribute('data-track-id');
          const audio = document.querySelector(`audio[data-track-id="${trackId}"]`);
          document.querySelectorAll('.track-audio').forEach(a => {
            if (a !== audio) {
              a.pause();
              a.currentTime = 0;
            }
          });
          if (audio.paused) {
            audio.play();
            btn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/></svg>';
          } else {
            audio.pause();
            btn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
          }
        };
      }
    });

    document.querySelectorAll('.track-audio').forEach(audio => {
      audio.onended = () => {
        const btn = document.querySelector(`.play-button[data-track-id="${audio.getAttribute('data-track-id')}"]`);
        if (btn) btn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
      };
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWaveforms);
  } else {
    initWaveforms();
  }
  setTimeout(initWaveforms, 100);

  document.addEventListener('click', (e) => {
    const button = e.target.closest('.add-to-cart');
    if (!button || button.hasAttribute('disabled')) return;
    
    const releaseId = button.getAttribute('data-release-id');
    const productType = button.getAttribute('data-product-type');
    const price = button.getAttribute('data-price');
    const title = button.getAttribute('data-title');
    const artist = button.getAttribute('data-artist');
    
    let cart = JSON.parse(localStorage.getItem('freshwax-cart') || '[]');
    
    if (productType === 'digital') {
      if (cart.some(item => item.releaseId === releaseId && item.productType === 'vinyl')) {
        alert('You already have the vinyl version which includes digital!');
        return;
      }
    }
    
    if (productType === 'vinyl') {
      cart = cart.filter(item => !(item.releaseId === releaseId && item.productType === 'digital'));
      cart.push({ releaseId, productType: 'vinyl', price: parseFloat(price), title, artist, quantity: 1, includesDigital: true });
    } else {
      cart.push({ releaseId, productType: 'digital', price: parseFloat(price), title, artist, quantity: 1 });
    }
    
    localStorage.setItem('freshwax-cart', JSON.stringify(cart));
    const html = button.innerHTML;
    button.innerHTML = '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>';
    button.classList.add('opacity-75');
    setTimeout(() => { button.innerHTML = html; button.classList.remove('opacity-75'); }, 1000);
    window.dispatchEvent(new CustomEvent('cart-updated'));
  });

  // Buy track button handler
  document.addEventListener('click', (e) => {
    const button = e.target.closest('.buy-track');
    if (!button) return;
    
    const trackId = button.getAttribute('data-track-id');
    const trackTitle = button.getAttribute('data-track-title');
    const trackPrice = button.getAttribute('data-track-price');
    const releaseId = button.getAttribute('data-release-id');
    const artist = button.getAttribute('data-artist');
    
    let cart = JSON.parse(localStorage.getItem('freshwax-cart') || '[]');
    
    // Check if user already has digital or vinyl version of the full release
    const hasFullRelease = cart.some(item => 
      item.releaseId === releaseId && 
      (item.productType === 'digital' || item.productType === 'vinyl')
    );
    
    if (hasFullRelease) {
      alert('You already have the full release which includes this track!');
      return;
    }
    
    // Check if track is already in cart
    const existingTrack = cart.find(item => 
      item.releaseId === releaseId && 
      item.trackId === trackId && 
      item.productType === 'track'
    );
    
    if (existingTrack) {
      alert('This track is already in your cart!');
      return;
    }
    
    cart.push({ 
      releaseId, 
      trackId,
      productType: 'track', 
      price: parseFloat(trackPrice), 
      title: trackTitle, 
      artist, 
      quantity: 1 
    });
    
    localStorage.setItem('freshwax-cart', JSON.stringify(cart));
    const html = button.innerHTML;
    button.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>';
    button.classList.add('opacity-75');
    setTimeout(() => { button.innerHTML = html; button.classList.remove('opacity-75'); }, 1000);
    window.dispatchEvent(new CustomEvent('cart-updated'));
  });
</script>