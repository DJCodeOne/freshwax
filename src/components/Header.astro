---
// src/components/Header.astro
---

<header class="bg-white border-b-2 border-black sticky top-0 z-50 shadow-sm">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
    
    <!-- Mobile Layout -->
    <div class="flex flex-col gap-3 sm:hidden">
      <div class="flex items-center justify-between">
        <a href="/" class="flex items-center">
          <img src="/logo.webp" alt="Freshwax" style="height: 50px;" />
        </a>
        
        <div class="flex items-center gap-2">
          <!-- Customer Dropdown Mobile -->
          <div class="relative account-dropdown">
            <button class="account-button customer-button bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-1 text-sm border border-gray-300">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span class="customer-name">Customer</span>
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div class="account-menu hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border-2 border-black py-2 z-50">
              <!-- Logged Out Menu -->
              <div class="customer-logged-out">
                <a href="/customer/login" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                  </svg>
                  Login
                </a>
                <a href="/customer/register" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                  </svg>
                  Register
                </a>
              </div>
              <!-- Logged In Menu -->
              <div class="customer-logged-in hidden">
                <a href="/account/dashboard" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                  </svg>
                  Dashboard
                </a>
                <a href="/account/orders" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                  </svg>
                  Orders
                </a>
                <button class="customer-logout-btn block w-full text-left px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors font-semibold">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                  </svg>
                  Logout
                </button>
              </div>
            </div>
          </div>

          <!-- Artist Dropdown Mobile -->
          <div class="relative account-dropdown">
            <button class="account-button artist-button bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-1 text-sm border border-gray-300">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
              </svg>
              <span class="artist-name">Artist</span>
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div class="account-menu hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border-2 border-black py-2 z-50">
              <!-- Logged Out Menu -->
              <div class="artist-logged-out">
                <a href="/login" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                  </svg>
                  Login
                </a>
                <a href="/register" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                  </svg>
                  Register
                </a>
              </div>
              <!-- Logged In Menu -->
              <div class="artist-logged-in hidden">
                <a href="/dashboard" class="block px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                  </svg>
                  Dashboard
                </a>
                <button class="artist-logout-btn block w-full text-left px-4 py-2 text-sm text-black hover:bg-gray-100 transition-colors font-semibold">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                  </svg>
                  Logout
                </button>
              </div>
            </div>
          </div>

          <a 
            href="/cart" 
            class="relative bg-black text-white px-3 py-2 rounded-lg hover:bg-gray-800 transition-colors flex items-center gap-2 cart-link"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            <span class="text-sm">Bag</span>
            <span id="cart-count-mobile" class="absolute -top-2 -right-2 bg-black text-white text-xs rounded-full w-5 h-5 flex items-center justify-center hidden border border-white">0</span>
          </a>
        </div>
      </div>
      
      <div class="relative w-full">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <input
          type="text"
          id="search-input-mobile"
          placeholder="Search..."
          class="block w-full pl-9 pr-3 py-2 text-sm border-2 border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-black focus:border-black"
          autocomplete="off"
        />
        <div id="search-dropdown-mobile" class="absolute w-full mt-2 bg-white border-2 border-black rounded-lg shadow-lg hidden max-h-96 overflow-y-auto z-50"></div>
      </div>
    </div>

    <!-- Desktop Layout -->
    <div class="hidden sm:flex items-center justify-between gap-8">
      <a href="/" class="flex items-center flex-shrink-0">
        <img src="/logo.webp" alt="Freshwax" style="height: 70px;" />
      </a>
      
      <div class="flex-1 max-w-2xl relative">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input
            type="text"
            id="search-input"
            placeholder="Search by artist, title, or label..."
            class="block w-full pl-10 pr-3 py-2 border-2 border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-black focus:border-black"
            autocomplete="off"
          />
        </div>
        <div id="search-dropdown" class="absolute w-full mt-2 bg-white border-2 border-black rounded-lg shadow-lg hidden max-h-96 overflow-y-auto z-50"></div>
      </div>
      
      <div class="flex items-center gap-3 flex-shrink-0">
        <a 
          href="/releases" 
          class="bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 font-medium text-sm border border-gray-300"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
          </svg>
          All Releases
        </a>

        <a 
          href="/dj-mixes" 
          class="bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 font-medium text-sm border border-gray-300"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
          </svg>
          DJ Mixes
        </a>

        <a 
          href="/merch" 
          class="bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 font-medium text-sm border border-gray-300"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
          </svg>
          Merch
        </a>

        <!-- Customer Dropdown Desktop -->
        <div class="relative account-dropdown">
          <button class="account-button customer-button bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 font-medium text-sm border border-gray-300">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            <span class="customer-name">Customer</span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div class="account-menu hidden absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border-2 border-black py-2 z-50">
            <!-- Logged Out Menu -->
            <div class="customer-logged-out">
              <a href="/customer/login" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                </svg>
                Login
              </a>
              <a href="/customer/register" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                </svg>
                Register
              </a>
            </div>
            <!-- Logged In Menu -->
            <div class="customer-logged-in hidden">
              <a href="/account/dashboard" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                Dashboard
              </a>
              <a href="/account/orders" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                </svg>
                Orders
              </a>
              <button class="customer-logout-btn block w-full text-left px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors font-semibold">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                Logout
              </button>
            </div>
          </div>
        </div> 

        <!-- Artist Dropdown Desktop -->
        <div class="relative account-dropdown">
          <button class="account-button artist-button bg-gray-100 text-black px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 font-medium text-sm border border-gray-300">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
            <span class="artist-name">Artist</span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div class="account-menu hidden absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border-2 border-black py-2 z-50">
            <!-- Logged Out Menu -->
            <div class="artist-logged-out">
              <a href="/login" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                </svg>
                Login
              </a>
              <a href="/register" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                </svg>
                Register
              </a>
            </div>
            <!-- Logged In Menu -->
            <div class="artist-logged-in hidden">
              <a href="/dashboard" class="block px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                Dashboard
              </a>
              <button class="artist-logout-btn block w-full text-left px-4 py-3 text-sm text-black hover:bg-gray-100 transition-colors font-semibold">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                Logout
              </button>
            </div>
          </div>
        </div>

        <a 
          href="/cart" 
          class="relative bg-black text-white px-3 py-2 rounded-lg hover:bg-gray-800 transition-colors flex items-center gap-2 cart-link"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
          </svg>
          Bag
          <span id="cart-count" class="absolute -top-2 -right-2 bg-black text-white text-xs rounded-full w-5 h-5 flex items-center justify-center hidden border border-white">0</span>
        </a>
      </div>
    </div>
  </div>
</header>

<!-- Search Results Overlay -->
<div id="search-results-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden overflow-y-auto">
  <div class="min-h-screen px-4 py-8">
    <div class="max-w-7xl mx-auto bg-white rounded-lg shadow-xl border-2 border-black">
      <div class="sticky top-0 bg-white border-b-2 border-black px-6 py-4 rounded-t-lg z-10 flex items-center justify-between">
        <h2 id="search-results-title" class="text-2xl font-bold text-black">Search Results</h2>
        <button id="close-search-results" class="text-gray-600 hover:text-black transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div id="search-results-content" class="p-6"></div>
    </div>
  </div>
</div>

<script>
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
  import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
  import { getFirestore, doc, getDoc } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

  const firebaseConfig = {
    apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
    authDomain: "freshwax-store.firebaseapp.com",
    projectId: "freshwax-store",
    storageBucket: "freshwax-store.firebasestorage.app",
    messagingSenderId: "675435782973",
    appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);

  // Check login status for both Artist and Customer
  async function checkLoginStatus() {
    onAuthStateChanged(auth, async (user) => {
      if (user) {
        // Check if user is an artist
        const artistDoc = await getDoc(doc(db, 'artists', user.uid));
        
        if (artistDoc.exists()) {
          // User is an Artist
          const artistData = artistDoc.data();
          const fullName = artistData.name || artistData.artistName || user.email?.split('@')[0] || 'Artist';
          // Use only first name (split on space and take first part)
          const artistName = fullName.split(' ')[0];
          
          // Update all artist name displays
          document.querySelectorAll('.artist-name').forEach(el => {
            el.textContent = artistName;
          });
          
          // Update all artist buttons to show dark grey/active state
          document.querySelectorAll('.artist-button').forEach(btn => {
            btn.classList.remove('bg-gray-100', 'text-black', 'border-gray-300');
            btn.classList.add('bg-gray-800', 'text-white', 'border-2', 'border-black');
          });
          
          // Show logged-in menu, hide logged-out menu
          document.querySelectorAll('.artist-logged-in').forEach(el => el.classList.remove('hidden'));
          document.querySelectorAll('.artist-logged-out').forEach(el => el.classList.add('hidden'));
        }
        
        // Check if user is a customer (separate collection)
        const customerDoc = await getDoc(doc(db, 'customers', user.uid));
        
        if (customerDoc.exists()) {
          // User is a Customer
          const customerData = customerDoc.data();
          const fullName = customerData.name || customerData.firstName || user.email?.split('@')[0] || 'Customer';
          // Use only first name (split on space and take first part)
          const customerName = fullName.split(' ')[0];
          
          // Update all customer name displays
          document.querySelectorAll('.customer-name').forEach(el => {
            el.textContent = customerName;
          });
          
          // Update all customer buttons to show dark grey/active state
          document.querySelectorAll('.customer-button').forEach(btn => {
            btn.classList.remove('bg-gray-100', 'text-black', 'border-gray-300');
            btn.classList.add('bg-gray-800', 'text-white', 'border-2', 'border-black');
          });
          
          // Show logged-in menu, hide logged-out menu
          document.querySelectorAll('.customer-logged-in').forEach(el => el.classList.remove('hidden'));
          document.querySelectorAll('.customer-logged-out').forEach(el => el.classList.add('hidden'));
        }
      }
    });
  }

  // Initialize login status check
  checkLoginStatus();

  // Handle customer logout
  document.querySelectorAll('.customer-logout-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      try {
        await signOut(auth);
        window.location.reload();
      } catch (error) {
        console.error('Logout error:', error);
      }
    });
  });

  // Handle artist logout
  document.querySelectorAll('.artist-logout-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      try {
        await signOut(auth);
        window.location.href = '/';
      } catch (error) {
        console.error('Logout error:', error);
      }
    });
  });

  // Handle cart link - check if customer is logged in
  document.querySelectorAll('.cart-link').forEach(link => {
    link.addEventListener('click', async (e) => {
      e.preventDefault();
      
      const user = auth.currentUser;
      
      if (!user) {
        alert('Please log in as a customer to access your cart.');
        window.location.href = '/customer/login';
        return;
      }
      
      // Check if logged in as customer
      const customerDoc = await getDoc(doc(db, 'customers', user.uid));
      
      if (!customerDoc.exists()) {
        alert('Only customers can purchase items. Artists need a separate customer account to buy products.');
        window.location.href = '/customer/login';
        return;
      }
      
      // Customer is logged in, proceed to cart
      window.location.href = '/cart';
    });
  });

  // Account dropdown functionality
  document.querySelectorAll('.account-dropdown').forEach(dropdown => {
    const button = dropdown.querySelector('.account-button') as HTMLElement;
    const menu = dropdown.querySelector('.account-menu') as HTMLElement;
    
    button?.addEventListener('click', (e) => {
      e.stopPropagation();
      
      // Close other dropdowns
      document.querySelectorAll('.account-menu').forEach(m => {
        if (m !== menu) m.classList.add('hidden');
      });
      
      // Toggle this dropdown
      menu?.classList.toggle('hidden');
    });
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', () => {
    document.querySelectorAll('.account-menu').forEach(menu => {
      menu.classList.add('hidden');
    });
  });

  // Update cart count from localStorage
  function updateCartCount() {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const totalItems = cart.reduce((sum: number, item: any) => sum + (item.quantity || 1), 0);
    
    const desktopCount = document.getElementById('cart-count');
    const mobileCount = document.getElementById('cart-count-mobile');
    
    if (totalItems > 0) {
      if (desktopCount) {
        desktopCount.textContent = totalItems.toString();
        desktopCount.classList.remove('hidden');
      }
      if (mobileCount) {
        mobileCount.textContent = totalItems.toString();
        mobileCount.classList.remove('hidden');
      }
    } else {
      desktopCount?.classList.add('hidden');
      mobileCount?.classList.add('hidden');
    }
  }

  // Update cart count on page load
  updateCartCount();

  // Listen for cart updates
  window.addEventListener('storage', updateCartCount);
  window.addEventListener('cart-updated', updateCartCount);

  // Search functionality
  interface SearchResult {
    id: string;
    title: string;
    artist: string;
    label?: string;
    image: string;
    price: string;
    type: 'release' | 'dj-mix' | 'merch';
  }

  let allItems: SearchResult[] = [];
  let itemsLoaded = false;

  async function loadAllItems() {
    if (itemsLoaded) return allItems;
    
    try {
      const allResults: SearchResult[] = [];
      
      console.log('[SEARCH] Loading items...');
      
      // Load releases - same URL as lib/releases.ts
      try {
        const timestamp = Date.now();
        const releasesUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/releases/releases.json?t=${timestamp}`;
        
        console.log('[SEARCH] Fetching releases from:', releasesUrl);
        const releasesResponse = await fetch(releasesUrl, { cache: 'no-store' });
        console.log('[SEARCH] Releases response:', releasesResponse.status);
        
        if (releasesResponse.ok) {
          const releases = await releasesResponse.json();
          console.log('[SEARCH] Releases loaded:', releases.length);
          
          // Filter published only (like lib/releases.ts does)
          const publishedReleases = releases.filter((r: any) => r.published === true);
          console.log('[SEARCH] Published releases:', publishedReleases.length);
          
          publishedReleases.forEach((release: any) => {
            allResults.push({
              id: release.id || '',
              title: release.title || '',
              artist: release.artist || '',
              label: release.label || '',
              image: release.artworkUrl || release.coverUrl || '/logo.webp',
              price: `£${release.digitalPrice || '0.00'}`,
              type: 'release'
            });
          });
        }
      } catch (error) {
        console.error('[SEARCH] Error loading releases:', error);
      }
      
      // Load DJ mixes
      try {
        const timestamp = Date.now();
        const mixesUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/dj-mixes/mixes.json?t=${timestamp}`;
        
        console.log('[SEARCH] Fetching mixes from:', mixesUrl);
        const mixesResponse = await fetch(mixesUrl, { cache: 'no-store' });
        console.log('[SEARCH] Mixes response:', mixesResponse.status);
        
        if (mixesResponse.ok) {
          const mixes = await mixesResponse.json();
          console.log('[SEARCH] Mixes loaded:', mixes.length);
          console.log('[SEARCH] First mix:', mixes[0]);
          
          if (Array.isArray(mixes)) {
            mixes.forEach((mix: any) => {
              allResults.push({
                id: mix.id || '',
                title: mix.title || '',
                artist: mix.dj_name || mix.artist || '',
                image: mix.artwork_url || '/logo.webp',
                price: `£${mix.price || '0.00'}`,
                type: 'dj-mix'
              });
            });
          }
        }
      } catch (error) {
        console.error('[SEARCH] Error loading DJ mixes:', error);
      }
      
      // Load merch
      try {
        const timestamp = Date.now();
        const merchUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/merch/products.json?t=${timestamp}`;
        
        console.log('[SEARCH] Fetching merch from:', merchUrl);
        const merchResponse = await fetch(merchUrl, { cache: 'no-store' });
        console.log('[SEARCH] Merch response:', merchResponse.status);
        
        if (merchResponse.ok) {
          const products = await merchResponse.json();
          console.log('[SEARCH] Merch loaded:', products.length);
          
          if (Array.isArray(products)) {
            products.forEach((product: any) => {
              allResults.push({
                id: product.id || '',
                title: product.name || product.title || '',
                artist: product.categoryName || product.brand || '',
                image: product.images?.[0]?.url || product.image || '/logo.webp',
                price: `£${product.price || '0.00'}`,
                type: 'merch'
              });
            });
          }
        }
      } catch (error) {
        console.error('[SEARCH] Error loading merch:', error);
      }
      
      allItems = allResults;
      itemsLoaded = true;
      console.log('[SEARCH] Total items loaded:', allItems.length);
      console.log('[SEARCH] Breakdown - Releases:', allItems.filter(i => i.type === 'release').length, 'Mixes:', allItems.filter(i => i.type === 'dj-mix').length, 'Merch:', allItems.filter(i => i.type === 'merch').length);
      return allItems;
    } catch (error) {
      console.error('[SEARCH] Error loading items:', error);
      return [];
    }
  }

  async function searchReleases(query: string): Promise<SearchResult[]> {
    const items = await loadAllItems();
    
    if (!query.trim()) return [];
    
    const searchTerms = query.toLowerCase().trim().split(' ');
    
    const results = items.filter(item => {
      const searchableText = `${item.title} ${item.artist} ${item.label || ''}`.toLowerCase();
      return searchTerms.some(term => searchableText.includes(term));
    });
    
    console.log('[SEARCH] Query:', query, 'Results:', results.length);
    return results;
  }

  function navigateToItem(item: SearchResult) {
    console.log('[NAVIGATION] Navigating to:', item);
    const url = `/item/${item.id}`;
    console.log('[NAVIGATION] URL:', url);
    window.location.href = url;
  }

  function showDropdownSuggestions(results: SearchResult[], query: string, dropdown: HTMLElement) {
    if (results.length === 0) {
      dropdown.innerHTML = `<div class="p-4 text-center text-gray-600">No results found for "${query}"</div>`;
      dropdown.classList.remove('hidden');
      return;
    }
    
    const maxResults = 5;
    const displayResults = results.slice(0, maxResults);
    
    const getTypeBadge = (type: string) => {
      switch(type) {
        case 'release': return '<span class="text-xs px-2 py-1 bg-black text-white rounded">Release</span>';
        case 'dj-mix': return '<span class="text-xs px-2 py-1 bg-gray-500 text-white rounded">DJ Mix</span>';
        case 'merch': return '<span class="text-xs px-2 py-1 bg-purple-600 text-white rounded">Merch</span>';
        default: return '';
      }
    };
    
    dropdown.innerHTML = displayResults.map(item => `
      <div class="flex items-center gap-3 p-3 hover:bg-gray-100 border-b border-gray-200 last:border-0 search-suggestion cursor-pointer" data-item-id="${item.id}" data-item-type="${item.type}">
        <img src="${item.image}" alt="${item.title}" class="w-12 h-12 object-cover rounded border border-gray-300" onerror="this.src='/placeholder.jpg'" />
        <div class="flex-1 min-w-0">
          <div class="flex items-center gap-2 mb-1">
            <p class="font-medium text-black truncate">${item.title}</p>
            ${getTypeBadge(item.type)}
          </div>
          <p class="text-sm text-gray-700 truncate">${item.artist}${item.label ? ` • ${item.label}` : ''}</p>
        </div>
        <span class="text-sm font-bold text-black">${item.price}</span>
      </div>
    `).join('');
    
    dropdown.classList.remove('hidden');
    
    dropdown.querySelectorAll('.search-suggestion').forEach(suggestion => {
      suggestion.addEventListener('click', () => {
        const itemId = suggestion.getAttribute('data-item-id');
        const itemType = suggestion.getAttribute('data-item-type');
        const item = results.find(r => r.id === itemId && r.type === itemType);
        if (item) {
          navigateToItem(item);
          dropdown.classList.add('hidden');
        }
      });
    });
  }

  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchInputMobile = document.getElementById('search-input-mobile') as HTMLInputElement;
  const searchDropdown = document.getElementById('search-dropdown') as HTMLElement;
  const searchDropdownMobile = document.getElementById('search-dropdown-mobile') as HTMLElement;

  let searchTimeout: number;

  async function handleSearch(input: HTMLInputElement, dropdown: HTMLElement, otherInput: HTMLInputElement) {
    const query = input.value;
    
    if (otherInput) {
      otherInput.value = query;
    }
    
    clearTimeout(searchTimeout);
    
    if (!query.trim()) {
      dropdown.classList.add('hidden');
      return;
    }
    
    dropdown.innerHTML = `<div class="p-4 text-center text-gray-600">Searching...</div>`;
    dropdown.classList.remove('hidden');
    
    searchTimeout = window.setTimeout(async () => {
      const results = await searchReleases(query);
      showDropdownSuggestions(results, query, dropdown);
    }, 300);
  }

  searchInput?.addEventListener('input', () => handleSearch(searchInput, searchDropdown, searchInputMobile));
  searchInputMobile?.addEventListener('input', () => handleSearch(searchInputMobile, searchDropdownMobile, searchInput));

  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!target.closest('#search-input') && !target.closest('#search-dropdown')) {
      searchDropdown?.classList.add('hidden');
    }
    if (!target.closest('#search-input-mobile') && !target.closest('#search-dropdown-mobile')) {
      searchDropdownMobile?.classList.add('hidden');
    }
  });

  loadAllItems();

</script>