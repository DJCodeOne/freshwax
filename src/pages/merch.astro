---
// src/pages/merch-enhanced.astro
import { v2 as cloudinary } from 'cloudinary';

cloudinary.config({
  cloud_name: 'dscqbze0d',
  api_key: '555922422486159',
  api_secret: '1OV_96Pd_x7MSdt7Bph5aNELYho',
});

let allProducts = [];

try {
  const info = await cloudinary.api.resource('merch/products.json', {
    resource_type: 'raw'
  });
  
  const version = info.version;
  const productsUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/v${version}/merch/products.json`;
  
  const response = await fetch(productsUrl, { cache: 'no-store' });
  
  if (response.ok) {
    const data = await response.json();
    if (Array.isArray(data)) {
      allProducts = data;
    }
  }
} catch (error) {
  console.error('Error loading products:', error);
}

// Group products by type and category
const productsByCategory = allProducts.reduce((acc, product) => {
  if (!acc[product.type]) acc[product.type] = {};
  if (!acc[product.type][product.categoryId]) acc[product.type][product.categoryId] = [];
  acc[product.type][product.categoryId].push(product);
  return acc;
}, {});
---

<!DOCTYPE html>
<html lang="en-GB">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fresh Wax - Merch</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body { background: #ffffff; color: #000; margin: 0; padding: 0; }
    .merch-container { display: flex; height: calc(100vh - 140px); overflow: hidden; }
    .nav-panel { width: 300px; background: #f5f5f5; border-right: 2px solid #e0e0e0; overflow-y: auto; flex-shrink: 0; }
    .preview-panel { flex: 1; background: #ffffff; overflow-y: auto; position: relative; }
    .nav-category { border-bottom: 1px solid #e0e0e0; }
    .nav-category-title { padding: 1rem 1.5rem; background: #ffffff; font-weight: bold; font-size: 0.875rem; text-transform: uppercase; letter-spacing: 0.05em; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: background 0.2s; }
    .nav-category-title:hover { background: #fafafa; }
    .nav-category-items { display: none; }
    .nav-category-items.active { display: block; }
    .nav-item { padding: 0.75rem 1.5rem 0.75rem 2.5rem; cursor: pointer; transition: all 0.2s; font-size: 0.875rem; border-left: 3px solid transparent; }
    .nav-item:hover { background: #ffffff; border-left-color: #000; }
    .nav-item.active { background: #ffffff; border-left-color: #000; font-weight: 600; }
    .product-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 1.5rem; padding: 2rem; }
    .product-card { border: 2px solid #000; background: #fff; cursor: pointer; transition: all 0.2s; position: relative; }
    .product-card:hover { transform: translate(-4px, -4px); box-shadow: 8px 8px 0 #000; }
    
    /* Image carousel in card */
    .product-card-images { position: relative; width: 100%; aspect-ratio: 1; overflow: hidden; }
    .product-card-images img { width: 100%; height: 100%; object-fit: cover; position: absolute; top: 0; left: 0; opacity: 0; transition: opacity 0.3s; }
    .product-card-images img.active { opacity: 1; }
    .product-card-nav { position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); display: flex; gap: 5px; z-index: 10; }
    .product-card-nav-dot { width: 8px; height: 8px; border-radius: 50%; background: rgba(255,255,255,0.5); border: 1px solid #000; cursor: pointer; }
    .product-card-nav-dot.active { background: #fff; }
    
    .product-card-info { padding: 1rem; }
    .product-card-info h3 { font-size: 16px; font-weight: 900; margin-bottom: 0.5rem; }
    .product-card-colors { display: flex; gap: 5px; margin-bottom: 0.5rem; flex-wrap: wrap; }
    .product-card-color-dot { width: 20px; height: 20px; border: 2px solid #000; border-radius: 50%; }
    .product-card-info .price { font-size: 20px; font-weight: 900; color: #000; margin-top: 0.5rem; }
    
    .empty-state { padding: 3rem 2rem; }
    
    /* Carousel styles */
    .carousel-item { flex: 0 0 250px; border: 2px solid #000; background: #fff; cursor: pointer; transition: all 0.2s; }
    .carousel-item:hover { transform: translate(-4px, -4px); box-shadow: 8px 8px 0 #000; }
    .carousel-item img { width: 100%; aspect-ratio: 1; object-fit: cover; }
    .carousel-item-info { padding: 1rem; }
    .carousel-item-info h3 { font-size: 16px; font-weight: 900; margin-bottom: 0.5rem; }
    .carousel-item-info .category { font-size: 12px; color: #666; text-transform: uppercase; margin-bottom: 0.5rem; }
    .carousel-item-info .price { font-size: 20px; font-weight: 900; }
    .carousel-dot { width: 12px; height: 12px; border-radius: 50%; background: #e0e0e0; border: 2px solid #000; cursor: pointer; transition: all 0.2s; }
    .carousel-dot.active { background: #000; transform: scale(1.2); }
    
    @keyframes pulse {
      0%, 100% { transform: translate(-4px, -4px); box-shadow: 8px 8px 0 #000; }
      50% { transform: translate(-6px, -6px); box-shadow: 12px 12px 0 #000; }
    }
    
    @media (max-width: 768px) {
      .carousel-item { flex: 0 0 180px; }
      #featured-carousel { padding: 0 40px !important; }
      #carousel-prev, #carousel-next { width: 35px !important; height: 35px !important; font-size: 18px !important; }
    }
    
    /* Product modal */
    .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1000; overflow-y: auto; }
    .modal.active { display: flex; align-items: center; justify-content: center; padding: 2rem; }
    .modal-content { background: #fff; border: 3px solid #000; max-width: 900px; width: 100%; display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; padding: 2rem; position: relative; }
    .modal-close { position: absolute; top: 1rem; right: 1rem; background: #000; color: #fff; border: none; width: 40px; height: 40px; font-size: 24px; cursor: pointer; font-weight: 900; }
    .modal-close:hover { background: #ff0000; }
    .modal-image-carousel { position: relative; }
    .modal-image-carousel img { width: 100%; border: 2px solid #000; }
    .modal-carousel-nav { display: flex; gap: 10px; margin-top: 15px; overflow-x: auto; }
    .modal-carousel-nav img { width: 80px; height: 80px; object-fit: cover; border: 2px solid #000; cursor: pointer; opacity: 0.5; }
    .modal-carousel-nav img.active { opacity: 1; border-color: #000; border-width: 3px; }
    .modal-details h2 { font-size: 24px; font-weight: 900; margin-bottom: 10px; }
    .modal-price { font-size: 28px; font-weight: 900; margin-bottom: 15px; }
    .modal-colors { display: flex; gap: 10px; margin-bottom: 15px; align-items: center; }
    .modal-color-swatch { width: 35px; height: 35px; border: 2px solid #000; cursor: pointer; }
    .modal-color-swatch.selected { border-width: 3px; box-shadow: 0 0 0 2px #fff, 0 0 0 4px #000; }
    .modal-sizes { display: flex; gap: 10px; flex-wrap: wrap; margin-bottom: 15px; }
    .modal-size-btn { padding: 10px 15px; border: 2px solid #000; background: #fff; font-weight: 700; cursor: pointer; }
    .modal-size-btn.selected { background: #000; color: #fff; }
    .modal-size-btn:disabled { opacity: 0.3; cursor: not-allowed; }
    .add-to-cart-btn { width: 100%; padding: 15px; background: #000; color: #fff; border: 2px solid #000; font-weight: 900; font-size: 16px; text-transform: uppercase; cursor: pointer; }
    .add-to-cart-btn:hover { background: #fff; color: #000; }
    
    @media (max-width: 768px) {
      .merch-container { flex-direction: column; height: auto; }
      .nav-panel { width: 100%; border-right: none; border-bottom: 2px solid #e0e0e0; max-height: 300px; }
      .product-grid { grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); padding: 1rem; gap: 1rem; }
      .modal-content { grid-template-columns: 1fr; max-height: 90vh; overflow-y: auto; }
    }
  </style>
</head>
<body>
  <header class="bg-white border-b border-gray-200 sticky top-0 z-50 shadow-sm">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
      <div class="flex items-center justify-between gap-8">
        <a href="/" class="flex items-center flex-shrink-0">
          <img src="/logo.webp" alt="Freshwax" style="height: 70px;" />
        </a>
        
        <div class="flex items-center gap-3 flex-shrink-0">
          <a href="/" class="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition font-medium text-sm">
            ‚Üê Back
          </a>
          <a href="/cart" class="relative px-3 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            Bag
            <span id="cart-count" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center hidden">0</span>
          </a>
        </div>
      </div>
    </div>
  </header>

  <div class="min-h-screen">
    <div class="merch-container">
      <div class="nav-panel">
        <div class="nav-category">
          <div class="nav-category-title" onclick="toggleCategory('labels')">
            <span>Labels</span>
            <svg class="w-4 h-4 transition-transform" id="labels-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
          <div class="nav-category-items active" id="labels-items">
            {Object.keys(productsByCategory.label || {}).map(catId => {
              const product = productsByCategory.label[catId][0];
              return (
                <div class="nav-item" onclick={`selectCategory('label', '${catId}')`}>{product.categoryName}</div>
              );
            })}
          </div>
        </div>

        <div class="nav-category">
          <div class="nav-category-title" onclick="toggleCategory('djs')">
            <span>DJs</span>
            <svg class="w-4 h-4 transition-transform" id="djs-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
          <div class="nav-category-items" id="djs-items">
            {Object.keys(productsByCategory.dj || {}).map(catId => {
              const product = productsByCategory.dj[catId][0];
              return (
                <div class="nav-item" onclick={`selectCategory('dj', '${catId}')`}>{product.categoryName}</div>
              );
            })}
          </div>
        </div>

        <div class="nav-category">
          <div class="nav-category-title" onclick="toggleCategory('soundsystems')">
            <span>Sound Systems</span>
            <svg class="w-4 h-4 transition-transform" id="soundsystems-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
          <div class="nav-category-items" id="soundsystems-items">
            {Object.keys(productsByCategory.soundsystem || {}).map(catId => {
              const product = productsByCategory.soundsystem[catId][0];
              return (
                <div class="nav-item" onclick={`selectCategory('soundsystem', '${catId}')`}>{product.categoryName}</div>
              );
            })}
          </div>
        </div>

        <div class="nav-category">
          <div class="nav-category-title" onclick="toggleCategory('crews')">
            <span>Crews</span>
            <svg class="w-4 h-4 transition-transform" id="crews-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
          <div class="nav-category-items" id="crews-items">
            {Object.keys(productsByCategory.crew || {}).map(catId => {
              const product = productsByCategory.crew[catId][0];
              return (
                <div class="nav-item" onclick={`selectCategory('crew', '${catId}')`}>{product.categoryName}</div>
              );
            })}
          </div>
        </div>
      </div>

      <div class="preview-panel">
        <div id="product-grid-container" class="product-grid" style="display: none;"></div>
        
        <div id="empty-state" class="empty-state">
          <!-- Featured Products Carousel -->
          <div style="max-width: 1000px; margin: 0 auto;">
            <div style="text-align: left; padding: 0 2rem 1rem; border-bottom: 3px solid #000; margin-bottom: 2rem;">
              <h2 style="font-size: 32px; font-weight: 900; margin-bottom: 10px;">Featured Merch</h2>
              <p style="color: #666;">Browse categories on the left or click any product below</p>
            </div>
            
            <div id="featured-carousel" style="position: relative; padding: 0 60px;">
              <button id="carousel-prev" style="position: absolute; left: 0; top: 50%; transform: translateY(-50%); width: 50px; height: 50px; background: #000; color: #fff; border: 2px solid #000; font-size: 24px; font-weight: 900; cursor: pointer; z-index: 10;">‚Äπ</button>
              
              <div style="overflow: hidden;">
                <div id="carousel-track" style="display: flex; transition: transform 0.5s ease; gap: 1.5rem;">
                  <!-- Carousel items will be inserted here -->
                </div>
              </div>
              
              <button id="carousel-next" style="position: absolute; right: 0; top: 50%; transform: translateY(-50%); width: 50px; height: 50px; background: #000; color: #fff; border: 2px solid #000; font-size: 24px; font-weight: 900; cursor: pointer; z-index: 10;">‚Ä∫</button>
            </div>
            
            <div id="carousel-dots" style="display: flex; justify-content: center; gap: 10px; margin-top: 2rem;">
              <!-- Dots will be inserted here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Modal -->
  <div id="product-modal" class="modal">
    <div class="modal-content">
      <button class="modal-close" onclick="closeModal()">√ó</button>
      <div class="modal-image-section">
        <div class="modal-image-carousel" id="modal-image-carousel"></div>
        <div class="modal-carousel-nav" id="modal-carousel-nav"></div>
      </div>
      <div class="modal-details" id="modal-details"></div>
    </div>
  </div>

  <script define:vars={{ allProducts: JSON.stringify(allProducts) }}>
    const products = JSON.parse(allProducts);
    let currentProduct = null;
    let selectedColor = null;
    let selectedSize = null;
    let currentModalImageIndex = 0;
    let carouselIndex = 0;
    let featuredProducts = [];
    
    // Initialize featured carousel
    function initFeaturedCarousel() {
      if (products.length === 0) return;
      
      // Get random products (8-12 items)
      const shuffled = [...products].sort(() => Math.random() - 0.5);
      featuredProducts = shuffled.slice(0, Math.min(12, products.length));
      
      const carouselTrack = document.getElementById('carousel-track');
      carouselTrack.innerHTML = featuredProducts.map(product => {
        const images = product.images || [{ url: product.image }];
        const colors = product.colors || [];
        
        return `
          <div class="carousel-item" onclick="openProductCategory('${product.type}', '${product.categoryId}', '${product.id}')">
            <img src="${images[0].url}" alt="${product.name}" />
            <div class="carousel-item-info">
              <div class="category">${product.categoryName}</div>
              <h3>${product.name}</h3>
              ${colors.length > 0 ? `
                <div style="display: flex; gap: 5px; margin-bottom: 0.5rem;">
                  ${colors.slice(0, 4).map(c => `<div style="width: 15px; height: 15px; border: 2px solid #000; border-radius: 50%; background: ${c.hex};"></div>`).join('')}
                  ${colors.length > 4 ? `<span style="font-size: 11px; font-weight: 700;">+${colors.length - 4}</span>` : ''}
                </div>
              ` : ''}
              <div class="price">¬£${product.price.toFixed(2)}</div>
            </div>
          </div>
        `;
      }).join('');
      
      // Create dots (one per 3 items)
      const totalSlides = Math.ceil(featuredProducts.length / 3);
      const dotsContainer = document.getElementById('carousel-dots');
      dotsContainer.innerHTML = Array.from({ length: totalSlides }, (_, i) => 
        `<div class="carousel-dot ${i === 0 ? 'active' : ''}" onclick="goToSlide(${i})"></div>`
      ).join('');
      
      // Setup navigation
      document.getElementById('carousel-prev').addEventListener('click', prevSlide);
      document.getElementById('carousel-next').addEventListener('click', nextSlide);
      
      // Auto-play
      setInterval(nextSlide, 5000);
    }
    
    function goToSlide(index) {
      const totalSlides = Math.ceil(featuredProducts.length / 3);
      carouselIndex = Math.max(0, Math.min(index, totalSlides - 1));
      
      const track = document.getElementById('carousel-track');
      const offset = -(carouselIndex * 3 * (250 + 24)); // item width + gap
      track.style.transform = `translateX(${offset}px)`;
      
      // Update dots
      document.querySelectorAll('.carousel-dot').forEach((dot, i) => {
        dot.classList.toggle('active', i === carouselIndex);
      });
    }
    
    function prevSlide() {
      const totalSlides = Math.ceil(featuredProducts.length / 3);
      carouselIndex = (carouselIndex - 1 + totalSlides) % totalSlides;
      goToSlide(carouselIndex);
    }
    
    function nextSlide() {
      const totalSlides = Math.ceil(featuredProducts.length / 3);
      carouselIndex = (carouselIndex + 1) % totalSlides;
      goToSlide(carouselIndex);
    }
    
    window.openProductCategory = function(type, categoryId, productId) {
      // Open the category
      selectCategory(type, categoryId);
      
      // Wait a bit then scroll to and highlight the product
      setTimeout(() => {
        const productCard = document.querySelector(`[onclick*="${productId}"]`);
        if (productCard) {
          productCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
          productCard.style.animation = 'pulse 1s';
        }
      }, 300);
    };
    
    window.toggleCategory = function(categoryId) {
      const items = document.getElementById(`${categoryId}-items`);
      const arrow = document.getElementById(`${categoryId}-arrow`);
      items.classList.toggle('active');
      arrow.style.transform = items.classList.contains('active') ? 'rotate(0deg)' : 'rotate(-90deg)';
    };

    window.selectCategory = function(type, categoryId) {
      const filtered = products.filter(p => p.type === type && p.categoryId === categoryId);
      
      document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
      // Find and activate the correct nav item
      const navItems = document.querySelectorAll('.nav-item');
      navItems.forEach(item => {
        if (item.textContent.trim() === filtered[0]?.categoryName) {
          item.classList.add('active');
        }
      });
      
      const gridContainer = document.getElementById('product-grid-container');
      const emptyState = document.getElementById('empty-state');
      
      if (filtered.length === 0) {
        gridContainer.style.display = 'none';
        emptyState.style.display = 'block';
        return;
      }
      
      emptyState.style.display = 'none';
      gridContainer.style.display = 'grid';
      
      gridContainer.innerHTML = filtered.map(product => {
        const images = product.images || [{ url: product.image }];
        const colors = product.colors || [];
        
        return `
          <div class="product-card" onclick="viewProduct('${product.id}')">
            <div class="product-card-images" data-product-id="${product.id}">
              ${images.map((img, idx) => `
                <img src="${img.url}" alt="${product.name}" class="${idx === 0 ? 'active' : ''}" />
              `).join('')}
              ${images.length > 1 ? `
                <div class="product-card-nav">
                  ${images.map((_, idx) => `<div class="product-card-nav-dot ${idx === 0 ? 'active' : ''}" data-index="${idx}"></div>`).join('')}
                </div>
              ` : ''}
            </div>
            <div class="product-card-info">
              <h3>${product.name}</h3>
              ${colors.length > 0 ? `
                <div class="product-card-colors">
                  ${colors.slice(0, 5).map(c => `<div class="product-card-color-dot" style="background: ${c.hex};" title="${c.name}"></div>`).join('')}
                  ${colors.length > 5 ? `<span style="font-size: 12px; font-weight: 700;">+${colors.length - 5}</span>` : ''}
                </div>
              ` : ''}
              <p style="font-size: 12px; color: #666;">${product.sizes.join(', ')}</p>
              <p class="price">¬£${product.price.toFixed(2)}</p>
              ${product.stock > 0 ? `<p style="font-size: 12px; font-weight: 700; color: #00aa00;">In Stock</p>` : '<p style="font-size: 12px; font-weight: 700; color: #ff0000;">Out of Stock</p>'}
            </div>
          </div>
        `;
      }).join('');
      
      // Add image carousel functionality to cards
      setupCardCarousels();
    };

    function setupCardCarousels() {
      document.querySelectorAll('.product-card-images').forEach(cardImages => {
        const dots = cardImages.querySelectorAll('.product-card-nav-dot');
        const images = cardImages.querySelectorAll('img');
        
        dots.forEach((dot, index) => {
          dot.addEventListener('click', (e) => {
            e.stopPropagation();
            images.forEach(img => img.classList.remove('active'));
            dots.forEach(d => d.classList.remove('active'));
            images[index].classList.add('active');
            dot.classList.add('active');
          });
        });
      });
    }

    window.viewProduct = function(productId) {
      currentProduct = products.find(p => p.id === productId);
      if (!currentProduct) return;
      
      selectedColor = null;
      selectedSize = null;
      currentModalImageIndex = 0;
      
      const modal = document.getElementById('product-modal');
      const images = currentProduct.images || [{ url: currentProduct.image }];
      const colors = currentProduct.colors || [];
      
      // Render carousel
      document.getElementById('modal-image-carousel').innerHTML = `
        <img src="${images[0].url}" alt="${currentProduct.name}" id="modal-main-image" />
      `;
      
      if (images.length > 1) {
        document.getElementById('modal-carousel-nav').innerHTML = images.map((img, idx) => `
          <img src="${img.url}" alt="${currentProduct.name}" class="${idx === 0 ? 'active' : ''}" onclick="selectModalImage(${idx})" />
        `).join('');
      } else {
        document.getElementById('modal-carousel-nav').innerHTML = '';
      }
      
      // Render details
      document.getElementById('modal-details').innerHTML = `
        <h2>${currentProduct.name}</h2>
        <p style="color: #666; margin-bottom: 15px;">${currentProduct.categoryName}</p>
        <div class="modal-price">¬£${currentProduct.price.toFixed(2)}</div>
        
        ${colors.length > 0 ? `
          <div style="margin-bottom: 20px;">
            <strong style="display: block; margin-bottom: 10px; font-size: 14px; text-transform: uppercase;">Select Color:</strong>
            <div class="modal-colors">
              ${colors.map((c, idx) => `
                <div class="modal-color-swatch" style="background: ${c.hex};" title="${c.name}" onclick="selectColor(${idx})"></div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        <div style="margin-bottom: 20px;">
          <strong style="display: block; margin-bottom: 10px; font-size: 14px; text-transform: uppercase;">Select Size:</strong>
          <div class="modal-sizes">
            ${currentProduct.sizes.map(size => `
              <button class="modal-size-btn" onclick="selectSize('${size}')" ${currentProduct.sizeStock[size] === 0 ? 'disabled' : ''}>${size}</button>
            `).join('')}
          </div>
        </div>
        
        <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">${currentProduct.description}</p>
        
        <button class="add-to-cart-btn" onclick="addToCart()">Add to Bag</button>
      `;
      
      modal.classList.add('active');
    };

    window.selectModalImage = function(index) {
      currentModalImageIndex = index;
      const images = currentProduct.images || [{ url: currentProduct.image }];
      document.getElementById('modal-main-image').src = images[index].url;
      
      document.querySelectorAll('#modal-carousel-nav img').forEach((img, idx) => {
        img.classList.toggle('active', idx === index);
      });
    };

    window.selectColor = function(index) {
      selectedColor = currentProduct.colors[index];
      document.querySelectorAll('.modal-color-swatch').forEach((swatch, idx) => {
        swatch.classList.toggle('selected', idx === index);
      });
    };

    window.selectSize = function(size) {
      selectedSize = size;
      document.querySelectorAll('.modal-size-btn').forEach(btn => {
        btn.classList.toggle('selected', btn.textContent === size);
      });
    };

    window.addToCart = function() {
      if (!selectedSize) {
        alert('Please select a size');
        return;
      }
      
      const cart = JSON.parse(localStorage.getItem('cart') || '[]');
      cart.push({
        productId: currentProduct.id,
        name: currentProduct.name,
        price: currentProduct.price,
        size: selectedSize,
        color: selectedColor,
        image: currentProduct.images ? currentProduct.images[0].url : currentProduct.image,
        quantity: 1
      });
      
      localStorage.setItem('cart', JSON.stringify(cart));
      updateCartCount();
      closeModal();
      alert('Added to bag!');
    };

    window.closeModal = function() {
      document.getElementById('product-modal').classList.remove('active');
    };

    // Close modal on background click
    document.getElementById('product-modal').addEventListener('click', (e) => {
      if (e.target.id === 'product-modal') {
        closeModal();
      }
    });

    // Cart count
    function updateCartCount() {
      const cart = JSON.parse(localStorage.getItem('cart') || '[]');
      const totalItems = cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
      const cartCount = document.getElementById('cart-count');
      if (totalItems > 0) {
        cartCount.textContent = totalItems.toString();
        cartCount.classList.remove('hidden');
      } else {
        cartCount.classList.add('hidden');
      }
    }
    updateCartCount();
    
    // Initialize carousel on page load
    initFeaturedCarousel();
  </script>
</body>
</html>