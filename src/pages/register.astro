---
// src/pages/register.astro
// FIXED VERSION - Prevents auto-login for unapproved artists
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Artist Registration - Fresh Wax</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
      background: #ffffff;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .register-container {
      max-width: 500px;
      width: 100%;
    }

    .register-logo {
      text-align: center;
      margin-bottom: 30px;
    }

    .register-logo img {
      height: 80px;
      width: auto;
    }

    .register-card {
      background: #fff;
      border: 3px solid #000;
      padding: 40px;
    }

    .register-header {
      margin-bottom: 30px;
    }

    .register-header h1 {
      font-size: 28px;
      font-weight: 900;
      color: #000;
      margin-bottom: 8px;
      text-transform: uppercase;
    }

    .register-header p {
      color: #666;
      font-size: 14px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 700;
      text-transform: uppercase;
      font-size: 12px;
      letter-spacing: 0.5px;
      color: #000;
    }

    .form-input {
      width: 100%;
      padding: 12px;
      border: 3px solid #000;
      font-size: 14px;
      font-weight: 600;
      background: #fff;
    }

    .form-input:focus {
      outline: none;
      box-shadow: 4px 4px 0 #000;
      transform: translate(-2px, -2px);
    }

    .register-btn {
      width: 100%;
      padding: 15px;
      background: #000;
      color: #fff;
      border: 3px solid #000;
      font-weight: 700;
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s;
      font-size: 14px;
      letter-spacing: 0.5px;
    }

    .register-btn:hover:not(:disabled) {
      background: #fff;
      color: #000;
      transform: translate(-4px, -4px);
      box-shadow: 8px 8px 0 #000;
    }

    .register-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .register-footer {
      margin-top: 20px;
      text-align: center;
      font-size: 14px;
    }

    .register-footer a {
      color: #000;
      font-weight: 700;
      text-decoration: none;
      border-bottom: 2px solid #000;
    }

    .register-footer a:hover {
      background: #000;
      color: #fff;
    }

    .error-message {
      background: #fff;
      border: 3px solid #000;
      padding: 15px;
      margin-bottom: 20px;
      font-weight: 700;
      color: #000;
      display: none;
    }

    .error-message.show {
      display: block;
    }

    .success-message {
      background: #fff;
      border: 3px solid #000;
      padding: 30px;
      text-align: center;
      display: none;
    }

    .success-message.show {
      display: block;
    }

    .success-message h2 {
      font-size: 24px;
      font-weight: 900;
      margin-bottom: 15px;
      text-transform: uppercase;
    }

    .success-message p {
      font-size: 14px;
      color: #666;
      line-height: 1.6;
      margin-bottom: 20px;
    }

    .success-btn {
      display: inline-block;
      padding: 12px 24px;
      background: #000;
      color: #fff;
      border: 3px solid #000;
      font-weight: 700;
      text-decoration: none;
      text-transform: uppercase;
      transition: all 0.2s;
    }

    .success-btn:hover {
      background: #fff;
      color: #000;
      transform: translate(-2px, -2px);
      box-shadow: 4px 4px 0 #000;
    }

    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid #fff;
      border-top: 2px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      display: inline-block;
      margin-left: 10px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @media (max-width: 480px) {
      .register-card {
        padding: 30px 20px;
      }
      
      .register-header h1 {
        font-size: 24px;
      }
    }
  </style>
</head>
<body>
  <div class="register-container">
    <div class="register-logo">
      <img src="/logo.webp" alt="Fresh Wax" onerror="this.style.display='none'">
    </div>

    <!-- Registration Form -->
    <div id="registrationForm" class="register-card">
      <div class="register-header">
        <h1>üé§ Artist Registration</h1>
        <p>Join the Fresh Wax family</p>
      </div>

      <div id="errorMessage" class="error-message">
        <span>‚ö†Ô∏è</span>
        <span id="errorText"></span>
      </div>

      <form id="registerForm">
        <div class="form-group">
          <label class="form-label">Artist Name</label>
          <input 
            type="text" 
            id="artistName" 
            class="form-input" 
            placeholder="DJ Cool"
            required
          >
        </div>

        <div class="form-group">
          <label class="form-label">Email Address</label>
          <input 
            type="email" 
            id="email" 
            class="form-input" 
            placeholder="artist@example.com"
            required
          >
        </div>

        <div class="form-group">
          <label class="form-label">Phone Number</label>
          <input 
            type="tel" 
            id="phoneNumber" 
            class="form-input" 
            placeholder="+44 7700 900000"
          >
        </div>

        <div class="form-group">
          <label class="form-label">Password</label>
          <input 
            type="password" 
            id="password" 
            class="form-input" 
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            required
            minlength="6"
          >
        </div>

        <div class="form-group">
          <label class="form-label">Confirm Password</label>
          <input 
            type="password" 
            id="confirmPassword" 
            class="form-input" 
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            required
          >
        </div>

        <button type="submit" class="register-btn" id="registerBtn">
          Register
        </button>
      </form>

      <div class="register-footer">
        Already have an account? <a href="/login">Sign in here</a>
      </div>
    </div>

    <!-- Success Message -->
    <div id="successMessage" class="register-card success-message">
      <h2>‚úÖ Registration Successful!</h2>
      <p>
        Your artist account has been created and is pending approval. 
        Our admin team will review your application shortly.
      </p>
      <p>
        <strong>You will receive an email notification once your account is approved.</strong>
      </p>
      <p>
        Please do not attempt to log in until you receive approval confirmation.
      </p>
      <a href="/login" class="success-btn">Go to Login</a>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
    import { getAuth, createUserWithEmailAndPassword, signOut } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    import { getFirestore, doc, setDoc, serverTimestamp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
      authDomain: "freshwax-store.firebaseapp.com",
      projectId: "freshwax-store",
      storageBucket: "freshwax-store.firebasestorage.app",
      messagingSenderId: "675435782973",
      appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    const registerForm = document.getElementById('registerForm');
    const registerBtn = document.getElementById('registerBtn');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');
    const registrationFormDiv = document.getElementById('registrationForm');
    const successMessageDiv = document.getElementById('successMessage');

    function showError(message) {
      errorText.textContent = message;
      errorMessage.classList.add('show');
    }

    function hideError() {
      errorMessage.classList.remove('show');
    }

    function setLoading(loading) {
      registerBtn.disabled = loading;
      if (loading) {
        registerBtn.innerHTML = 'Creating Account<span class="spinner"></span>';
      } else {
        registerBtn.textContent = 'Register';
      }
    }

    function showSuccess() {
      registrationFormDiv.style.display = 'none';
      successMessageDiv.classList.add('show');
    }

    registerForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideError();
      setLoading(true);

      const artistName = document.getElementById('artistName').value;
      const email = document.getElementById('email').value;
      const phoneNumber = document.getElementById('phoneNumber').value;
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;

      // Validate passwords match
      if (password !== confirmPassword) {
        showError('Passwords do not match');
        setLoading(false);
        return;
      }

      // Validate password length
      if (password.length < 6) {
        showError('Password must be at least 6 characters');
        setLoading(false);
        return;
      }

      try {
        console.log('Creating user account...');
        
        // Create Firebase Auth user
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;

        console.log('User created:', user.uid);

        // Create artist document with approved = false
        const artistData = {
          uid: user.uid,
          artistName: artistName,
          email: email,
          phoneNumber: phoneNumber || '',
          approved: false, // ‚≠ê CRITICAL: Set to false by default
          createdAt: new Date().toISOString(),
          status: 'pending' // Optional: additional status field
        };

        console.log('Creating artist document:', artistData);

        await setDoc(doc(db, 'artists', user.uid), artistData);

        console.log('Artist document created');

        // ‚≠ê CRITICAL: Sign out the user immediately
        // This prevents them from staying logged in
        await signOut(auth);

        console.log('User signed out');

        // Show success message
        showSuccess();

      } catch (error) {
        console.error('Registration error:', error);
        setLoading(false);

        // Handle specific Firebase errors
        if (error.code === 'auth/email-already-in-use') {
          showError('An account with this email already exists');
        } else if (error.code === 'auth/invalid-email') {
          showError('Invalid email address');
        } else if (error.code === 'auth/weak-password') {
          showError('Password is too weak. Use at least 6 characters');
        } else {
          showError('Registration failed. Please try again.');
        }
      }
    });
  </script>
</body>
</html>