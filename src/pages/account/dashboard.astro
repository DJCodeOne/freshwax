---
// src/pages/account/dashboard.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Account - Fresh Wax</title>
</head>
<body>
    <div id="loadingScreen" class="loading-screen">
        <div class="spinner"></div>
    </div>

    <div id="mainContent" style="display: none;">
        <nav class="navbar">
            <div class="nav-container">
                <h1 class="logo">ðŸŽµ Fresh Wax</h1>
                <div class="nav-links">
                    <a href="/">Home</a>
                    <a href="/releases">Releases</a>
                    <button id="logoutBtn" class="logout-btn">Logout</button>
                </div>
            </div>
        </nav>

        <div class="dashboard-container">
            <div class="welcome-section">
                <h2>Welcome back, <span id="userName">User</span>!</h2>
                <p>Track your orders and manage your account</p>
            </div>

            <div class="dashboard-grid">
                <!-- Account Info Card -->
                <div class="card">
                    <h3>ðŸ‘¤ Account Information</h3>
                    <div class="info-group">
                        <label>Email</label>
                        <p id="userEmail">loading...</p>
                    </div>
                    <div class="info-group">
                        <label>Phone</label>
                        <p id="userPhone">Not provided</p>
                    </div>
                    <div class="info-group">
                        <label>Member Since</label>
                        <p id="memberSince">loading...</p>
                    </div>
                    <button class="edit-btn">Edit Profile</button>
                </div>

                <!-- Order Stats Card -->
                <div class="card">
                    <h3>ðŸ“¦ Order Statistics</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <span class="stat-number" id="totalOrders">0</span>
                            <span class="stat-label">Total Orders</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number" id="pendingOrders">0</span>
                            <span class="stat-label">Pending</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number" id="shippedOrders">0</span>
                            <span class="stat-label">Shipped</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number" id="deliveredOrders">0</span>
                            <span class="stat-label">Delivered</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Orders Section -->
            <div class="orders-section">
                <div class="section-header">
                    <h3>ðŸ“‹ Your Orders</h3>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="all">All</button>
                        <button class="filter-btn" data-filter="pending">Pending</button>
                        <button class="filter-btn" data-filter="shipped">Shipped</button>
                        <button class="filter-btn" data-filter="delivered">Delivered</button>
                    </div>
                </div>

                <div id="ordersContainer" class="orders-container">
                    <div class="empty-state">
                        <p>ðŸ“¦ No orders yet</p>
                        <a href="/releases" class="browse-btn">Browse Releases</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Arial', sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
    }

    .loading-screen {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    .navbar {
        background: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem 2rem;
    }

    .nav-container {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .logo {
        font-size: 24px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .nav-links {
        display: flex;
        gap: 1.5rem;
        align-items: center;
    }

    .nav-links a {
        color: #333;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s;
    }

    .nav-links a:hover {
        color: #667eea;
    }

    .logout-btn {
        padding: 8px 16px;
        background: #667eea;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s;
    }

    .logout-btn:hover {
        background: #764ba2;
        transform: translateY(-2px);
    }

    .dashboard-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }

    .welcome-section {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .welcome-section h2 {
        color: #333;
        margin-bottom: 0.5rem;
    }

    .welcome-section p {
        color: #666;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .card h3 {
        margin-bottom: 1.5rem;
        color: #333;
    }

    .info-group {
        margin-bottom: 1rem;
    }

    .info-group label {
        display: block;
        font-size: 0.85rem;
        color: #666;
        margin-bottom: 0.25rem;
        font-weight: 600;
    }

    .info-group p {
        color: #333;
        font-size: 1rem;
    }

    .edit-btn {
        width: 100%;
        padding: 10px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        margin-top: 1rem;
        transition: transform 0.2s;
    }

    .edit-btn:hover {
        transform: translateY(-2px);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
    }

    .stat-item {
        text-align: center;
    }

    .stat-number {
        display: block;
        font-size: 2rem;
        font-weight: bold;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .stat-label {
        display: block;
        font-size: 0.85rem;
        color: #666;
        margin-top: 0.5rem;
    }

    .orders-section {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .section-header h3 {
        color: #333;
    }

    .filter-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .filter-btn {
        padding: 8px 16px;
        border: 2px solid #e0e0e0;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s;
    }

    .filter-btn:hover {
        border-color: #667eea;
        color: #667eea;
    }

    .filter-btn.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-color: transparent;
    }

    .orders-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .order-card {
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 1.5rem;
        transition: all 0.3s;
    }

    .order-card:hover {
        border-color: #667eea;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .order-id {
        font-weight: bold;
        color: #333;
    }

    .order-status {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-shipped {
        background: #d1ecf1;
        color: #0c5460;
    }

    .status-delivered {
        background: #d4edda;
        color: #155724;
    }

    .order-details {
        display: flex;
        gap: 2rem;
        flex-wrap: wrap;
        color: #666;
        font-size: 0.9rem;
    }

    .order-detail {
        display: flex;
        flex-direction: column;
    }

    .order-detail label {
        font-size: 0.75rem;
        color: #999;
        margin-bottom: 0.25rem;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #999;
    }

    .empty-state p {
        font-size: 1.2rem;
        margin-bottom: 1rem;
    }

    .browse-btn {
        display: inline-block;
        padding: 12px 24px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        transition: transform 0.2s;
    }

    .browse-btn:hover {
        transform: translateY(-2px);
    }

    @media (max-width: 768px) {
        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .section-header {
            flex-direction: column;
            align-items: flex-start;
        }
    }
</style>

<script>
    import { initializeApp } from 'firebase/app';
    import { getAuth, onAuthStateChanged, signOut } from 'firebase/auth';
    import { getFirestore, doc, getDoc, collection, query, where, getDocs, orderBy } from 'firebase/firestore';

    // TODO: Replace with your Firebase config
    const firebaseConfig = {
        apiKey: "YOUR_API_KEY",
        authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
        projectId: "YOUR_PROJECT_ID",
        storageBucket: "YOUR_PROJECT_ID.appspot.com",
        messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
        appId: "YOUR_APP_ID"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    let allOrders: any[] = [];
    let currentFilter = 'all';

    // Check authentication
    onAuthStateChanged(auth, async (user) => {
        if (user) {
            await loadUserData(user.uid);
            await loadOrders(user.uid);
            document.getElementById('loadingScreen')!.style.display = 'none';
            document.getElementById('mainContent')!.style.display = 'block';
        } else {
            window.location.href = '/customer/login';
        }
    });

    // Load user data
    async function loadUserData(userId: string) {
        try {
            const userDoc = await getDoc(doc(db, 'customers', userId));
            if (userDoc.exists()) {
                const userData = userDoc.data();
                document.getElementById('userName')!.textContent = userData.fullName || 'User';
                document.getElementById('userEmail')!.textContent = userData.email || '';
                document.getElementById('userPhone')!.textContent = userData.phone || 'Not provided';
                
                const date = new Date(userData.registeredAt);
                document.getElementById('memberSince')!.textContent = date.toLocaleDateString();
            }
        } catch (error) {
            console.error('Error loading user data:', error);
        }
    }

    // Load orders
    async function loadOrders(userId: string) {
        try {
            const ordersQuery = query(
                collection(db, 'orders'),
                where('customerId', '==', userId),
                orderBy('orderDate', 'desc')
            );
            
            const ordersSnapshot = await getDocs(ordersQuery);
            allOrders = ordersSnapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));

            updateStats();
            displayOrders(allOrders);
        } catch (error) {
            console.error('Error loading orders:', error);
            // Show empty state if no orders collection yet
            displayOrders([]);
        }
    }

    // Update statistics
    function updateStats() {
        const total = allOrders.length;
        const pending = allOrders.filter(o => o.status === 'pending').length;
        const shipped = allOrders.filter(o => o.status === 'shipped').length;
        const delivered = allOrders.filter(o => o.status === 'delivered').length;

        document.getElementById('totalOrders')!.textContent = total.toString();
        document.getElementById('pendingOrders')!.textContent = pending.toString();
        document.getElementById('shippedOrders')!.textContent = shipped.toString();
        document.getElementById('deliveredOrders')!.textContent = delivered.toString();
    }

    // Display orders
    function displayOrders(orders: any[]) {
        const container = document.getElementById('ordersContainer')!;
        
        if (orders.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>ðŸ“¦ No orders yet</p>
                    <a href="/releases" class="browse-btn">Browse Releases</a>
                </div>
            `;
            return;
        }

        container.innerHTML = orders.map(order => `
            <div class="order-card">
                <div class="order-header">
                    <span class="order-id">Order #${order.id.slice(0, 8)}</span>
                    <span class="order-status status-${order.status}">${order.status.toUpperCase()}</span>
                </div>
                <div class="order-details">
                    <div class="order-detail">
                        <label>Release</label>
                        <span>${order.releaseName || 'N/A'}</span>
                    </div>
                    <div class="order-detail">
                        <label>Order Date</label>
                        <span>${new Date(order.orderDate).toLocaleDateString()}</span>
                    </div>
                    <div class="order-detail">
                        <label>Total</label>
                        <span>$${order.total?.toFixed(2) || '0.00'}</span>
                    </div>
                    ${order.trackingNumber ? `
                        <div class="order-detail">
                            <label>Tracking</label>
                            <span>${order.trackingNumber}</span>
                        </div>
                    ` : ''}
                </div>
            </div>
        `).join('');
    }

    // Filter buttons
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const target = e.target as HTMLButtonElement;
            const filter = target.dataset.filter!;
            
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            target.classList.add('active');
            
            currentFilter = filter;
            const filtered = filter === 'all' 
                ? allOrders 
                : allOrders.filter(o => o.status === filter);
            
            displayOrders(filtered);
        });
    });

    // Logout
    document.getElementById('logoutBtn')?.addEventListener('click', async () => {
        try {
            await signOut(auth);
            window.location.href = '/';
        } catch (error) {
            console.error('Logout error:', error);
        }
    });
</script>