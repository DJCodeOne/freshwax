---
// src/pages/account/dashboard.astro
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Account - Fresh Wax</title>
</head>
<body>
  <div id="loadingScreen" class="loading-screen">
    <div class="spinner"></div>
    <p>Loading your dashboard...</p>
  </div>

  <div id="mainContent" class="hidden">
    <!-- Header -->
    <header class="header">
      <div class="header-container">
        <div class="header-left">
          <img src="/logo.webp" alt="Fresh Wax" class="logo">
          <h1 class="site-title">Fresh Wax</h1>
        </div>
        <div class="header-right">
          <div class="header-welcome">
            <span class="welcome-text">Hello,</span>
            <span class="customer-name-header" id="customerNameHeader">Customer</span>
          </div>
          <button id="logoutBtnHeader" class="btn-logout-header">Logout</button>
        </div>
      </div>
    </header>

    <!-- Main Dashboard -->
    <main class="dashboard">
      <div class="dashboard-container">
        <!-- Customer Dashboard Banner -->
        <div class="customer-banner">
          <div class="banner-left">
            <h1>Customer Dashboard</h1>
            <p class="banner-subtitle">Manage your orders and track your digital and vinyl collection</p>
          </div>
          <div class="banner-right">
            <div class="banner-meta-item">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span>Member since <span id="memberSinceBanner">2024</span></span>
            </div>
            <div class="status-badge">
              <span class="status-led" id="statusLed"></span>
              <span id="statusText">Connected</span>
            </div>
          </div>
        </div>

        <!-- Stats Overview -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-header">
              <div class="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                </svg>
              </div>
              <div class="stat-info">
                <h3>Total Orders</h3>
              </div>
            </div>
            <div class="stat-number" id="totalOrders">0</div>
            <div class="stat-change">
              <span id="ordersChange">All time</span>
            </div>
          </div>

          <div class="stat-card">
            <div class="stat-header">
              <div class="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div class="stat-info">
                <h3>Pending</h3>
              </div>
            </div>
            <div class="stat-number" id="pendingOrders">0</div>
            <div class="stat-change">
              <span>Processing</span>
            </div>
          </div>

          <div class="stat-card">
            <div class="stat-header">
              <div class="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                </svg>
              </div>
              <div class="stat-info">
                <h3>Shipped</h3>
              </div>
            </div>
            <div class="stat-number" id="shippedOrders">0</div>
            <div class="stat-change">
              <span>In transit</span>
            </div>
          </div>

          <div class="stat-card">
            <div class="stat-header">
              <div class="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div class="stat-info">
                <h3>Delivered</h3>
              </div>
            </div>
            <div class="stat-number" id="deliveredOrders">0</div>
            <div class="stat-change">
              <span>Completed</span>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="actions-row">
          <a href="/releases" class="btn-primary">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <span>Browse Releases</span>
          </a>
          <button id="printOrdersBtn" class="btn-secondary">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
            </svg>
            Print Orders
          </button>
        </div>

        <!-- Orders Management -->
        <div class="section">
          <div class="section-header">
            <h3>Your Orders</h3>
            <div class="filter-tabs">
              <button class="tab-btn active" data-filter="all">All</button>
              <button class="tab-btn" data-filter="pending">Pending</button>
              <button class="tab-btn" data-filter="shipped">Shipped</button>
              <button class="tab-btn" data-filter="delivered">Delivered</button>
            </div>
          </div>
          <div id="ordersContainer" class="orders-grid">
            <div class="empty-state">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
              <p>No orders yet</p>
              <p style="font-size: 0.9rem; margin-top: 0.5rem;">Start building your vinyl collection!</p>
            </div>
          </div>
        </div>

        <!-- Account Profile Info -->
        <div class="section">
          <div class="section-header">
            <h3>Account Details</h3>
          </div>
          <div class="profile-grid">
            <div class="profile-item">
              <span class="profile-label">Account Number</span>
              <span class="profile-value" id="accountNumber">Loading...</span>
            </div>
            <div class="profile-item">
              <span class="profile-label">Full Name</span>
              <span class="profile-value" id="displayCustomerName">Loading...</span>
            </div>
            <div class="profile-item">
              <span class="profile-label">Email</span>
              <span class="profile-value" id="customerEmail">Loading...</span>
            </div>
            <div class="profile-item">
              <span class="profile-label">Phone</span>
              <span class="profile-value" id="customerPhone">Not provided</span>
            </div>
            <div class="profile-item">
              <span class="profile-label">Member Since</span>
              <span class="profile-value" id="memberSince">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</body>
</html>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background: #ffffff;
    color: #000000;
    line-height: 1.6;
  }

  /* Loading Screen */
  .loading-screen {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: #ffffff;
    color: #000000;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-top-color: #000000;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  /* Header */
  .header {
    background: #ffffff;
    color: #000000;
    border-bottom: 3px solid #000000;
    padding: 1.5rem 0;
  }

  .header-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .logo {
    height: 60px;
    width: auto;
  }

  .site-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #000000;
    margin: 0;
  }

  .header-right {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .header-welcome {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .btn-logout-header {
    background: #000000;
    color: #ffffff;
    border: 2px solid #000000;
    padding: 0.5rem 1.25rem;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-logout-header:hover {
    background: #ffffff;
    color: #000000;
  }

  .welcome-text {
    font-size: 1rem;
    color: #666666;
  }

  .customer-name-header {
    font-size: 1rem;
    font-weight: 600;
    color: #000000;
  }

  /* Dashboard */
  .dashboard {
    min-height: calc(100vh - 100px);
    padding: 2rem 0;
    background: #e5e5e5;
  }

  .dashboard-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Customer Banner - Black and White theme */
  .customer-banner {
    background: #f5f5f5;
    color: #000000;
    padding: 2.5rem 3rem;
    margin-bottom: 2rem;
    border: 3px solid #000000;
    box-shadow: 10px 10px 0 #000000;
  }

  .banner-left h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
  }

  .banner-subtitle {
    font-size: 1.1rem;
    color: #666666;
  }

  .banner-right {
    display: flex;
    gap: 2rem;
    align-items: center;
    margin-top: 1.5rem;
  }

  .banner-meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: #000000;
  }

  .banner-meta-item svg {
    width: 18px;
    height: 18px;
  }

  /* Connection Status */
  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: #f5f5f5;
    border: 2px solid #000000;
    font-size: 0.85rem;
  }

  .status-led {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #22c55e;
    box-shadow: 0 0 8px rgba(34, 197, 94, 0.8);
    animation: pulse 2s infinite;
  }

  .status-led.disconnected {
    background: #ef4444;
    box-shadow: 0 0 8px rgba(239, 68, 68, 0.8);
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  /* Stats Grid */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: #f5f5f5;
    border: 3px solid #000000;
    padding: 1.5rem;
    transition: all 0.2s;
  }

  .stat-card:hover {
    box-shadow: 8px 8px 0 #000000;
    transform: translate(-4px, -4px);
  }

  .stat-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .stat-icon {
    width: 50px;
    height: 50px;
    background: #000000;
    color: #ffffff;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .stat-icon svg {
    width: 28px;
    height: 28px;
  }

  .stat-info h3 {
    font-size: 0.85rem;
    font-weight: 600;
    color: #666666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .stat-number {
    font-size: 2.25rem;
    font-weight: 700;
    color: #000000;
    line-height: 1;
  }

  .stat-change {
    font-size: 0.85rem;
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: #666666;
  }

  /* Action Buttons */
  .actions-row {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .btn-primary,
  .btn-secondary {
    padding: 1rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    border: 3px solid #000000;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    flex: 1;
    justify-content: center;
    min-width: 200px;
  }

  .btn-primary {
    background: #000000;
    color: #ffffff;
  }

  .btn-primary:hover {
    background: #ffffff;
    color: #000000;
    box-shadow: 8px 8px 0 #000000;
    transform: translate(-4px, -4px);
  }

  .btn-secondary {
    background: #f5f5f5;
    color: #000000;
  }

  .btn-secondary:hover {
    background: #000000;
    color: #ffffff;
    box-shadow: 8px 8px 0 #000000;
    transform: translate(-4px, -4px);
  }

  .btn-primary svg,
  .btn-secondary svg {
    width: 20px;
    height: 20px;
  }

  /* Section */
  .section {
    margin-bottom: 2rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .section-header h3 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #000000;
  }

  .filter-tabs {
    display: flex;
    gap: 0.5rem;
  }

  .tab-btn {
    padding: 0.5rem 1rem;
    background: #f5f5f5;
    border: 3px solid #000000;
    color: #000000;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .tab-btn.active {
    background: #000000;
    color: #ffffff;
  }

  .tab-btn:hover:not(.active) {
    box-shadow: 4px 4px 0 #000000;
    transform: translate(-2px, -2px);
  }

  /* Orders Grid */
  .orders-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
  }

  .order-card {
    background: #f5f5f5;
    border: 3px solid #000000;
    padding: 1.5rem;
    transition: all 0.2s;
  }

  .order-card:hover {
    box-shadow: 8px 8px 0 #000000;
    transform: translate(-4px, -4px);
  }

  .order-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f0f0f0;
  }

  .order-id {
    font-weight: 700;
    color: #000000;
    font-size: 1.1rem;
  }

  .order-status {
    padding: 0.4rem 0.8rem;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border: 2px solid;
  }

  .order-status.pending {
    background: #fff3cd;
    color: #856404;
    border-color: #ffc107;
  }

  .order-status.shipped {
    background: #d1ecf1;
    color: #0c5460;
    border-color: #17a2b8;
  }

  .order-status.delivered {
    background: #d4edda;
    color: #155724;
    border-color: #28a745;
  }

  .order-details {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .order-detail {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .order-detail label {
    font-size: 0.85rem;
    color: #666666;
    font-weight: 600;
  }

  .order-detail span {
    font-size: 0.95rem;
    color: #000000;
    font-weight: 500;
  }

  .empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 4rem 2rem;
    color: #666666;
    background: #f5f5f5;
    border: 3px solid #000000;
  }

  .empty-state svg {
    width: 64px;
    height: 64px;
    margin-bottom: 1rem;
    stroke: #000000;
  }

  .empty-state p {
    font-size: 1.1rem;
    margin-bottom: 1rem;
  }

  /* Profile Grid */
  .profile-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem 3rem;
    background: #f5f5f5;
    padding: 2rem;
    border: 3px solid #000000;
  }

  .profile-item {
    display: inline-flex;
    align-items: baseline;
    gap: 0.75rem;
  }

  .profile-label {
    font-size: 0.85rem;
    font-weight: 600;
    color: #666666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap;
  }

  .profile-label::after {
    content: ':';
  }

  .profile-value {
    font-size: 1rem;
    font-weight: 600;
    color: #000000;
  }

  /* Responsive */
  .hidden {
    display: none !important;
  }

  /* Print Styles */
  @media print {
    body {
      background: #ffffff;
      padding: 0;
      margin: 0;
    }

    .header {
      border-bottom: 2px solid #000000;
      padding: 1rem 0;
    }

    .loading-screen,
    .btn-logout-header,
    .actions-row,
    .filter-tabs,
    .status-led,
    .status-badge {
      display: none !important;
    }

    .dashboard {
      padding: 0;
      background: #ffffff;
    }

    .dashboard-container {
      max-width: 100%;
      padding: 0 1cm;
    }

    .customer-banner {
      page-break-after: avoid;
      margin-bottom: 1cm;
      padding: 1cm;
      box-shadow: none;
      background: #f5f5f5;
    }

    .banner-left h1 {
      font-size: 2rem;
    }

    .banner-subtitle {
      font-size: 1rem;
    }

    .banner-right {
      gap: 1rem;
      margin-top: 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5cm;
      margin-bottom: 1cm;
      page-break-inside: avoid;
    }

    .stat-card {
      page-break-inside: avoid;
      box-shadow: none;
      background: #f5f5f5;
    }

    .stat-card:hover {
      transform: none;
      box-shadow: none;
    }

    .section {
      page-break-inside: avoid;
      margin-bottom: 1cm;
    }

    .section-header {
      margin-bottom: 0.5cm;
      page-break-after: avoid;
    }

    .section-header h3 {
      font-size: 1.3rem;
    }

    .orders-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 0.5cm;
      page-break-inside: auto;
    }

    .order-card {
      page-break-inside: avoid;
      box-shadow: none;
      background: #f5f5f5;
      margin-bottom: 0.5cm;
    }

    .order-card:hover {
      transform: none;
      box-shadow: none;
    }

    .profile-grid {
      page-break-inside: avoid;
      box-shadow: none;
      background: #f5f5f5;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5cm;
    }

    /* Hide empty states in print */
    .empty-state {
      display: none;
    }

    /* Ensure content doesn't break across pages */
    h1, h2, h3, h4, h5, h6 {
      page-break-after: avoid;
    }

    /* Add page break before account details */
    .section:last-child {
      page-break-before: auto;
    }

    /* Print report title */
    .customer-banner .banner-left h1::before {
      content: 'Customer Account Report - ';
    }
  }

  @media (max-width: 768px) {
    .dashboard-container {
      padding: 0 1rem;
    }

    .header-container {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
      padding: 0 1rem;
    }

    .header-left {
      width: 100%;
      justify-content: center;
      flex-direction: column;
      gap: 0.5rem;
    }

    .header-right {
      width: 100%;
      flex-direction: column;
      gap: 0.75rem;
    }

    .header-welcome {
      justify-content: center;
    }

    .logo {
      height: 50px;
    }

    .site-title {
      font-size: 1.5rem;
    }

    .btn-logout-header {
      width: 100%;
    }

    .customer-banner {
      padding: 1.5rem;
      text-align: center;
    }

    .banner-left h1 {
      font-size: 2rem;
    }

    .banner-right {
      flex-direction: column;
      gap: 1rem;
      width: 100%;
    }

    .stats-grid {
      grid-template-columns: 1fr;
    }

    .actions-row {
      flex-direction: column;
    }

    .btn-primary,
    .btn-secondary {
      width: 100%;
      min-width: auto;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .filter-tabs {
      width: 100%;
      overflow-x: auto;
      flex-wrap: nowrap;
    }

    .tab-btn {
      white-space: nowrap;
    }

    .orders-grid {
      grid-template-columns: 1fr;
    }

    .profile-grid {
      flex-direction: column;
      gap: 1rem;
      padding: 1.5rem;
    }

    .profile-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }

    .profile-label::after {
      content: '';
    }
  }
</style>

<script>
  import { initializeApp } from 'firebase/app';
  import { getAuth, onAuthStateChanged, signOut } from 'firebase/auth';
  import { getFirestore, doc, getDoc, collection, query, where, getDocs, orderBy } from 'firebase/firestore';

  // Firebase config - using environment variables
  const firebaseConfig = {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.PUBLIC_FIREBASE_APP_ID
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);

  let currentUser = null;
  let allOrders = [];
  let currentFilter = 'all';

  // Authentication
  onAuthStateChanged(auth, async (user) => {
    const loadingScreen = document.getElementById('loadingScreen');
    const mainContent = document.getElementById('mainContent');

    if (user) {
      console.log('✅ User authenticated:', user.email);
      currentUser = user;
      try {
        await loadDashboardData(user.uid);
        loadingScreen.classList.add('hidden');
        mainContent.classList.remove('hidden');
        updateConnectionStatus(true);
      } catch (error) {
        console.error('Error loading dashboard:', error);
        alert('Failed to load dashboard: ' + error.message);
        updateConnectionStatus(false);
      }
    } else {
      console.log('❌ No user authenticated');
      window.location.href = '/customer/login';
    }
  });

  // Connection Status
  function updateConnectionStatus(connected) {
    const statusLed = document.getElementById('statusLed');
    const statusText = document.getElementById('statusText');
    if (statusLed && statusText) {
      if (connected) {
        statusLed.classList.remove('disconnected');
        statusText.textContent = 'Connected';
      } else {
        statusLed.classList.add('disconnected');
        statusText.textContent = 'Disconnected';
      }
    }
  }

  // Load Dashboard Data
  async function loadDashboardData(userId) {
    console.log('Loading dashboard for:', userId);
    await Promise.all([
      loadCustomerData(userId),
      loadOrders(userId)
    ]);
    console.log('✅ Dashboard loaded successfully');
  }

  // Load Customer Data
  async function loadCustomerData(userId) {
    try {
      const customerRef = doc(db, 'customers', userId);
      const customerDoc = await getDoc(customerRef);

      if (!customerDoc.exists()) {
        throw new Error('Customer profile not found');
      }

      const customerData = customerDoc.data();
      const customerName = customerData.fullName || 'Customer';

      // Generate account number from userId (first 3 chars + last 5 chars + middle checksum)
      const accountNumber = generateAccountNumber(userId);

      document.getElementById('accountNumber').textContent = accountNumber;
      document.getElementById('customerNameHeader').textContent = customerName;
      document.getElementById('displayCustomerName').textContent = customerName;
      document.getElementById('customerEmail').textContent = customerData.email || 'N/A';
      document.getElementById('customerPhone').textContent = customerData.phone || 'Not provided';

      if (customerData.registeredAt) {
        const date = customerData.registeredAt.toDate ? customerData.registeredAt.toDate() : new Date(customerData.registeredAt);
        document.getElementById('memberSince').textContent = date.toLocaleDateString('en-GB');
        document.getElementById('memberSinceBanner').textContent = date.getFullYear();
      }
    } catch (error) {
      console.error('Error loading customer data:', error);
      throw error;
    }
  }

  // Generate unique account number from Firebase UID
  function generateAccountNumber(userId) {
    // Take parts of the Firebase UID to create a readable account number
    // Format: FW-XXXXX-XXXXX (FW for Fresh Wax)
    const part1 = userId.substring(0, 5).toUpperCase();
    const part2 = userId.substring(userId.length - 5).toUpperCase();
    return `FW-${part1}-${part2}`;
  }

  // Load Orders
  async function loadOrders(userId) {
    try {
      const ordersQuery = query(
        collection(db, 'orders'),
        where('customerId', '==', userId),
        orderBy('createdAt', 'desc')
      );

      const ordersSnapshot = await getDocs(ordersQuery);
      
      if (ordersSnapshot.empty) {
        allOrders = [];
        updateStats();
        displayOrders([]);
        return;
      }

      allOrders = [];
      ordersSnapshot.forEach((doc) => {
        allOrders.push({ id: doc.id, ...doc.data() });
      });

      updateStats();
      displayOrders(allOrders);
    } catch (error) {
      console.error('Error loading orders:', error);
      displayOrders([]);
    }
  }

  // Update Statistics
  function updateStats() {
    const total = allOrders.length;
    const pending = allOrders.filter(o => o.status === 'pending').length;
    const shipped = allOrders.filter(o => o.status === 'shipped').length;
    const delivered = allOrders.filter(o => o.status === 'delivered').length;

    document.getElementById('totalOrders').textContent = total.toLocaleString('en-GB');
    document.getElementById('pendingOrders').textContent = pending.toLocaleString('en-GB');
    document.getElementById('shippedOrders').textContent = shipped.toLocaleString('en-GB');
    document.getElementById('deliveredOrders').textContent = delivered.toLocaleString('en-GB');
  }

  // Display Orders
  function displayOrders(orders) {
    const container = document.getElementById('ordersContainer');
    
    if (orders.length === 0) {
      container.innerHTML = `
        <div class="empty-state">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
          </svg>
          <p>No ${currentFilter === 'all' ? '' : currentFilter} orders</p>
          <p style="font-size: 0.9rem; margin-top: 0.5rem;">Start building your vinyl collection!</p>
        </div>
      `;
      return;
    }

    const ordersHTML = orders.map(order => {
      const title = order.releaseTitle || order.releaseName || 'Unknown Release';
      const status = order.status || 'pending';
      const orderDate = order.createdAt?.toDate ? order.createdAt.toDate().toLocaleDateString('en-GB') : 'N/A';
      const total = order.total || order.amount || 0;
      const format = order.format || 'Digital';
      const trackingNumber = order.trackingNumber || '';

      return `
        <div class="order-card">
          <div class="order-header">
            <span class="order-id">#${order.id.slice(0, 8).toUpperCase()}</span>
            <span class="order-status ${status}">${status.toUpperCase()}</span>
          </div>
          <div class="order-details">
            <div class="order-detail">
              <label>Release</label>
              <span>${title}</span>
            </div>
            <div class="order-detail">
              <label>Format</label>
              <span>${format}</span>
            </div>
            <div class="order-detail">
              <label>Order Date</label>
              <span>${orderDate}</span>
            </div>
            <div class="order-detail">
              <label>Total</label>
              <span>£${total.toFixed(2)}</span>
            </div>
            ${trackingNumber ? `
              <div class="order-detail">
                <label>Tracking</label>
                <span>${trackingNumber}</span>
              </div>
            ` : ''}
          </div>
        </div>
      `;
    }).join('');

    container.innerHTML = ordersHTML;
  }

  // Filter Tabs
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      
      currentFilter = btn.dataset.filter;
      const filtered = currentFilter === 'all' 
        ? allOrders 
        : allOrders.filter(o => o.status === currentFilter);
      
      displayOrders(filtered);
    });
  });

  // Logout Button
  document.getElementById('logoutBtnHeader')?.addEventListener('click', async () => {
    try {
      await signOut(auth);
      window.location.href = '/';
    } catch (error) {
      console.error('Logout error:', error);
      alert('Failed to logout');
    }
  });

  // Print Orders Button
  document.getElementById('printOrdersBtn')?.addEventListener('click', () => {
    window.print();
  });
</script>