---
// src/pages/upload-mix.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upload DJ Mix - Freshwax</title>
  <meta name="description" content="Upload your DJ mix to Freshwax">
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
</head>
<body class="min-h-screen bg-gray-50">
  <!-- Simple Header -->
  <header class="bg-white border-b border-gray-200 shadow-sm">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
      <div class="flex items-center justify-between">
        <a href="/" class="flex items-center">
          <img src="/logo.webp" alt="Freshwax" style="height: 50px;" />
        </a>
        <a 
          href="/dj-mixes" 
          class="text-gray-600 hover:text-gray-900 transition-colors flex items-center gap-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Mixes
        </a>
      </div>
    </div>
  </header>

  <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="bg-white rounded-lg shadow-md p-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Upload Your DJ Mix</h1>
      <p class="text-gray-600 mb-8">Share your mix with the community instantly!</p>

      <form id="upload-form" class="space-y-8">
        <!-- DJ Name -->
        <div>
          <label for="dj-name" class="block text-sm font-medium text-gray-700 mb-2">
            DJ Name *
          </label>
          <input
            type="text"
            id="dj-name"
            name="djName"
            required
            placeholder="Enter your DJ name"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <!-- Mix Title -->
        <div>
          <label for="mix-title" class="block text-sm font-medium text-gray-700 mb-2">
            Mix Title *
          </label>
          <input
            type="text"
            id="mix-title"
            name="mixTitle"
            required
            placeholder="Enter mix title"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <!-- Mix Description (Optional) -->
        <div>
          <label for="mix-description" class="block text-sm font-medium text-gray-700 mb-2">
            Description (Optional)
          </label>
          <textarea
            id="mix-description"
            name="mixDescription"
            rows="3"
            placeholder="Tell us about your mix..."
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          ></textarea>
        </div>

        <!-- Audio File Upload -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Audio File (MP3 or WAV) *
          </label>
          <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-500 transition-colors cursor-pointer" id="audio-drop-zone">
            <input
              type="file"
              id="audio-file"
              accept=".mp3,.wav"
              class="hidden"
              required
            />
            <svg class="w-12 h-12 mx-auto text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            <p class="text-sm text-gray-600 mb-1">
              <span class="text-blue-600 font-medium">Click to upload</span> or drag and drop
            </p>
            <p class="text-xs text-gray-500">MP3 or WAV (Max 500MB)</p>
          </div>
          <div id="audio-preview" class="mt-4 hidden">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <svg class="w-8 h-8 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z"/>
                  </svg>
                  <div>
                    <p id="audio-file-name" class="text-sm font-medium text-gray-900"></p>
                    <p id="audio-file-size" class="text-xs text-gray-500"></p>
                  </div>
                </div>
                <button type="button" id="remove-audio" class="text-red-600 hover:text-red-800">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Artwork Upload -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Artwork (JPG or PNG) - Optional
          </label>
          <p class="text-xs text-gray-500 mb-3">If not provided, we'll use the Freshwax logo as placeholder</p>
          <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-500 transition-colors cursor-pointer" id="artwork-drop-zone">
            <input
              type="file"
              id="artwork-file"
              accept=".jpg,.jpeg,.png"
              class="hidden"
            />
            <svg class="w-12 h-12 mx-auto text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <p class="text-sm text-gray-600 mb-1">
              <span class="text-blue-600 font-medium">Click to upload</span> or drag and drop
            </p>
            <p class="text-xs text-gray-500">JPG or PNG (Square format recommended, Max 10MB)</p>
          </div>
          <div id="artwork-preview" class="mt-4 hidden">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center justify-between gap-4">
                <img id="artwork-preview-img" src="" alt="Artwork preview" class="w-24 h-24 object-cover rounded-lg" />
                <div class="flex-1">
                  <p id="artwork-file-name" class="text-sm font-medium text-gray-900"></p>
                  <p id="artwork-file-size" class="text-xs text-gray-500"></p>
                </div>
                <button type="button" id="remove-artwork" class="text-red-600 hover:text-red-800">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Upload Progress -->
        <div id="upload-progress" class="hidden">
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <!-- Current Step Indicator -->
            <div class="mb-4">
              <div class="flex items-center justify-between mb-2">
                <span id="current-step" class="text-sm font-medium text-gray-900">Preparing upload...</span>
                <span id="progress-percentage" class="text-sm font-medium text-blue-600">0%</span>
              </div>
              <div class="w-full bg-blue-200 rounded-full h-3 overflow-hidden">
                <div id="progress-bar" class="bg-blue-600 h-3 rounded-full transition-all duration-500 ease-out" style="width: 0%"></div>
              </div>
            </div>

            <!-- Processing Steps -->
            <div class="space-y-2 text-xs">
              <div id="step-preparing" class="flex items-center gap-2 text-gray-500">
                <svg class="w-4 h-4 animate-spin hidden spinner" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <svg class="w-4 h-4 hidden checkmark" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                </svg>
                <span class="step-text">Preparing files...</span>
              </div>

              <div id="step-uploading-audio" class="flex items-center gap-2 text-gray-400">
                <svg class="w-4 h-4 animate-spin hidden spinner" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <svg class="w-4 h-4 hidden checkmark" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                </svg>
                <span class="step-text">Uploading audio...</span>
              </div>

              <div id="step-uploading-artwork" class="flex items-center gap-2 text-gray-400">
                <svg class="w-4 h-4 animate-spin hidden spinner" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <svg class="w-4 h-4 hidden checkmark" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                </svg>
                <span class="step-text">Uploading artwork...</span>
              </div>

              <div id="step-finalizing" class="flex items-center gap-2 text-gray-400">
                <svg class="w-4 h-4 animate-spin hidden spinner" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <svg class="w-4 h-4 hidden checkmark" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                </svg>
                <span class="step-text">Publishing...</span>
              </div>
            </div>

            <p class="text-xs text-gray-600 mt-4 text-center">Please don't close this page while uploading...</p>
          </div>
        </div>

        <!-- Success Message -->
        <div id="success-message" class="hidden bg-green-50 border border-green-200 rounded-lg p-4">
          <div class="flex items-start gap-3">
            <svg class="w-6 h-6 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <h3 class="text-sm font-medium text-green-900">Upload Successful!</h3>
              <p class="text-sm text-green-700 mt-1">Your mix has been published and is now live! Redirecting you to the mixes page...</p>
            </div>
          </div>
        </div>

        <!-- Error Message -->
        <div id="error-message" class="hidden bg-red-50 border border-red-200 rounded-lg p-4">
          <div class="flex items-start gap-3">
            <svg class="w-6 h-6 text-red-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <h3 class="text-sm font-medium text-red-900">Upload Failed</h3>
              <p id="error-text" class="text-sm text-red-700 mt-1"></p>
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="flex items-center gap-4">
          <button
            type="submit"
            id="submit-btn"
            class="flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-md hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Upload & Publish Mix
          </button>
          <a
            href="/dj-mixes"
            class="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium"
          >
            Cancel
          </a>
        </div>
      </form>
    </div>
  </main>

  <script>
    // File upload handling
    const audioInput = document.getElementById('audio-file') as HTMLInputElement;
    const audioDropZone = document.getElementById('audio-drop-zone') as HTMLDivElement;
    const audioPreview = document.getElementById('audio-preview') as HTMLDivElement;
    const removeAudioBtn = document.getElementById('remove-audio') as HTMLButtonElement;

    const artworkInput = document.getElementById('artwork-file') as HTMLInputElement;
    const artworkDropZone = document.getElementById('artwork-drop-zone') as HTMLDivElement;
    const artworkPreview = document.getElementById('artwork-preview') as HTMLDivElement;
    const artworkPreviewImg = document.getElementById('artwork-preview-img') as HTMLImageElement;
    const removeArtworkBtn = document.getElementById('remove-artwork') as HTMLButtonElement;

    const uploadForm = document.getElementById('upload-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const uploadProgress = document.getElementById('upload-progress') as HTMLDivElement;
    const progressBar = document.getElementById('progress-bar') as HTMLDivElement;
    const progressPercentage = document.getElementById('progress-percentage') as HTMLSpanElement;
    const currentStep = document.getElementById('current-step') as HTMLSpanElement;
    const successMessage = document.getElementById('success-message') as HTMLDivElement;
    const errorMessage = document.getElementById('error-message') as HTMLDivElement;
    const errorText = document.getElementById('error-text') as HTMLParagraphElement;

    let audioFile: File | null = null;
    let artworkFile: File | null = null;

    // Audio file handling
    audioDropZone.addEventListener('click', () => audioInput.click());
    
    audioDropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      audioDropZone.classList.add('border-blue-500', 'bg-blue-50');
    });

    audioDropZone.addEventListener('dragleave', () => {
      audioDropZone.classList.remove('border-blue-500', 'bg-blue-50');
    });

    audioDropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      audioDropZone.classList.remove('border-blue-500', 'bg-blue-50');
      const files = e.dataTransfer?.files;
      if (files && files.length > 0) {
        handleAudioFile(files[0]);
      }
    });

    audioInput.addEventListener('change', (e) => {
      const files = (e.target as HTMLInputElement).files;
      if (files && files.length > 0) {
        handleAudioFile(files[0]);
      }
    });

    removeAudioBtn.addEventListener('click', () => {
      audioFile = null;
      audioInput.value = '';
      audioPreview.classList.add('hidden');
      audioDropZone.classList.remove('hidden');
    });

    function handleAudioFile(file: File) {
      const validTypes = ['audio/mpeg', 'audio/wav'];
      const maxSize = 500 * 1024 * 1024; // 500MB

      if (!validTypes.includes(file.type)) {
        alert('Please upload a valid MP3 or WAV file');
        return;
      }

      if (file.size > maxSize) {
        alert('File size must be less than 500MB');
        return;
      }

      audioFile = file;
      document.getElementById('audio-file-name')!.textContent = file.name;
      document.getElementById('audio-file-size')!.textContent = formatFileSize(file.size);
      audioPreview.classList.remove('hidden');
      audioDropZone.classList.add('hidden');
    }

    // Artwork file handling
    artworkDropZone.addEventListener('click', () => artworkInput.click());
    
    artworkDropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      artworkDropZone.classList.add('border-blue-500', 'bg-blue-50');
    });

    artworkDropZone.addEventListener('dragleave', () => {
      artworkDropZone.classList.remove('border-blue-500', 'bg-blue-50');
    });

    artworkDropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      artworkDropZone.classList.remove('border-blue-500', 'bg-blue-50');
      const files = e.dataTransfer?.files;
      if (files && files.length > 0) {
        handleArtworkFile(files[0]);
      }
    });

    artworkInput.addEventListener('change', (e) => {
      const files = (e.target as HTMLInputElement).files;
      if (files && files.length > 0) {
        handleArtworkFile(files[0]);
      }
    });

    removeArtworkBtn.addEventListener('click', () => {
      artworkFile = null;
      artworkInput.value = '';
      artworkPreview.classList.add('hidden');
      artworkDropZone.classList.remove('hidden');
    });

    function handleArtworkFile(file: File) {
      const validTypes = ['image/jpeg', 'image/png'];
      const maxSize = 10 * 1024 * 1024; // 10MB

      if (!validTypes.includes(file.type)) {
        alert('Please upload a valid JPG or PNG file');
        return;
      }

      if (file.size > maxSize) {
        alert('File size must be less than 10MB');
        return;
      }

      artworkFile = file;
      
      // Preview the image
      const reader = new FileReader();
      reader.onload = (e) => {
        artworkPreviewImg.src = e.target?.result as string;
      };
      reader.readAsDataURL(file);

      document.getElementById('artwork-file-name')!.textContent = file.name;
      document.getElementById('artwork-file-size')!.textContent = formatFileSize(file.size);
      artworkPreview.classList.remove('hidden');
      artworkDropZone.classList.remove('hidden');
    }

    // Form submission
    uploadForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Hide previous messages
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');

      if (!audioFile) {
        errorText.textContent = 'Please upload an audio file.';
        errorMessage.classList.remove('hidden');
        return;
      }

      const djName = (document.getElementById('dj-name') as HTMLInputElement).value;
      const mixTitle = (document.getElementById('mix-title') as HTMLInputElement).value;
      const mixDescription = (document.getElementById('mix-description') as HTMLTextAreaElement).value;

      // Show progress
      uploadProgress.classList.remove('hidden');
      submitBtn.disabled = true;

      // Helper function to update progress steps
      const updateStep = (stepId: string, status: 'active' | 'complete' | 'pending') => {
        const stepEl = document.getElementById(stepId);
        if (!stepEl) return;

        const spinner = stepEl.querySelector('.spinner');
        const checkmark = stepEl.querySelector('.checkmark');

        if (status === 'active') {
          stepEl.classList.remove('text-gray-400', 'text-gray-500');
          stepEl.classList.add('text-blue-600');
          spinner?.classList.remove('hidden');
          checkmark?.classList.add('hidden');
        } else if (status === 'complete') {
          stepEl.classList.remove('text-gray-400', 'text-blue-600');
          stepEl.classList.add('text-green-600');
          spinner?.classList.add('hidden');
          checkmark?.classList.remove('hidden');
        } else {
          stepEl.classList.remove('text-blue-600', 'text-green-600');
          stepEl.classList.add('text-gray-400');
          spinner?.classList.add('hidden');
          checkmark?.classList.add('hidden');
        }
      };

      const updateProgress = (percentage: number, message: string) => {
        progressBar.style.width = `${percentage}%`;
        progressPercentage.textContent = `${Math.round(percentage)}%`;
        currentStep.textContent = message;
      };

      try {
        // Step 1: Preparing (0-10%)
        updateStep('step-preparing', 'active');
        updateProgress(5, 'Preparing files...');
        
        await new Promise(resolve => setTimeout(resolve, 500));
        
        updateStep('step-preparing', 'complete');
        updateProgress(10, 'Files prepared');

        // Step 2: Upload to server with real progress tracking
        updateStep('step-uploading-audio', 'active');
        updateProgress(15, 'Uploading audio...');

        const formData = new FormData();
        formData.append('audioFile', audioFile);
        if (artworkFile) {
          formData.append('artworkFile', artworkFile);
        }
        formData.append('djName', djName);
        formData.append('mixTitle', mixTitle);
        formData.append('mixDescription', mixDescription);

        // Create XMLHttpRequest for upload progress tracking
        const xhr = new XMLHttpRequest();
        
        const uploadPromise = new Promise<any>((resolve, reject) => {
          xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
              // Map upload progress to 15-75%
              const uploadPercentage = (e.loaded / e.total) * 100;
              const mappedProgress = 15 + (uploadPercentage * 0.6);
              updateProgress(mappedProgress, `Uploading... ${Math.round(uploadPercentage)}%`);
            }
          });

          xhr.addEventListener('load', () => {
            if (xhr.status >= 200 && xhr.status < 300) {
              try {
                const response = JSON.parse(xhr.responseText);
                resolve(response);
              } catch (e) {
                reject(new Error('Invalid response from server'));
              }
            } else {
              try {
                const errorData = JSON.parse(xhr.responseText);
                reject(new Error(errorData.error || 'Upload failed'));
              } catch (e) {
                reject(new Error(`Upload failed with status ${xhr.status}`));
              }
            }
          });

          xhr.addEventListener('error', () => {
            reject(new Error('Network error occurred'));
          });

          xhr.addEventListener('abort', () => {
            reject(new Error('Upload cancelled'));
          });

          xhr.open('POST', '/api/upload-mix');
          xhr.send(formData);
        });

        const result = await uploadPromise;

        updateStep('step-uploading-audio', 'complete');
        updateProgress(75, 'Audio uploaded successfully');

        // Step 3: Artwork (75-85%)
        updateStep('step-uploading-artwork', 'active');
        updateProgress(80, artworkFile ? 'Artwork uploaded successfully' : 'Using logo placeholder');
        await new Promise(resolve => setTimeout(resolve, 500));
        updateStep('step-uploading-artwork', 'complete');
        updateProgress(85, 'All files uploaded');

        // Step 4: Finalizing (85-100%)
        updateStep('step-finalizing', 'active');
        updateProgress(92, 'Publishing your mix...');
        await new Promise(resolve => setTimeout(resolve, 800));
        
        updateStep('step-finalizing', 'complete');
        updateProgress(100, 'Complete!');

        setTimeout(() => {
          uploadProgress.classList.add('hidden');
          successMessage.classList.remove('hidden');
          
          // Redirect to mixes page after 2 seconds
          setTimeout(() => {
            window.location.href = '/dj-mixes';
          }, 2000);
        }, 500);

      } catch (error) {
        console.error('Upload error:', error);
        uploadProgress.classList.add('hidden');
        errorText.textContent = error instanceof Error ? error.message : 'An error occurred during upload. Please try again.';
        errorMessage.classList.remove('hidden');
        submitBtn.disabled = false;
        
        // Reset all steps
        ['step-preparing', 'step-uploading-audio', 'step-uploading-artwork', 'step-finalizing'].forEach(id => {
          updateStep(id, 'pending');
        });
      }
    });

    function formatFileSize(bytes: number): string {
      if (bytes < 1024) return bytes + ' B';
      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';
      return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
    }
  </script>

  <style>
    /* Ensure proper styling for drop zones */
    #audio-drop-zone:hover,
    #artwork-drop-zone:hover {
      background-color: #EFF6FF;
    }

    /* Progress step styling */
    .checkmark {
      color: #10B981;
    }

    .spinner {
      color: #3B82F6;
    }

    /* Smooth progress bar animation */
    #progress-bar {
      transition: width 0.5s ease-out;
    }

    /* Step text animation */
    .step-text {
      transition: all 0.3s ease;
    }
  </style>
</body>
</html>