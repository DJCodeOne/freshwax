---
// src/pages/upload-mix.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Upload Mix - Fresh Wax">
  <style>
    body {
      background: #ffffff;
      color: #000;
    }
    .container-grey {
      background: #f5f5f5;
      border: 1px solid #e0e0e0;
    }
    .upload-zone {
      border: 2px dashed #ccc;
      background: #fafafa;
      transition: all 0.3s;
    }
    .upload-zone.dragover {
      border-color: #000;
      background: #f0f0f0;
    }
    .btn-primary {
      background: #000;
      color: #fff;
    }
    .btn-primary:hover {
      background: #333;
    }
    .btn-secondary {
      background: #f5f5f5;
      color: #000;
      border: 1px solid #e0e0e0;
    }
    .btn-secondary:hover {
      background: #e0e0e0;
    }
  </style>

  <div class="min-h-screen p-8">
    <!-- Header -->
    <div class="max-w-4xl mx-auto mb-12">
      <div class="flex justify-between items-center border-b border-gray-300 pb-6">
        <div class="flex items-center gap-6">
          <img 
            src="/logo.webp" 
            alt="Fresh Wax Logo" 
            class="h-16 w-auto"
            onerror="this.style.display='none'"
          />
          <div>
            <h1 class="text-4xl font-bold tracking-tight mb-2 text-black">Upload DJ Mix</h1>
            <p class="text-gray-600">Share your mix with the Fresh Wax community</p>
          </div>
        </div>
      </div>
    </div>

    <div class="max-w-4xl mx-auto">
      <!-- Back Button -->
      <a href="/dj-mixes" class="inline-block mb-6 text-gray-600 hover:text-black transition">
        ← Back to Mixes
      </a>

      <!-- User Info -->
      <div class="mb-6 p-4 bg-gray-100 border border-gray-300 rounded">
        <div id="user-info" class="text-sm text-gray-600">Loading...</div>
      </div>

      <!-- Upload Form -->
      <div class="container-grey rounded-lg p-8">
        <form id="upload-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-bold text-gray-700 mb-2">DJ Name *</label>
              <input 
                type="text" 
                id="dj-name" 
                required
                class="w-full bg-white border border-gray-300 rounded px-4 py-3 focus:outline-none focus:border-black text-black"
                placeholder="Your DJ name"
              />
            </div>

            <div>
              <label class="block text-sm font-bold text-gray-700 mb-2">Mix Title *</label>
              <input 
                type="text" 
                id="mix-title" 
                required
                class="w-full bg-white border border-gray-300 rounded px-4 py-3 focus:outline-none focus:border-black text-black"
                placeholder="Name of your mix"
              />
            </div>

            <div>
              <label class="block text-sm font-bold text-gray-700 mb-2">Mix Number</label>
              <input 
                type="number" 
                id="mix-number" 
                placeholder="e.g., 1"
                class="w-full bg-white border border-gray-300 rounded px-4 py-3 focus:outline-none focus:border-black text-black"
              />
            </div>

            <div>
              <label class="block text-sm font-bold text-gray-700 mb-2">Genre/Style</label>
              <input 
                type="text" 
                id="genre" 
                placeholder="e.g., Jungle, DnB"
                class="w-full bg-white border border-gray-300 rounded px-4 py-3 focus:outline-none focus:border-black text-black"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-bold text-gray-700 mb-2">Artwork (JPG or PNG only)</label>
            <div class="upload-zone rounded-lg p-8 text-center cursor-pointer" id="artwork-zone">
              <input type="file" id="artwork-file" accept="image/jpeg,image/jpg,image/png" class="hidden" />
              <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <p class="text-gray-600 font-medium mb-1">Click or drag artwork here</p>
              <p class="text-xs text-gray-500">JPG or PNG only</p>
            </div>
            <div id="artwork-preview" class="mt-4"></div>
          </div>

          <div>
            <label class="block text-sm font-bold text-gray-700 mb-2">Audio Mix File * (MP3 or WAV only)</label>
            <div class="upload-zone rounded-lg p-8 text-center cursor-pointer" id="audio-zone">
              <input type="file" id="audio-file" accept="audio/mpeg,audio/mp3,audio/wav" class="hidden" required />
              <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
              </svg>
              <p class="text-gray-600 font-medium mb-1">Click or drag mix here</p>
              <p class="text-xs text-gray-500">MP3 or WAV only</p>
            </div>
            
            <!-- File List -->
            <div id="audio-file-list" class="mt-4 hidden">
              <div class="bg-white border border-gray-300 rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <span class="text-sm font-bold text-black">Selected File</span>
                  <button type="button" onclick="clearAllFiles()" class="text-xs text-red-600 hover:text-red-800 font-medium">
                    Clear
                  </button>
                </div>
                <div id="file-items" class="space-y-2">
                  <!-- File items will be added here -->
                </div>
              </div>
            </div>
          </div>

          <div class="flex gap-4 pt-4">
            <button 
              type="submit" 
              id="upload-btn"
              class="flex-grow btn-primary py-4 rounded-lg font-bold text-lg transition"
            >
              Upload Mix to Google Drive
            </button>
            <a 
              href="/dj-mixes"
              class="px-8 btn-secondary py-4 rounded-lg font-bold transition inline-flex items-center"
            >
              Cancel
            </a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Google Drive API -->
  <script src="https://apis.google.com/js/api.js"></script>
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  
  <!-- Firebase & Upload Script -->
  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
    import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    import { getFirestore, collection, addDoc, serverTimestamp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
      authDomain: "freshwax-store.firebaseapp.com",
      projectId: "freshwax-store",
      storageBucket: "freshwax-store.firebasestorage.app",
      messagingSenderId: "675435782973",
      appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    let currentUser = null;
    let gapiInited = false;
    let gapiAccessToken = null;
    let selectedAudioFiles = [];
    
    // Google Drive API configuration
    const GOOGLE_API_KEY = import.meta.env.PUBLIC_GOOGLE_API_KEY;
    const GOOGLE_CLIENT_ID = import.meta.env.PUBLIC_GOOGLE_CLIENT_ID;
    const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';
    const SCOPES = 'https://www.googleapis.com/auth/drive.file';

    // Auth check
    onAuthStateChanged(auth, (user) => {
      if (user) {
        currentUser = user;
        document.getElementById('user-info').innerHTML = `
          <div class="flex justify-between items-center">
            <span class="text-black font-medium">Logged in as: ${user.email}</span>
            <button onclick="authorizeGoogleDrive()" id="gdrive-auth-btn" class="ml-4 text-xs btn-primary px-4 py-2 rounded font-bold">
              Connect Google Drive
            </button>
          </div>
        `;
        gapiLoad();
      } else {
        window.location.href = '/login';
      }
    });

    // Initialize Google Drive API
    function gapiLoad() {
      gapi.load('client', initializeGapiClient);
    }

    async function initializeGapiClient() {
      try {
        await gapi.client.init({
          apiKey: GOOGLE_API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        console.log('Google Drive API initialized');
      } catch (error) {
        console.error('Error initializing Google API:', error);
      }
    }

    // Authorize Google Drive
    window.authorizeGoogleDrive = function() {
      const tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: GOOGLE_CLIENT_ID,
        scope: SCOPES,
        callback: (response) => {
          if (response.error !== undefined) {
            throw response;
          }
          gapiAccessToken = response.access_token;
          document.getElementById('gdrive-auth-btn').textContent = '✓ Drive Connected';
          document.getElementById('gdrive-auth-btn').disabled = true;
          document.getElementById('gdrive-auth-btn').classList.add('opacity-50');
          console.log('Google Drive authorized');
        },
      });

      if (gapi.client.getToken() === null) {
        tokenClient.requestAccessToken({ prompt: 'consent' });
      } else {
        tokenClient.requestAccessToken({ prompt: '' });
      }
    };

    // Upload file to Google Drive
    async function uploadToGoogleDrive(file, fileName) {
      if (!gapiAccessToken) {
        throw new Error('Please connect Google Drive first');
      }

      const metadata = {
        name: fileName,
        mimeType: file.type,
        parents: ['root']
      };

      const form = new FormData();
      form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
      form.append('file', file);

      const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,name,webContentLink,webViewLink', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${gapiAccessToken}`
        },
        body: form
      });

      if (!response.ok) {
        throw new Error('Upload to Google Drive failed');
      }

      const result = await response.json();
      
      // Make file publicly accessible
      await fetch(`https://www.googleapis.com/drive/v3/files/${result.id}/permissions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${gapiAccessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          role: 'reader',
          type: 'anyone'
        })
      });

      return {
        id: result.id,
        name: result.name,
        downloadUrl: `https://drive.google.com/uc?export=download&id=${result.id}`,
        streamUrl: `https://drive.google.com/uc?export=view&id=${result.id}`,
        viewUrl: result.webViewLink
      };
    }

    // File upload zone handlers
    const artworkZone = document.getElementById('artwork-zone');
    const artworkFile = document.getElementById('artwork-file');
    const audioZone = document.getElementById('audio-zone');
    const audioFile = document.getElementById('audio-file');

    artworkZone.addEventListener('click', () => artworkFile.click());
    audioZone.addEventListener('click', () => audioFile.click());

    // Drag and drop
    [artworkZone, audioZone].forEach(zone => {
      zone.addEventListener('dragover', (e) => {
        e.preventDefault();
        zone.classList.add('dragover');
      });

      zone.addEventListener('dragleave', () => {
        zone.classList.remove('dragover');
      });

      zone.addEventListener('drop', (e) => {
        e.preventDefault();
        zone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          if (zone === artworkZone) {
            if (files[0].type.match('image/(jpeg|jpg|png)')) {
              artworkFile.files = files;
              previewArtwork(files[0]);
            } else {
              alert('Please select only JPG or PNG files for artwork');
            }
          } else if (zone === audioZone) {
            if (files[0].type.match('audio/(mpeg|mp3|wav)')) {
              selectedAudioFiles = [files[0]];
              const dt = new DataTransfer();
              dt.items.add(files[0]);
              audioFile.files = dt.files;
              updateFileList();
            } else {
              alert('Please select only MP3 or WAV files');
            }
          }
        }
      });
    });

    artworkFile.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        const file = e.target.files[0];
        if (!file.type.match('image/(jpeg|jpg|png)')) {
          alert('Please select only JPG or PNG files');
          e.target.value = '';
          return;
        }
        previewArtwork(file);
      }
    });

    audioFile.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        const file = e.target.files[0];
        if (!file.type.match('audio/(mpeg|mp3|wav)')) {
          alert('Please select only MP3 or WAV files');
          e.target.value = '';
          return;
        }
        selectedAudioFiles = [file];
        updateFileList();
      }
    });

    function previewArtwork(file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        document.getElementById('artwork-preview').innerHTML = `
          <div class="relative inline-block">
            <img src="${e.target.result}" class="w-32 h-32 object-cover rounded border border-gray-300" />
            <button type="button" onclick="clearArtwork()" class="absolute -top-2 -right-2 bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-700">×</button>
          </div>
        `;
      };
      reader.readAsDataURL(file);
    }

    window.clearArtwork = function() {
      artworkFile.value = '';
      document.getElementById('artwork-preview').innerHTML = '';
    };

    function updateFileList() {
      const fileList = document.getElementById('audio-file-list');
      const fileItems = document.getElementById('file-items');
      
      if (selectedAudioFiles.length === 0) {
        fileList.classList.add('hidden');
        return;
      }
      
      fileList.classList.remove('hidden');
      fileItems.innerHTML = selectedAudioFiles.map((file, index) => `
        <div class="flex items-center justify-between py-3 px-4 bg-gray-50 rounded border border-gray-200">
          <div class="flex items-center gap-3 flex-grow min-w-0">
            <svg class="w-6 h-6 text-gray-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
            </svg>
            <div class="min-w-0 flex-grow">
              <p class="text-sm font-bold text-black truncate">${file.name}</p>
              <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
            </div>
          </div>
          <button 
            type="button"
            onclick="removeFile(${index})" 
            class="ml-3 text-red-600 hover:text-red-800 flex-shrink-0"
            title="Remove file"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `).join('');
    }

    window.clearAllFiles = function() {
      selectedAudioFiles = [];
      audioFile.value = '';
      updateFileList();
    };

    window.removeFile = function(index) {
      selectedAudioFiles.splice(index, 1);
      updateFileList();
    };

    // Form submission
    document.getElementById('upload-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!gapiAccessToken) {
        alert('Please connect Google Drive first using the button above');
        return;
      }

      if (selectedAudioFiles.length === 0) {
        alert('Please select an audio file');
        return;
      }

      const btn = document.getElementById('upload-btn');
      btn.disabled = true;
      btn.textContent = 'Uploading to Google Drive...';

      try {
        const djName = document.getElementById('dj-name').value;
        const mixTitle = document.getElementById('mix-title').value;
        const mixNumber = document.getElementById('mix-number').value;
        const genre = document.getElementById('genre').value;
        
        // Upload artwork to Google Drive if provided
        let artworkData = null;
        if (artworkFile.files.length > 0) {
          btn.textContent = 'Uploading artwork...';
          artworkData = await uploadToGoogleDrive(
            artworkFile.files[0],
            `${djName}_${mixTitle}_artwork.${artworkFile.files[0].name.split('.').pop()}`
          );
        }

        // Upload audio file to Google Drive
        btn.textContent = 'Uploading mix (this may take a while)...';
        const audioData = await uploadToGoogleDrive(
          selectedAudioFiles[0],
          `${djName}_${mixTitle}.${selectedAudioFiles[0].name.split('.').pop()}`
        );

        // Save metadata to Firestore
        btn.textContent = 'Saving details...';
        await addDoc(collection(db, 'mixes'), {
          djName,
          mixTitle,
          mixNumber: mixNumber || null,
          genre: genre || null,
          artworkURL: artworkData?.streamUrl || null,
          artworkDriveId: artworkData?.id || null,
          audioURL: audioData.streamUrl,
          audioDriveId: audioData.id,
          downloadUrl: audioData.downloadUrl,
          driveViewUrl: audioData.viewUrl,
          uploadedBy: currentUser.email,
          uploadedAt: serverTimestamp(),
          plays: 0,
          downloads: 0,
          ratings: [],
          messages: []
        });

        alert('Mix uploaded successfully! Redirecting to mixes page...');
        window.location.href = '/dj-mixes';

      } catch (error) {
        console.error('Upload error:', error);
        alert('Upload failed: ' + error.message);
      } finally {
        btn.disabled = false;
        btn.textContent = 'Upload Mix to Google Drive';
      }
    });
  </script>
</Layout>