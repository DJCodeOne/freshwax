---
// src/pages/item/[id].astro
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import ReleasePlate from '../../components/ReleasePlate.astro';

const { id } = Astro.params;

let item: any = null;
let itemType = '';
let isMerch = false;

// Try to find item in releases
try {
  const timestamp = Date.now();
  const response = await fetch(`https://res.cloudinary.com/dscqbze0d/raw/upload/releases/releases.json?t=${timestamp}`, {
    cache: 'no-store'
  });
  if (response.ok) {
    const releases = await response.json();
    const publishedReleases = releases.filter((r: any) => r.published === true);
    item = publishedReleases.find((r: any) => r.id === id);
    if (item) {
      itemType = 'Release';
    }
  }
} catch (error) {
  console.error('Error loading releases:', error);
}

// If not found, try DJ mixes
if (!item) {
  try {
    const timestamp = Date.now();
    const response = await fetch(`https://res.cloudinary.com/dscqbze0d/raw/upload/dj-mixes/mixes.json?t=${timestamp}`, {
      cache: 'no-store'
    });
    if (response.ok) {
      const mixes = await response.json();
      const mix = mixes.find((m: any) => m.id === id);
      if (mix) {
        itemType = 'DJ Mix';
        // Transform mix data to match ReleasePlate format
        item = {
          id: mix.id,
          title: mix.title,
          artist: mix.dj_name || mix.artist || 'Unknown DJ',
          label: mix.label || '',
          artworkUrl: mix.artwork_url || '/logo.webp',
          releaseDate: mix.release_date || new Date().toISOString(),
          isPreorder: false,
          hasVinyl: false,
          digitalPrice: parseFloat(mix.price) || 0,
          tracks: mix.tracklist ? mix.tracklist.map((track: any, index: number) => ({
            id: `${mix.id}-track-${index + 1}`,
            title: track.title || `Track ${index + 1}`,
            track_number: index + 1,
            preview_url: track.preview_url || null
          })) : [],
          extraNotes: mix.description || '',
          description: mix.description || ''
        };
      }
    }
  } catch (error) {
    console.error('Error loading DJ mix:', error);
  }
}

// If still not found, try merch
if (!item) {
  try {
    const timestamp = Date.now();
    const response = await fetch(`https://res.cloudinary.com/dscqbze0d/raw/upload/merch/products.json?t=${timestamp}`, {
      cache: 'no-store'
    });
    if (response.ok) {
      const merchItems = await response.json();
      item = merchItems.find((m: any) => m.id === id);
      if (item) {
        itemType = 'Merch';
        isMerch = true;
      }
    }
  } catch (error) {
    console.error('Error loading merch:', error);
  }
}

// If item not found anywhere, return 404
if (!item) {
  return Astro.redirect('/404');
}

const pageTitle = `${item.title} - ${item.artist || item.brand || 'Fresh Wax'}`;
---

<Layout title={pageTitle}>
  <Header />
  
  <main class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12">
    <div class="max-w-7xl mx-auto px-4">
      
      <!-- Breadcrumbs -->
      <div class="mb-6">
        <a href="/" class="text-gray-600 hover:text-black transition-colors">Home</a>
        <span class="mx-2 text-gray-400">/</span>
        <a href="/releases" class="text-gray-600 hover:text-black transition-colors">
          {itemType === 'DJ Mix' ? 'DJ Mixes' : itemType === 'Merch' ? 'Merch' : 'Releases'}
        </a>
        <span class="mx-2 text-gray-400">/</span>
        <span class="text-gray-900 font-semibold">{item.title}</span>
      </div>

      <!-- Back Button -->
      <button 
        onclick="history.back()" 
        class="mb-6 inline-flex items-center gap-2 px-4 py-2 bg-white border-2 border-black rounded-lg hover:bg-black hover:text-white transition-all font-semibold"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back
      </button>

      {!isMerch ? (
        <!-- Music Item (Release or DJ Mix) -->
        <div class="mb-12">
          <ReleasePlate 
            id={item.id}
            title={item.title}
            artist={item.artist}
            label={item.label || ''}
            artworkUrl={item.artworkUrl || item.artwork_url || '/logo.webp'}
            releaseDate={item.releaseDate || item.release_date}
            isPreorder={item.isPreorder || false}
            hasVinyl={item.hasVinyl || false}
            digitalPrice={item.digitalPrice || 0}
            vinylPrice={item.vinylPrice || 0}
            vinylAvailable={item.vinylAvailable || false}
            vinylStock={item.vinylStock || 0}
            tracks={item.tracks || []}
            extraNotes={item.extraNotes || item.description || ''}
            description={item.description || ''}
          />
        </div>
      ) : (
        <!-- Merch Item -->
        <div class="bg-white rounded-2xl shadow-2xl overflow-hidden border-4 border-black">
          <div class="grid md:grid-cols-2 gap-8">
            
            <!-- Merch Image -->
            <div class="bg-gray-100 p-8 flex items-center justify-center">
              <img 
                src={item.images?.[0]?.url || item.imageUrl || item.image_url || '/logo.webp'} 
                alt={item.title || item.name}
                class="max-w-full h-auto rounded-lg shadow-lg"
              />
            </div>

            <!-- Merch Details -->
            <div class="p-8 flex flex-col justify-between">
              <div>
                <div class="mb-6">
                  <span class="inline-block bg-purple-600 text-white text-xs font-bold px-3 py-1 rounded-full mb-3">
                    MERCH
                  </span>
                  <h1 class="text-4xl font-black text-gray-900 mb-2">{item.name || item.title}</h1>
                  {item.categoryName && (
                    <p class="text-xl font-bold text-gray-700">{item.categoryName}</p>
                  )}
                </div>

                {item.description && (
                  <div class="mb-6 text-gray-700 leading-relaxed">
                    <p>{item.description}</p>
                  </div>
                )}

                <!-- Sizes Available -->
                {item.sizes && item.sizes.length > 0 && (
                  <div class="mb-6">
                    <p class="text-sm font-bold text-gray-700 mb-2">Available Sizes:</p>
                    <div class="flex gap-2 flex-wrap">
                      {item.sizes.map((size: string) => (
                        <span class="inline-block bg-gray-200 text-gray-800 text-sm font-bold px-4 py-2 rounded-lg">
                          {size}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Price -->
                {item.price && (
                  <div class="mb-6">
                    <p class="text-3xl font-black text-gray-900">
                      Â£{parseFloat(item.price).toFixed(2)}
                    </p>
                  </div>
                )}

                <!-- Stock Status -->
                {item.stock !== undefined && (
                  <div class="mb-6">
                    {item.stock > 0 ? (
                      <span class="inline-block bg-green-500 text-white text-sm font-bold px-4 py-2 rounded-full">
                        In Stock ({item.stock} available)
                      </span>
                    ) : (
                      <span class="inline-block bg-red-500 text-white text-sm font-bold px-4 py-2 rounded-full">
                        Out of Stock
                      </span>
                    )}
                  </div>
                )}
              </div>

              <!-- Add to Cart Button -->
              <button 
                class="add-to-merch-cart w-full bg-black text-white font-bold py-4 px-6 rounded-lg hover:bg-gray-800 transition-all text-lg disabled:opacity-50 disabled:cursor-not-allowed"
                data-merch-id={item.id}
                data-merch-title={item.name || item.title}
                data-merch-price={item.price}
                data-merch-image={item.images?.[0]?.url || item.imageUrl || item.image_url}
                disabled={item.stock === 0}
              >
                {item.stock > 0 ? 'Add to Cart' : 'Out of Stock'}
              </button>
            </div>
          </div>
        </div>
      )}

      <!-- More from Artist -->
      {!isMerch && item.artist && (
        <div class="mt-12">
          <h2 class="text-2xl font-black text-gray-900 mb-6">
            More from {item.artist}
          </h2>
          <a 
            href={`/releases?artist=${encodeURIComponent(item.artist)}`}
            class="inline-flex items-center gap-2 px-6 py-3 bg-black text-white font-bold rounded-lg hover:bg-gray-800 transition-all"
          >
            View All Releases
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </a>
        </div>
      )}

    </div>
  </main>

  <Footer />
</Layout>

<script>
  // Add to cart functionality for merch
  const addMerchBtns = document.querySelectorAll('.add-to-merch-cart');
  
  addMerchBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const merchId = this.getAttribute('data-merch-id');
      const merchTitle = this.getAttribute('data-merch-title');
      const merchPrice = this.getAttribute('data-merch-price');
      const merchImage = this.getAttribute('data-merch-image');
      
      // Get existing cart or create new
      let cart = JSON.parse(localStorage.getItem('merchCart') || '[]');
      
      // Add item to cart
      cart.push({
        id: merchId,
        title: merchTitle,
        price: parseFloat(merchPrice),
        image: merchImage,
        quantity: 1
      });
      
      localStorage.setItem('merchCart', JSON.stringify(cart));
      
      // Visual feedback
      const originalText = this.innerHTML;
      this.innerHTML = 'â Added to Cart';
      this.classList.add('bg-green-600');
      
      setTimeout(() => {
        this.innerHTML = originalText;
        this.classList.remove('bg-green-600');
      }, 2000);
      
      window.dispatchEvent(new CustomEvent('cart-updated'));
    });
  });
</script>