---
// src/pages/artist/dashboard.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Artist Dashboard - Fresh Wax</title>
</head>
<body>
    <!-- Loading Screen -->
    <div id="loadingScreen" class="loading-screen">
        <div class="spinner"></div>
        <p>Loading your dashboard...</p>
    </div>

    <!-- Main Dashboard Content -->
    <div id="mainContent" class="main-content" style="display: none;">
        <!-- Header -->
        <header class="header">
            <div class="header-container">
                <div class="header-left">
                    <img src="/logo.webp" alt="Fresh Wax" class="logo">
                    <h1 class="site-title">Fresh Wax</h1>
                </div>
                <div class="header-right">
                    <span class="welcome-text">Welcome, <strong id="artistName">Artist</strong></span>
                    <button id="logoutBtn" class="btn-logout">Logout</button>
                </div>
            </div>
        </header>

        <!-- Main Dashboard -->
        <main class="dashboard">
            <div class="dashboard-container">
                
                <!-- Dashboard Title with Connection Status -->
                <div class="dashboard-title">
                    <div class="title-group">
                        <h2>Artist Dashboard</h2>
                        <div class="connection-status">
                            <span class="status-led" id="statusLed"></span>
                            <span class="status-text" id="statusText">Checking connection...</span>
                        </div>
                    </div>
                    <p>Manage your music releases and track your performance</p>
                </div>

                <!-- Stats Overview -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                            </svg>
                        </div>
                        <div class="stat-info">
                            <h3>Total Downloads</h3>
                            <p class="stat-number" id="totalDownloads">0</p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                            </svg>
                        </div>
                        <div class="stat-info">
                            <h3>Total Releases</h3>
                            <p class="stat-number" id="totalReleases">0</p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <div class="stat-info">
                            <h3>This Month</h3>
                            <p class="stat-number" id="monthlyDownloads">0</p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                            </svg>
                        </div>
                        <div class="stat-info">
                            <h3>Revenue</h3>
                            <p class="stat-number" id="totalRevenue">$0</p>
                        </div>
                    </div>
                </div>

                <!-- Primary Actions -->
                <div class="actions-row">
                    <a href="/artist/upload" id="uploadPortalBtn" class="btn-primary">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        Upload New Release
                    </a>
                    <button id="printReportBtn" class="btn-secondary">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                        </svg>
                        Print Monthly Report
                    </button>
                </div>

                <!-- Releases Management -->
                <div class="section">
                    <div class="section-header">
                        <h3>Your Releases</h3>
                        <div class="filter-tabs">
                            <button class="tab-btn active" data-filter="all">All</button>
                            <button class="tab-btn" data-filter="published">Published</button>
                            <button class="tab-btn" data-filter="pending">Pending</button>
                        </div>
                    </div>

                    <div id="releasesContainer" class="releases-grid">
                        <div class="empty-state">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                            </svg>
                            <p>No releases yet. Upload your first release to get started!</p>
                        </div>
                    </div>
                </div>

                <!-- Download Activity -->
                <div class="section">
                    <div class="section-header">
                        <h3>Recent Download Activity</h3>
                        <a href="/artist/downloads" class="link-view-all">View All →</a>
                    </div>

                    <div class="activity-table">
                        <table>
                            <thead>
                                <tr>
                                    <th>Release</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody id="activityTableBody">
                                <tr class="empty-row">
                                    <td colspan="4">No download activity yet</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Artist Profile Info -->
                <div class="section">
                    <div class="section-header">
                        <h3>Your Profile</h3>
                        <a href="/artist/profile" class="link-view-all">Edit Profile →</a>
                    </div>

                    <div class="profile-grid">
                        <div class="profile-item">
                            <span class="profile-label">Artist Name</span>
                            <span class="profile-value" id="displayArtistName">Loading...</span>
                        </div>
                        <div class="profile-item">
                            <span class="profile-label">Email</span>
                            <span class="profile-value" id="artistEmail">Loading...</span>
                        </div>
                        <div class="profile-item">
                            <span class="profile-label">Genre</span>
                            <span class="profile-value" id="artistGenre">Loading...</span>
                        </div>
                        <div class="profile-item">
                            <span class="profile-label">Phone</span>
                            <span class="profile-value" id="artistPhone">Loading...</span>
                        </div>
                        <div class="profile-item">
                            <span class="profile-label">Member Since</span>
                            <span class="profile-value" id="memberSince">Loading...</span>
                        </div>
                        <div class="profile-item full-width">
                            <span class="profile-label">Bio</span>
                            <div class="profile-value" id="artistBio">No bio available</div>
                        </div>
                    </div>
                </div>

            </div>
        </main>
    </div>
</body>
</html>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        background: #ffffff;
        color: #000000;
        line-height: 1.6;
    }

    /* Loading Screen */
    .loading-screen {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background: #000000;
        color: #ffffff;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 4px solid rgba(255, 255, 255, 0.1);
        border-top-color: #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Header */
    .header {
        background: #000000;
        color: #ffffff;
        border-bottom: 2px solid #ffffff;
        padding: 1.5rem 0;
    }

    .header-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .logo {
        height: 50px;
        width: auto;
    }

    .site-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #ffffff;
    }

    .header-right {
        display: flex;
        align-items: center;
        gap: 1.5rem;
    }

    .welcome-text {
        font-size: 1rem;
        color: #ffffff;
    }

    .btn-logout {
        background: #ffffff;
        color: #000000;
        border: 2px solid #ffffff;
        padding: 0.625rem 1.5rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-logout:hover {
        background: #000000;
        color: #ffffff;
    }

    /* Dashboard */
    .dashboard {
        min-height: calc(100vh - 100px);
        padding: 3rem 0;
    }

    .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .dashboard-title {
        margin-bottom: 3rem;
    }

    .title-group {
        display: flex;
        align-items: center;
        gap: 2rem;
        margin-bottom: 0.5rem;
    }

    .dashboard-title h2 {
        font-size: 2.5rem;
        font-weight: 700;
        color: #000000;
    }

    .dashboard-title p {
        font-size: 1.125rem;
        color: #666666;
    }

    /* Connection Status */
    .connection-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: 2px solid #000000;
        background: #ffffff;
    }

    .status-led {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #cccccc;
        animation: pulse 2s infinite;
    }

    .status-led.connected {
        background: #22c55e;
        box-shadow: 0 0 8px rgba(34, 197, 94, 0.6);
    }

    .status-led.disconnected {
        background: #ef4444;
        box-shadow: 0 0 8px rgba(239, 68, 68, 0.6);
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .status-text {
        font-size: 0.875rem;
        font-weight: 600;
        color: #000000;
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 3rem;
    }

    .stat-card {
        background: #ffffff;
        border: 2px solid #000000;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1.25rem;
        transition: all 0.2s;
    }

    .stat-card:hover {
        box-shadow: 8px 8px 0 #000000;
        transform: translate(-4px, -4px);
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        background: #000000;
        color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .stat-icon svg {
        width: 32px;
        height: 32px;
    }

    .stat-info h3 {
        font-size: 0.875rem;
        font-weight: 600;
        color: #666666;
        margin-bottom: 0.25rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #000000;
    }

    /* Action Buttons */
    .actions-row {
        display: flex;
        gap: 1rem;
        margin-bottom: 3rem;
        flex-wrap: wrap;
    }

    .btn-primary,
    .btn-secondary {
        padding: 1rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        border: 2px solid #000000;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        text-decoration: none;
        flex: 1;
        justify-content: center;
        min-width: 250px;
    }

    .btn-primary {
        background: #000000;
        color: #ffffff;
    }

    .btn-primary:hover {
        background: #ffffff;
        color: #000000;
        box-shadow: 8px 8px 0 #000000;
        transform: translate(-4px, -4px);
    }

    .btn-secondary {
        background: #ffffff;
        color: #000000;
    }

    .btn-secondary:hover {
        background: #000000;
        color: #ffffff;
        box-shadow: 8px 8px 0 #000000;
        transform: translate(-4px, -4px);
    }

    .btn-primary svg,
    .btn-secondary svg {
        width: 20px;
        height: 20px;
    }

    /* Section */
    .section {
        margin-bottom: 3rem;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #000000;
    }

    .section-header h3 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #000000;
    }

    .link-view-all {
        color: #000000;
        text-decoration: none;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.2s;
    }

    .link-view-all:hover {
        text-decoration: underline;
    }

    /* Filter Tabs */
    .filter-tabs {
        display: flex;
        gap: 0.5rem;
    }

    .tab-btn {
        padding: 0.5rem 1rem;
        background: #ffffff;
        border: 2px solid #000000;
        color: #000000;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .tab-btn.active {
        background: #000000;
        color: #ffffff;
    }

    .tab-btn:hover:not(.active) {
        background: #f0f0f0;
    }

    /* Releases Grid */
    .releases-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1.5rem;
    }

    .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        padding: 4rem 2rem;
        color: #666666;
    }

    .empty-state svg {
        width: 64px;
        height: 64px;
        margin-bottom: 1rem;
        stroke: #cccccc;
    }

    /* Activity Table */
    .activity-table {
        background: #ffffff;
        border: 2px solid #000000;
        overflow: hidden;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    thead {
        background: #000000;
        color: #ffffff;
    }

    th {
        text-align: left;
        padding: 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    tbody tr {
        border-bottom: 1px solid #e0e0e0;
    }

    tbody tr:last-child {
        border-bottom: none;
    }

    tbody tr:hover {
        background: #f5f5f5;
    }

    td {
        padding: 1rem;
        color: #000000;
    }

    .empty-row td {
        text-align: center;
        padding: 3rem;
        color: #666666;
        font-style: italic;
    }

    /* Profile Grid */
    .profile-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        background: #ffffff;
        border: 2px solid #000000;
        padding: 2rem;
    }

    .profile-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .profile-item.full-width {
        grid-column: 1 / -1;
    }

    .profile-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #666666;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .profile-value {
        font-size: 1rem;
        font-weight: 600;
        color: #000000;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .header-container {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .header-left {
            flex-direction: column;
        }

        .dashboard-title h2 {
            font-size: 2rem;
        }

        .title-group {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .actions-row {
            flex-direction: column;
        }

        .btn-primary,
        .btn-secondary {
            width: 100%;
        }

        .section-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .filter-tabs {
            width: 100%;
            justify-content: flex-start;
        }
    }
</style>

<script>
    import { initializeApp } from 'firebase/app';
    import { getAuth, onAuthStateChanged, signOut } from 'firebase/auth';
    import { getFirestore, doc, getDoc, collection, query, where, getDocs, orderBy, limit } from 'firebase/firestore';

    const firebaseConfig = {
        apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
        authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
        projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
        storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
        messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        appId: import.meta.env.PUBLIC_FIREBASE_APP_ID
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    let isFirestoreConnected = false;

    async function testFirestoreConnection() {
        try {
            await getDocs(query(collection(db, 'artists'), limit(1)));
            isFirestoreConnected = true;
            updateConnectionStatus(true);
            return true;
        } catch (error) {
            console.warn('Firestore connection issue:', error);
            isFirestoreConnected = false;
            updateConnectionStatus(false);
            return false;
        }
    }

    function updateConnectionStatus(connected) {
        const statusLed = document.getElementById('statusLed');
        const statusText = document.getElementById('statusText');
        
        if (!statusLed || !statusText) return;

        if (connected) {
            statusLed.className = 'status-led connected';
            statusText.textContent = 'Database Connected';
        } else {
            statusLed.className = 'status-led disconnected';
            statusText.textContent = 'Database Disconnected';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        onAuthStateChanged(auth, async (user) => {
            const loadingScreen = document.getElementById('loadingScreen');
            const mainContent = document.getElementById('mainContent');

            if (user) {
                console.log('User authenticated:', user.uid);
                await testFirestoreConnection();
                await loadDashboardData(user.uid);
                
                if (loadingScreen) loadingScreen.style.display = 'none';
                if (mainContent) mainContent.style.display = 'block';
            } else {
                console.log('No user authenticated, redirecting to login');
                window.location.href = '/artist/login';
            }
        });

        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', async () => {
                try {
                    await signOut(auth);
                    window.location.href = '/';
                } catch (error) {
                    console.error('Error logging out:', error);
                    alert('Failed to logout');
                }
            });
        }

        const printReportBtn = document.getElementById('printReportBtn');
        if (printReportBtn) {
            printReportBtn.addEventListener('click', () => {
                window.print();
            });
        }
    });

    async function loadDashboardData(userId) {
        if (!isFirestoreConnected) {
            console.warn('Firestore not connected, skipping data load');
            return;
        }
        
        try {
            await loadArtistData(userId);
            await loadStats(userId);
            await loadReleases(userId);
            await loadRecentActivity(userId);
        } catch (error) {
            console.error('Error loading dashboard data:', error);
        }
    }

    async function loadArtistData(userId) {
        if (!isFirestoreConnected) {
            console.warn('Skipping artist data load - not connected');
            return;
        }
        
        try {
            const artistDoc = await getDoc(doc(db, 'artists', userId));
            
            if (!artistDoc.exists()) {
                console.error('Artist document not found');
                alert('Artist profile not found');
                window.location.href = '/artist/login';
                return;
            }

            const artistData = artistDoc.data();
            
            const artistName = document.getElementById('artistName');
            const displayArtistName = document.getElementById('displayArtistName');
            const artistEmail = document.getElementById('artistEmail');
            const artistGenre = document.getElementById('artistGenre');
            const artistPhone = document.getElementById('artistPhone');
            const memberSince = document.getElementById('memberSince');
            const artistBio = document.getElementById('artistBio');

            if (artistName) artistName.textContent = artistData.artistName || 'Artist';
            if (displayArtistName) displayArtistName.textContent = artistData.artistName || 'N/A';
            if (artistEmail) artistEmail.textContent = artistData.email || 'N/A';
            if (artistGenre) artistGenre.textContent = artistData.genre || 'Not specified';
            if (artistPhone) artistPhone.textContent = artistData.phone || 'Not provided';
            
            if (memberSince && artistData.registeredAt) {
                const date = new Date(artistData.registeredAt);
                memberSince.textContent = date.toLocaleDateString();
            }

            if (artistBio && artistData.bio) {
                artistBio.innerHTML = `<p>${artistData.bio}</p>`;
            }

            const uploadBtn = document.getElementById('uploadPortalBtn');
            if (!artistData.hasUploadAccess && uploadBtn) {
                uploadBtn.style.background = '#6c757d';
                uploadBtn.style.borderColor = '#6c757d';
                uploadBtn.style.pointerEvents = 'none';
                uploadBtn.style.opacity = '0.6';
                uploadBtn.innerHTML = `
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                    Upload Access Disabled
                `;
            }
        } catch (error) {
            console.error('Error loading artist data:', error);
        }
    }

    async function loadStats(userId) {
        if (!isFirestoreConnected) {
            console.warn('Skipping stats load - not connected');
            return;
        }
        
        try {
            const releasesQuery = query(collection(db, 'releases'), where('artistId', '==', userId));
            const releasesSnapshot = await getDocs(releasesQuery);
            
            let totalDownloads = 0;
            let totalRevenue = 0;
            let monthlyDownloads = 0;
            
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();

            const ordersQuery = query(collection(db, 'orders'), where('artistId', '==', userId));
            const ordersSnapshot = await getDocs(ordersQuery);
            
            ordersSnapshot.forEach((doc) => {
                const orderData = doc.data();
                totalDownloads++;
                totalRevenue += orderData.amount || 0;
                
                const orderDate = orderData.createdAt?.toDate();
                if (orderDate && orderDate.getMonth() === currentMonth && orderDate.getFullYear() === currentYear) {
                    monthlyDownloads++;
                }
            });

            document.getElementById('totalDownloads').textContent = totalDownloads.toLocaleString();
            document.getElementById('totalReleases').textContent = releasesSnapshot.size.toLocaleString();
            document.getElementById('monthlyDownloads').textContent = monthlyDownloads.toLocaleString();
            document.getElementById('totalRevenue').textContent = `${totalRevenue.toFixed(2)}`;
        } catch (error) {
            console.error('Error loading stats:', error);
        }
    }

    async function loadReleases(userId) {
        if (!isFirestoreConnected) {
            console.warn('Skipping releases load - not connected');
            return;
        }
        
        try {
            const releasesQuery = query(
                collection(db, 'releases'), 
                where('artistId', '==', userId),
                orderBy('createdAt', 'desc')
            );
            const releasesSnapshot = await getDocs(releasesQuery);
            
            const container = document.getElementById('releasesContainer');
            
            if (releasesSnapshot.empty) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                        </svg>
                        <p>No releases yet. Upload your first release to get started!</p>
                    </div>
                `;
                return;
            }

            let releasesHTML = '';
            releasesSnapshot.forEach((doc) => {
                const release = doc.data();
                releasesHTML += `
                    <div class="release-card" style="background: #f5f5f5; border: 2px solid #000; padding: 1rem;">
                        <h4 style="margin-bottom: 0.5rem; font-weight: 700;">${release.title || 'Untitled'}</h4>
                        <p style="color: #666; font-size: 0.875rem; text-transform: uppercase; font-weight: 600;">${release.status || 'Unknown'}</p>
                    </div>
                `;
            });
            container.innerHTML = releasesHTML;
        } catch (error) {
            console.error('Error loading releases:', error);
        }
    }

    async function loadRecentActivity(userId) {
        if (!isFirestoreConnected) {
            console.warn('Skipping activity load - not connected');
            return;
        }
        
        try {
            const ordersQuery = query(
                collection(db, 'orders'),
                where('artistId', '==', userId),
                orderBy('createdAt', 'desc'),
                limit(10)
            );
            const ordersSnapshot = await getDocs(ordersQuery);
            
            const tbody = document.getElementById('activityTableBody');
            
            if (ordersSnapshot.empty) {
                tbody.innerHTML = '<tr class="empty-row"><td colspan="4">No download activity yet</td></tr>';
                return;
            }

            let activityHTML = '';
            ordersSnapshot.forEach((doc) => {
                const order = doc.data();
                const date = order.createdAt?.toDate().toLocaleDateString() || 'N/A';
                activityHTML += `
                    <tr>
                        <td>${order.releaseTitle || 'Unknown'}</td>
                        <td>${order.customerEmail || 'Anonymous'}</td>
                        <td>${date}</td>
                        <td>${(order.amount || 0).toFixed(2)}</td>
                    </tr>
                `;
            });
            tbody.innerHTML = activityHTML;
        } catch (error) {
            console.error('Error loading activity:', error);
        }
    }
</script>