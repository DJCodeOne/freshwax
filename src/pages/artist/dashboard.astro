---
// src/pages/artist/dashboard.astro
// FIXED VERSION with approval check
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Artist Dashboard - Fresh Wax</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
      background: #ffffff;
      min-height: 100vh;
    }

    /* Loading Screen */
    .loading-screen {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .loading-screen.hidden {
      display: none;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 3px solid #e0e0e0;
      border-top: 3px solid #000;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 20px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .loading-text {
      font-size: 16px;
      font-weight: 600;
      color: #000;
    }

    /* Logo Header */
    .logo-header {
      background: #000;
      padding: 20px;
      margin-bottom: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: 3px solid #000;
    }

    .logo-container {
      display: flex;
      align-items: center;
    }

    .dashboard-logo {
      height: 60px;
      width: auto;
      background: #fff;
      padding: 8px 16px;
    }

    .logout-btn {
      padding: 10px 20px;
      background: #fff;
      color: #000;
      border: 3px solid #fff;
      font-weight: 700;
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s;
      font-size: 14px;
    }

    .logout-btn:hover {
      background: #000;
      color: #fff;
      border-color: #fff;
      transform: translate(-2px, -2px);
      box-shadow: 4px 4px 0 #fff;
    }

    /* Dashboard Container */
    .dashboard-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      display: none;
    }

    .dashboard-container.show {
      display: block;
    }

    /* Header */
    .dashboard-header {
      background: #fff;
      border: 3px solid #000;
      padding: 30px;
      margin-bottom: 30px;
    }

    .dashboard-header h1 {
      font-size: 32px;
      font-weight: 900;
      color: #000;
      margin-bottom: 5px;
      text-transform: uppercase;
      letter-spacing: -0.5px;
    }

    .welcome-text {
      color: #666;
      font-size: 16px;
      font-weight: 600;
    }

    .artist-name-highlight {
      color: #000;
      font-weight: 900;
    }

    /* Stats Grid */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: #fff;
      border: 3px solid #000;
      padding: 25px;
      transition: all 0.2s;
    }

    .stat-card:hover {
      transform: translate(-2px, -2px);
      box-shadow: 4px 4px 0 #000;
    }

    .stat-label {
      font-size: 12px;
      font-weight: 700;
      color: #666;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 10px;
    }

    .stat-value {
      font-size: 32px;
      font-weight: 900;
      color: #000;
    }

    /* Quick Actions */
    .quick-actions {
      background: #fff;
      border: 3px solid #000;
      padding: 30px;
      margin-bottom: 30px;
    }

    .quick-actions h2 {
      font-size: 20px;
      font-weight: 900;
      color: #000;
      margin-bottom: 20px;
      text-transform: uppercase;
    }

    .actions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }

    .action-btn {
      padding: 20px;
      background: #fff;
      border: 3px solid #000;
      text-align: center;
      cursor: pointer;
      transition: all 0.2s;
      text-decoration: none;
      color: #000;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }

    .action-btn:hover {
      background: #000;
      color: #fff;
      transform: translate(-2px, -2px);
      box-shadow: 4px 4px 0 #000;
    }

    .action-icon {
      font-size: 32px;
    }

    .action-label {
      font-weight: 700;
      text-transform: uppercase;
      font-size: 14px;
    }

    @media (max-width: 768px) {
      .logo-header {
        padding: 15px;
      }

      .dashboard-logo {
        height: 50px;
      }

      .logout-btn {
        padding: 8px 12px;
        font-size: 12px;
      }

      .dashboard-header {
        padding: 20px;
      }
      
      .dashboard-header h1 {
        font-size: 24px;
      }

      .welcome-text {
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Screen -->
  <div id="loadingScreen" class="loading-screen">
    <div class="spinner"></div>
    <div class="loading-text">Loading dashboard...</div>
  </div>

  <!-- Dashboard Content -->
  <div id="dashboardContent" class="dashboard-container">
    <!-- Logo Header with Logout -->
    <div class="logo-header">
      <div class="logo-container">
        <img src="/logo.webp" alt="Fresh Wax" class="dashboard-logo">
      </div>
      <button class="logout-btn" id="logoutBtn">üö™ Logout</button>
    </div>

    <!-- Welcome Header -->
    <div class="dashboard-header">
      <h1>üé§ Artist Dashboard</h1>
      <p class="welcome-text">Welcome back, <span class="artist-name-highlight" id="artistName">Artist</span>!</p>
    </div>

    <!-- Stats -->
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-label">Total Releases</div>
        <div class="stat-value" id="totalReleases">0</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Total Sales</div>
        <div class="stat-value" id="totalSales">¬£0.00</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Pending Royalties</div>
        <div class="stat-value" id="pendingRoyalties">¬£0.00</div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
      <h2>‚ö° Quick Actions</h2>
      <div class="actions-grid">
        <a href="https://freshwax-uploads.pages.dev" target="_blank" class="action-btn">
          <div class="action-icon">üì§</div>
          <div class="action-label">Upload Release</div>
        </a>
        <a href="/artist/releases" class="action-btn">
          <div class="action-icon">üéµ</div>
          <div class="action-label">My Releases</div>
        </a>
        <a href="/artist/analytics" class="action-btn">
          <div class="action-icon">üìä</div>
          <div class="action-label">Analytics</div>
        </a>
        <a href="/artist/profile" class="action-btn">
          <div class="action-icon">üë§</div>
          <div class="action-label">Profile</div>
        </a>
      </div>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
    import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    import { getFirestore, doc, getDoc, collection, query, where, getDocs } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
      authDomain: "freshwax-store.firebaseapp.com",
      projectId: "freshwax-store",
      storageBucket: "freshwax-store.firebasestorage.app",
      messagingSenderId: "675435782973",
      appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    // ========================================
    // ‚≠ê CRITICAL APPROVAL CHECK
    // ========================================
    onAuthStateChanged(auth, async (user) => {
      console.log('Auth state changed, user:', user?.email);

      // If not logged in, redirect to login
      if (!user) {
        console.log('No user, redirecting to login');
        window.location.href = '/login';
        return;
      }

      try {
        console.log('Fetching artist document for UID:', user.uid);
        
        // ‚≠ê STEP 1: Get artist document from Firestore
        const artistDocRef = doc(db, 'artists', user.uid);
        const artistDoc = await getDoc(artistDocRef);
        
        // ‚≠ê STEP 2: Check if artist document exists
        if (!artistDoc.exists()) {
          console.error('‚ùå Artist document not found for UID:', user.uid);
          alert('Artist account not found. Please contact support.');
          await signOut(auth);
          window.location.href = '/login';
          return;
        }

        const artistData = artistDoc.data();
        console.log('Artist data loaded:', artistData);
        console.log('Approval status:', artistData.approved);
        console.log('Approval type:', typeof artistData.approved);

        // ‚≠ê STEP 3: Check if approved === true (CRITICAL!)
        // Only boolean true is accepted, not "true" string or 1 or undefined
        if (artistData.approved !== true) {
          console.error('‚ùå Artist not approved. Value:', artistData.approved);
          
          // Sign out immediately
          await signOut(auth);
          
          // Show alert
          alert('‚è≥ Your account is pending approval. You will receive an email once your account is approved by our admin team.');
          
          // Redirect to login
          window.location.href = '/login';
          return;
        }

        // ‚úÖ Artist is approved! Load dashboard
        console.log('‚úÖ Artist approved - loading dashboard');
        await loadDashboard(artistData);

      } catch (error) {
        console.error('Error checking approval:', error);
        alert('An error occurred while loading your dashboard. Please try again.');
        await signOut(auth);
        window.location.href = '/login';
      }
    });

    // Load dashboard data
    async function loadDashboard(artistData) {
      try {
        // Set artist name
        document.getElementById('artistName').textContent = artistData.artistName || 'Artist';

        // Load artist stats
        await loadArtistStats(artistData.uid);

        // Hide loading, show dashboard
        document.getElementById('loadingScreen').classList.add('hidden');
        document.getElementById('dashboardContent').classList.add('show');

      } catch (error) {
        console.error('Error loading dashboard:', error);
      }
    }

    // Load artist statistics
    async function loadArtistStats(artistUid) {
      try {
        // Get releases for this artist
        const releasesQuery = query(
          collection(db, 'releases'),
          where('artistId', '==', artistUid)
        );
        const releasesSnapshot = await getDocs(releasesQuery);
        document.getElementById('totalReleases').textContent = releasesSnapshot.size;

        // Get sales for this artist
        const ordersQuery = query(
          collection(db, 'orders'),
          where('artistId', '==', artistUid)
        );
        const ordersSnapshot = await getDocs(ordersQuery);
        
        let totalSales = 0;
        let pendingRoyalties = 0;

        ordersSnapshot.forEach(doc => {
          const order = doc.data();
          totalSales += order.amount || 0;
          if (order.status === 'pending') {
            pendingRoyalties += (order.artistEarnings || 0);
          }
        });

        document.getElementById('totalSales').textContent = `¬£${totalSales.toFixed(2)}`;
        document.getElementById('pendingRoyalties').textContent = `¬£${pendingRoyalties.toFixed(2)}`;

      } catch (error) {
        console.error('Error loading stats:', error);
      }
    }

    // Logout
    document.getElementById('logoutBtn').addEventListener('click', async () => {
      try {
        await signOut(auth);
        window.location.href = '/login';
      } catch (error) {
        console.error('Logout error:', error);
        alert('Failed to logout. Please try again.');
      }
    });
  </script>
</body>
</html>