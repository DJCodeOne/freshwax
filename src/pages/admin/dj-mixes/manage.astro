---
// src/pages/admin/dj-mixes/manage.astro
import Layout from '../../../layouts/Layout.astro';
import { v2 as cloudinary } from 'cloudinary';

cloudinary.config({
  cloud_name: 'dscqbze0d',
  api_key: '555922422486159',
  api_secret: '1OV_96Pd_x7MSdt7Bph5aNELYho',
});

let mixes = [];
let errorMessage = '';

try {
  const info = await cloudinary.api.resource('dj-mixes/mixes.json', {
    resource_type: 'raw'
  });
  
  const version = info.version;
  const mixesUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/v${version}/dj-mixes/mixes.json`;
  
  const response = await fetch(mixesUrl, { cache: 'no-store' });
  
  if (response.ok) {
    const data = await response.json();
    if (Array.isArray(data)) {
      mixes = data;
      mixes.sort((a, b) => new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime());
    }
  }
} catch (error) {
  console.error('Error loading mixes:', error);
  errorMessage = error instanceof Error ? error.message : 'Unknown error';
}
---

<Layout title="Manage DJ Mixes - Admin">
  <style>
    .admin-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      background: #ffffff;
    }

    .admin-logo-container {
      background: #ffffff;
      padding: 30px 20px;
      margin-bottom: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 3px solid #000;
      position: relative;
    }

    .admin-logo {
      height: 80px;
      width: auto;
      max-width: 100%;
      display: block;
    }

    .back-btn {
      position: absolute;
      top: 50%;
      right: 20px;
      transform: translateY(-50%);
      padding: 10px 20px;
      background: #000;
      color: #fff;
      border: 3px solid #000;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.2s;
      text-transform: uppercase;
      text-decoration: none;
      display: inline-block;
      font-size: 13px;
      z-index: 10;
    }

    .back-btn:hover {
      background: #fff;
      color: #000;
      transform: translateY(-50%) translate(-2px, -2px);
      box-shadow: 4px 4px 0 #000;
    }

    .admin-header {
      background: #fff;
      border: 3px solid #000;
      padding: 30px;
      margin-bottom: 30px;
      position: relative;
    }

    .admin-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 5px;
      background: #000;
    }

    .admin-header h1 {
      font-size: 32px;
      font-weight: 900;
      margin-bottom: 10px;
      text-transform: uppercase;
    }

    .admin-header p {
      color: #666;
      font-size: 16px;
      margin: 0;
    }

    .stats-row {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 15px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: #fff;
      border: 3px solid #000;
      padding: 15px;
      transition: all 0.2s;
      min-height: 90px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    .stat-card:hover {
      transform: translate(-2px, -2px);
      box-shadow: 4px 4px 0 #000;
    }

    .stat-label {
      font-size: 10px;
      font-weight: 700;
      color: #666;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 8px;
      line-height: 1.2;
    }

    .stat-value {
      font-size: 24px;
      font-weight: 900;
      color: #000;
      line-height: 1;
    }

    .mix-table {
      background: #fff;
      border: 3px solid #000;
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 30px;
    }

    .mix-table thead {
      background: #000;
      color: #fff;
    }

    .mix-table th {
      text-align: left;
      padding: 15px;
      font-weight: 700;
      font-size: 12px;
      text-transform: uppercase;
    }

    .mix-table tbody tr {
      border-bottom: 2px solid #000;
    }

    .mix-table tbody tr:last-child {
      border-bottom: none;
    }

    .mix-table tbody tr:hover {
      background: #f9f9f9;
    }

    .mix-table td {
      padding: 15px;
      vertical-align: middle;
    }

    .mix-artwork {
      width: 60px;
      height: 60px;
      object-fit: cover;
      border: 2px solid #000;
    }

    .mix-info h3 {
      font-size: 16px;
      font-weight: 900;
      margin-bottom: 5px;
    }

    .mix-info p {
      font-size: 14px;
      color: #666;
      margin: 2px 0;
    }

    .stats-inline {
      display: flex;
      gap: 15px;
      font-size: 12px;
      font-weight: 600;
    }

    .stats-inline span {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .btn-group {
      display: flex;
      gap: 10px;
    }

    .btn {
      padding: 8px 16px;
      border: 2px solid #000;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 12px;
      text-transform: uppercase;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }

    .btn-view {
      background: #fff;
      color: #000;
    }

    .btn-view:hover {
      background: #000;
      color: #fff;
    }

    .btn-delete {
      background: #ff0000;
      color: #fff;
      border-color: #ff0000;
    }

    .btn-delete:hover {
      background: #fff;
      color: #ff0000;
    }

    .empty-state {
      text-align: center;
      padding: 60px 20px;
      background: #fff;
      border: 3px solid #000;
    }

    .empty-state h2 {
      font-size: 24px;
      font-weight: 900;
      margin-bottom: 10px;
    }

    .empty-state p {
      color: #666;
      margin-bottom: 20px;
    }

    /* Delete Confirmation Modal */
    .modal-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }

    .modal-overlay.active {
      display: flex;
    }

    .modal {
      background: #fff;
      border: 5px solid #000;
      max-width: 500px;
      width: 90%;
      padding: 30px;
      box-shadow: 12px 12px 0 #000;
    }

    .modal h2 {
      font-size: 24px;
      font-weight: 900;
      margin-bottom: 20px;
      text-transform: uppercase;
    }

    .modal p {
      margin-bottom: 20px;
      line-height: 1.6;
    }

    .modal-buttons {
      display: flex;
      gap: 10px;
    }

    .modal-btn {
      flex: 1;
      padding: 15px;
      border: 3px solid #000;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.2s;
      text-transform: uppercase;
    }

    .modal-btn-confirm {
      background: #ff0000;
      color: #fff;
      border-color: #ff0000;
    }

    .modal-btn-confirm:hover {
      background: #fff;
      color: #ff0000;
    }

    .modal-btn-cancel {
      background: #fff;
      color: #000;
    }

    .modal-btn-cancel:hover {
      background: #000;
      color: #fff;
    }

    .success-message {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #000;
      color: #fff;
      padding: 15px 20px;
      border: 3px solid #000;
      font-weight: 700;
      box-shadow: 8px 8px 0 #000;
      z-index: 10000;
      animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
      from {
        transform: translateX(400px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    .error-message {
      background: #ff0000;
      color: #fff;
      padding: 15px;
      border: 3px solid #ff0000;
      margin-bottom: 20px;
      font-weight: 700;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .admin-container {
        padding: 15px;
      }

      .admin-logo-container {
        padding: 20px 15px;
      }

      .admin-logo {
        height: 60px;
      }

      .back-btn {
        padding: 8px 12px;
        font-size: 11px;
        right: 15px;
      }

      .admin-header h1 {
        font-size: 24px;
      }

      .admin-header p {
        font-size: 14px;
      }

      .stats-row {
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
      }

      .stat-card {
        padding: 12px;
        min-height: 80px;
      }

      .stat-value {
        font-size: 20px;
      }

      .mix-table {
        font-size: 14px;
      }

      .mix-table th,
      .mix-table td {
        padding: 10px;
      }

      .mix-artwork {
        width: 50px;
        height: 50px;
      }

      .btn-group {
        flex-direction: column;
        gap: 5px;
      }

      .btn {
        padding: 6px 12px;
        font-size: 11px;
      }
    }

    @media (max-width: 480px) {
      .stats-row {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <div class="admin-container">
    <!-- Logo with Back Button -->
    <div class="admin-logo-container">
      <img 
        src="/logo.webp" 
        alt="Fresh Wax" 
        class="admin-logo"
        onerror="this.style.display='none'"
      >
      <a href="/admin" class="back-btn">‚Üê Dashboard</a>
    </div>

    <!-- Header -->
    <div class="admin-header">
      <h1>üéß Manage DJ Mixes</h1>
      <p>Review and manage all uploaded DJ mixes</p>
    </div>

    {errorMessage && (
      <div class="error-message">
        ‚ö†Ô∏è Error loading mixes: {errorMessage}
      </div>
    )}

    <!-- Stats -->
    <div class="stats-row">
      <div class="stat-card">
        <div class="stat-label">Total Mixes</div>
        <div class="stat-value">{mixes.length}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Total Plays</div>
        <div class="stat-value">{mixes.reduce((sum, m) => sum + (m.plays || 0), 0)}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Total Downloads</div>
        <div class="stat-value">{mixes.reduce((sum, m) => sum + (m.downloads || 0), 0)}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Total Likes</div>
        <div class="stat-value">{mixes.reduce((sum, m) => sum + (m.likes || 0), 0)}</div>
      </div>
    </div>

    {mixes.length === 0 ? (
      <div class="empty-state">
        <h2>No DJ Mixes Found</h2>
        <p>There are currently no mixes uploaded to the system.</p>
        <a href="/upload-mix" class="btn btn-view">Upload Test Mix</a>
      </div>
    ) : (
      <table class="mix-table">
        <thead>
          <tr>
            <th>Artwork</th>
            <th>Mix Info</th>
            <th>Stats</th>
            <th>Upload Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {mixes.map((mix) => (
            <tr data-mix-id={mix.id}>
              <td>
                <img 
                  src={mix.artwork_url} 
                  alt={mix.title}
                  class="mix-artwork"
                  onerror="this.src='/logo.webp'"
                />
              </td>
              <td>
                <div class="mix-info">
                  <h3>{mix.title}</h3>
                  <p>by {mix.dj_name}</p>
                  {mix.description && <p class="description">{mix.description}</p>}
                </div>
              </td>
              <td>
                <div class="stats-inline">
                  <span title="Plays">‚ñ∂ {mix.plays || 0}</span>
                  <span title="Downloads">‚¨á {mix.downloads || 0}</span>
                  <span title="Likes">‚ù§ {mix.likes || 0}</span>
                </div>
              </td>
              <td>{new Date(mix.upload_date).toLocaleDateString()}</td>
              <td>
                <div class="btn-group">
                  <a href={mix.audio_url} target="_blank" class="btn btn-view">
                    Listen
                  </a>
                  <button class="btn btn-delete delete-mix-btn" data-mix-id={mix.id} data-mix-title={mix.title}>
                    Delete
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    )}
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="modal-overlay">
    <div class="modal">
      <h2>‚ö†Ô∏è Confirm Deletion</h2>
      <p>
        Are you sure you want to delete "<strong id="deleteMixTitle"></strong>"?
      </p>
      <p style="color: #ff0000;">
        This will permanently remove:
        <br>‚Ä¢ The audio file
        <br>‚Ä¢ The artwork
        <br>‚Ä¢ All stats (plays, downloads, likes)
        <br>‚Ä¢ The mix entry from the database
      </p>
      <p><strong>This action cannot be undone.</strong></p>
      <div class="modal-buttons">
        <button id="confirmDeleteBtn" class="modal-btn modal-btn-confirm">Delete Mix</button>
        <button id="cancelDeleteBtn" class="modal-btn modal-btn-cancel">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    let mixToDelete = null;
    const deleteModal = document.getElementById('deleteModal');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');

    // Open delete modal
    document.querySelectorAll('.delete-mix-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const mixId = btn.getAttribute('data-mix-id');
        const mixTitle = btn.getAttribute('data-mix-title');
        
        mixToDelete = mixId;
        document.getElementById('deleteMixTitle').textContent = mixTitle;
        deleteModal.classList.add('active');
      });
    });

    // Cancel delete
    cancelDeleteBtn.addEventListener('click', () => {
      deleteModal.classList.remove('active');
      mixToDelete = null;
    });

    deleteModal.addEventListener('click', (e) => {
      if (e.target === deleteModal) {
        deleteModal.classList.remove('active');
        mixToDelete = null;
      }
    });

    // Confirm delete
    confirmDeleteBtn.addEventListener('click', async () => {
      if (!mixToDelete) return;

      confirmDeleteBtn.disabled = true;
      confirmDeleteBtn.textContent = 'Deleting...';

      try {
        const response = await fetch('/api/delete-mix', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mixId: mixToDelete })
        });

        if (response.ok) {
          showSuccessMessage('Mix deleted successfully');
          
          // Remove row from table
          const row = document.querySelector(`tr[data-mix-id="${mixToDelete}"]`);
          if (row) row.remove();
          
          deleteModal.classList.remove('active');
          mixToDelete = null;
          
          // Reload page after 2 seconds to update stats
          setTimeout(() => location.reload(), 2000);
        } else {
          const error = await response.json();
          alert('Failed to delete mix: ' + (error.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete mix: ' + error.message);
      } finally {
        confirmDeleteBtn.disabled = false;
        confirmDeleteBtn.textContent = 'Delete Mix';
      }
    });

    function showSuccessMessage(message) {
      const msgEl = document.createElement('div');
      msgEl.className = 'success-message';
      msgEl.textContent = message;
      document.body.appendChild(msgEl);

      setTimeout(() => {
        msgEl.remove();
      }, 3000);
    }
  </script>
</Layout>