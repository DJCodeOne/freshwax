<!-- src/pages/admin/account/manage.astro -->
---
---
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Customer Management - Fresh Wax Admin</title>
<style>
* { margin: 0; padding: 0; box-sizing: border-box; }
body {
font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
background: #ffffff;
min-height: 100vh;
}
.admin-logo-header {
background: #000;
padding: 20px;
margin-bottom: 30px;
display: flex;
justify-content: center;
border: 3px solid #000;
}
.admin-logo {
height: 80px;
width: auto;
background: #fff;
padding: 10px 20px;
}
.admin-container {
max-width: 1400px;
margin: 0 auto;
padding: 20px;
background: #ffffff;
}
.admin-header {
background: #fff;
padding: 30px;
margin-bottom: 30px;
border: 3px solid #000;
display: flex;
justify-content: space-between;
align-items: center;
flex-wrap: wrap;
gap: 15px;
}
.admin-header h1 {
font-size: 32px;
color: #000;
margin: 0;
font-weight: 900;
text-transform: uppercase;
}
.admin-back-btn {
padding: 12px 24px;
background: #000;
color: white;
border: 3px solid #000;
font-size: 14px;
font-weight: 700;
cursor: pointer;
text-decoration: none;
text-transform: uppercase;
transition: all 0.2s;
}
.admin-back-btn:hover {
background: #fff;
color: #000;
transform: translate(-4px, -4px);
box-shadow: 8px 8px 0 #000;
}
.admin-stats-row {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
gap: 20px;
margin-bottom: 30px;
}
.admin-stat-card {
background: white;
padding: 20px;
border: 3px solid #000;
transition: all 0.2s;
}
.admin-stat-card:hover {
transform: translate(-4px, -4px);
box-shadow: 8px 8px 0 #000;
}
.admin-stat-label {
font-size: 11px;
color: #666;
margin-bottom: 8px;
font-weight: 700;
text-transform: uppercase;
letter-spacing: 1px;
}
.admin-stat-value {
font-size: 32px;
font-weight: 900;
color: #000;
}
.admin-toolbar {
background: #fff;
padding: 20px;
margin-bottom: 20px;
border: 3px solid #000;
display: flex;
gap: 15px;
flex-wrap: wrap;
align-items: center;
}
.admin-search {
flex: 1;
min-width: 250px;
padding: 12px;
border: 3px solid #000;
font-size: 14px;
font-weight: 600;
}
.admin-table-container {
background: #fff;
border: 3px solid #000;
overflow-x: auto;
}
.admin-table {
width: 100%;
border-collapse: collapse;
}
.admin-table thead {
background: #000;
color: #fff;
}
.admin-table th {
padding: 15px;
text-align: left;
font-weight: 900;
text-transform: uppercase;
font-size: 12px;
letter-spacing: 1px;
}
.admin-table td {
padding: 15px;
border-bottom: 2px solid #e0e0e0;
font-weight: 600;
background: #fff;
}
.admin-table tbody tr:hover {
background: #f9f9f9;
}
.admin-table tbody tr:hover td {
background: #f9f9f9;
}
.admin-action-btns {
display: flex;
gap: 8px;
}
.admin-btn-icon {
width: 35px;
height: 35px;
display: flex;
align-items: center;
justify-content: center;
border: 2px solid #000;
background: #fff;
cursor: pointer;
transition: all 0.2s;
font-weight: 700;
}
.admin-btn-icon:hover {
background: #000;
color: #fff;
transform: scale(1.1);
}
.admin-modal-overlay {
display: none;
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(0,0,0,0.8);
z-index: 1000;
padding: 20px;
overflow-y: auto;
}
.admin-modal-overlay.active {
display: flex;
align-items: center;
justify-content: center;
}
.admin-modal {
background: #fff;
border: 3px solid #000;
max-width: 700px;
width: 100%;
max-height: 90vh;
overflow-y: auto;
}
.admin-modal-header {
background: #000;
color: #fff;
padding: 20px;
display: flex;
justify-content: space-between;
align-items: center;
}
.admin-modal-header h2 {
margin: 0;
font-size: 24px;
font-weight: 900;
text-transform: uppercase;
}
.admin-modal-close {
background: none;
border: none;
color: #fff;
font-size: 30px;
cursor: pointer;
line-height: 1;
}
.admin-modal-body {
padding: 30px;
background: #fff;
}
.admin-detail-grid {
display: grid;
gap: 20px;
}
.admin-detail-item {
padding-bottom: 15px;
border-bottom: 2px solid #e0e0e0;
}
.admin-detail-label {
font-size: 11px;
font-weight: 700;
text-transform: uppercase;
color: #666;
letter-spacing: 1px;
margin-bottom: 5px;
}
.admin-detail-value {
font-size: 16px;
font-weight: 600;
color: #000;
}
.admin-orders-list {
margin-top: 20px;
}
.admin-order-item {
padding: 15px;
border: 2px solid #000;
margin-bottom: 10px;
background: #f9f9f9;
}
.admin-loading {
text-align: center;
padding: 60px;
background: #fff;
}
.admin-spinner {
width: 50px;
height: 50px;
border: 3px solid #e0e0e0;
border-top: 3px solid #000;
border-radius: 50%;
animation: spin 1s linear infinite;
margin: 0 auto 20px;
}
@keyframes spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}
@media (max-width: 768px) {
.admin-container { padding: 15px; }
.admin-logo { height: 60px; }
.admin-header { flex-direction: column; align-items: flex-start; }
.admin-header h1 { font-size: 24px; }
.admin-stats-row { grid-template-columns: 1fr; }
.admin-toolbar { flex-direction: column; }
.admin-search { width: 100%; }
.admin-table-container { overflow-x: scroll; }
.admin-table { min-width: 700px; }
}
</style>
</head>
<body>
<!-- Logo Header -->
<div class="admin-logo-header">
<img src="/logo.webp" alt="Fresh Wax" class="admin-logo">
</div>

<div class="admin-container">
<!-- Header -->
<div class="admin-header">
<h1>üë• Customer Management</h1>
<a href="/admin" class="admin-back-btn">‚Üê Back to Dashboard</a>
</div>

<!-- Stats -->
<div class="admin-stats-row">
<div class="admin-stat-card">
<div class="admin-stat-label">Total Customers</div>
<div class="admin-stat-value" id="totalCustomers">0</div>
</div>
<div class="admin-stat-card">
<div class="admin-stat-label">Total Orders</div>
<div class="admin-stat-value" id="totalOrders">0</div>
</div>
<div class="admin-stat-card">
<div class="admin-stat-label">Total Revenue</div>
<div class="admin-stat-value" id="totalRevenue">¬£0</div>
</div>
</div>

<!-- Toolbar -->
<div class="admin-toolbar">
<input
type="text"
id="searchInput"
class="admin-search"
placeholder="Search customers by name or email..."
>
</div>

<!-- Loading State -->
<div id="loadingState" class="admin-loading">
<div class="admin-spinner"></div>
<p>Loading customers...</p>
</div>

<!-- Customers Table -->
<div id="customersTable" class="admin-table-container" style="display: none;">
<table class="admin-table">
<thead>
<tr>
<th>Name</th>
<th>Email</th>
<th>Orders</th>
<th>Total Spent</th>
<th>Last Order</th>
<th>Actions</th>
</tr>
</thead>
<tbody id="customersTableBody">
<!-- Populated by JavaScript -->
</tbody>
</table>
</div>
</div>

<!-- Customer Details Modal -->
<div id="detailsModal" class="admin-modal-overlay">
<div class="admin-modal">
<div class="admin-modal-header">
<h2>Customer Details</h2>
<button class="admin-modal-close" onclick="closeDetailsModal()">√ó</button>
</div>
<div class="admin-modal-body">
<div class="admin-detail-grid" id="customerDetails">
<!-- Populated by JavaScript -->
</div>
</div>
</div>
</div>

<script type="module">
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
import { getFirestore, collection, getDocs, doc, getDoc } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

const firebaseConfig = {
apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
authDomain: "freshwax-store.firebaseapp.com",
projectId: "freshwax-store",
storageBucket: "freshwax-store.firebasestorage.app",
messagingSenderId: "675435782973",
appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

let allCustomers = [];
let allOrders = [];

// Check authentication
onAuthStateChanged(auth, async (user) => {
if (!user) {
window.location.href = '/admin/login';
return;
}

const adminDoc = await getDoc(doc(db, 'admins', user.uid));
if (!adminDoc.exists()) {
window.location.href = '/admin/login';
return;
}

loadCustomersAndOrders();
});

// Load customers and orders
async function loadCustomersAndOrders() {
try {
console.log('Starting to load customers...');

// Load customers from the customers collection
const customersSnapshot = await getDocs(collection(db, 'customers'));
const customerMap = new Map();

customersSnapshot.forEach((doc) => {
const customerData = doc.data();
console.log('Customer found:', doc.id, customerData);

customerMap.set(doc.id, {
id: doc.id,
name: customerData.fullName || customerData.name || customerData.displayName || 'N/A',
email: customerData.email || 'N/A',
phone: customerData.phone || customerData.phoneNumber || 'N/A',
orders: [],
totalSpent: 0,
lastOrder: null,
createdAt: customerData.createdAt,
registeredAt: customerData.registeredAt
});
});

console.log('Total customers loaded:', customerMap.size);

// Load orders
console.log('Starting to load orders...');
const ordersSnapshot = await getDocs(collection(db, 'orders'));
allOrders = [];

ordersSnapshot.forEach((doc) => {
const orderData = doc.data();
console.log('Order found:', doc.id, orderData);
allOrders.push({ id: doc.id, ...orderData });
});

console.log('Total orders loaded:', allOrders.length);

// Link orders to customers
allOrders.forEach(order => {
// Try to find customer by customerId field in order
const customerId = order.customerId || order.userId;

if (customerId && customerMap.has(customerId)) {
const customer = customerMap.get(customerId);
customer.orders.push(order);
customer.totalSpent += parseFloat(order.total || order.amount || 0);

// Handle Firebase Timestamp
let orderDate;
if (order.createdAt?.toDate) {
orderDate = order.createdAt.toDate();
} else if (order.createdAt) {
orderDate = new Date(order.createdAt);
} else {
orderDate = new Date(0);
}

if (!customer.lastOrder || orderDate > new Date(customer.lastOrder)) {
customer.lastOrder = orderDate.toISOString();
}
} else {
console.warn('Order has no matching customer:', order.id, 'customerId:', customerId);
}
});

allCustomers = Array.from(customerMap.values());
allCustomers.sort((a, b) => b.totalSpent - a.totalSpent);

console.log('Final customers with orders:', allCustomers);

// Update stats
document.getElementById('totalCustomers').textContent = allCustomers.length;
document.getElementById('totalOrders').textContent = allOrders.length;
const totalRevenue = allOrders.reduce((sum, order) => sum + parseFloat(order.total || order.amount || 0), 0);
document.getElementById('totalRevenue').textContent = '¬£' + totalRevenue.toFixed(2);

document.getElementById('loadingState').style.display = 'none';
document.getElementById('customersTable').style.display = 'block';

renderCustomers();
} catch (error) {
console.error('Error loading customers:', error);
document.getElementById('loadingState').innerHTML = `
<div style="color: red;">
<h3>Error loading customers</h3>
<p>${error.message}</p>
<button onclick="location.reload()" class="admin-back-btn" style="margin-top: 20px;">Retry</button>
</div>
`;
}
}

// Render customers table
function renderCustomers() {
const tbody = document.getElementById('customersTableBody');
const searchTerm = document.getElementById('searchInput').value.toLowerCase();

let filtered = allCustomers.filter(customer => {
return customer.name?.toLowerCase().includes(searchTerm) ||
customer.email?.toLowerCase().includes(searchTerm);
});

if (filtered.length === 0) {
tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 40px;">No customers found</td></tr>';
return;
}

tbody.innerHTML = filtered.map(customer => `
<tr>
<td><strong>${customer.name}</strong></td>
<td>${customer.email}</td>
<td>${customer.orders.length}</td>
<td>¬£${customer.totalSpent.toFixed(2)}</td>
<td>${customer.lastOrder ? new Date(customer.lastOrder).toLocaleDateString() : 'Never'}</td>
<td>
<div class="admin-action-btns">
<button class="admin-btn-icon" onclick="viewCustomer('${customer.id}')" title="View Details">üëÅÔ∏è</button>
</div>
</td>
</tr>
`).join('');
}

// View customer details
window.viewCustomer = function(customerId) {
const customer = allCustomers.find(c => c.id === customerId);
if (!customer) return;

const detailsHTML = `
<div class="admin-detail-item">
<div class="admin-detail-label">Name</div>
<div class="admin-detail-value">${customer.name}</div>
</div>
<div class="admin-detail-item">
<div class="admin-detail-label">Email</div>
<div class="admin-detail-value">${customer.email}</div>
</div>
<div class="admin-detail-item">
<div class="admin-detail-label">Phone</div>
<div class="admin-detail-value">${customer.phone}</div>
</div>
<div class="admin-detail-item">
<div class="admin-detail-label">Total Orders</div>
<div class="admin-detail-value">${customer.orders.length}</div>
</div>
<div class="admin-detail-item">
<div class="admin-detail-label">Total Spent</div>
<div class="admin-detail-value">¬£${customer.totalSpent.toFixed(2)}</div>
</div>
<div class="admin-detail-item">
<div class="admin-detail-label">Last Order</div>
<div class="admin-detail-value">${customer.lastOrder ? new Date(customer.lastOrder).toLocaleString() : 'Never'}</div>
</div>
${customer.orders.length > 0 ? `
<div class="admin-detail-item" style="border: none;">
<div class="admin-detail-label">Order History</div>
<div class="admin-orders-list">
${customer.orders.slice(0, 10).map(order => `
<div class="admin-order-item">
<div><strong>Order #${order.id.substring(0, 8)}</strong></div>
<div>Date: ${order.createdAt ? (order.createdAt.toDate ? order.createdAt.toDate().toLocaleDateString() : new Date(order.createdAt).toLocaleDateString()) : 'N/A'}</div>
<div>Total: ¬£${(order.total || order.amount || 0).toFixed(2)}</div>
<div>Status: ${order.status || 'N/A'}</div>
</div>
`).join('')}
${customer.orders.length > 10 ? `<p style="text-align: center; margin-top: 10px; color: #666;">+ ${customer.orders.length - 10} more orders</p>` : ''}
</div>
</div>
` : ''}
`;

document.getElementById('customerDetails').innerHTML = detailsHTML;
document.getElementById('detailsModal').classList.add('active');
};

window.closeDetailsModal = function() {
document.getElementById('detailsModal').classList.remove('active');
};

// Search
document.getElementById('searchInput').addEventListener('input', renderCustomers);

// Close modal on overlay click
document.getElementById('detailsModal').addEventListener('click', (e) => {
if (e.target.id === 'detailsModal') closeDetailsModal();
});
</script>
</body>
</html>