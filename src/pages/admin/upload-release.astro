---
// src/pages/upload-release.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Release Package Uploader</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
</head>
<body>
  <div class="container">
    <div class="header">
      <img src="/logo.webp" alt="Logo" class="logo">
      <h1>üì¶ Fresh Wax Release Package Uploader</h1>
      <p>Drop the .zip package, verify connections, and get hotlinks</p>
    </div>

    <div class="section">
      <h2>üì§ Drop New Release ZIP Package</h2>
      
      <div id="dropzone" class="dropzone">
        <div class="dropzone-icon">üì¶</div>
        <div class="dropzone-text">Drop the release .zip package here</div>
        <div class="dropzone-subtext">Structure: artwork/, preview-clips/, full-tracks/, metadata.json</div>
        <input type="file" id="file-input" accept=".zip" style="display: none;">
      </div>

      <div id="file-preview" class="hidden">
        <h3 style="margin-top: 30px; color: #1a1a2e; font-size: 18px; font-weight: 700;">üìã Package Contents:</h3>
        <div id="file-list" class="file-list"></div>
        <button onclick="clearZip()" style="margin-top: 20px; background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">üóëÔ∏è Clear Package</button>
      </div>
    </div>

    <div id="config-section" class="section hidden">
      <h2>‚òÅÔ∏è Verify Cloud Connections</h2>
      
      <div class="alert alert-info">
        <strong>‚òÅÔ∏è Hybrid Strategy:</strong> Preview clips ‚Üí Cloudinary #1 ‚Ä¢ Artwork & Metadata ‚Üí Cloudinary #2 ‚Ä¢ Full tracks ‚Üí R2
      </div>

      <div class="config-grid">
        <div class="config-box">
          <h3>üéµ Cloudinary #1 (Previews)</h3>
          <div id="cloudinary1-status" class="status-box status-pending">
            ‚è≥ Checking connection...
          </div>
        </div>

        <div class="config-box">
          <h3>üé® Cloudinary #2 (Artwork & Metadata)</h3>
          <div id="cloudinary2-status" class="status-box status-pending">
            ‚è≥ Checking connection...
          </div>
        </div>

        <div class="config-box">
          <h3>‚òÅÔ∏è Cloudflare R2 (Full Tracks)</h3>
          <div id="r2-status" class="status-box status-pending">
            ‚è≥ Checking connection...
          </div>
        </div>
      </div>

      <button onclick="uploadToCloud()" class="success large" id="upload-btn" disabled>‚òÅÔ∏è Upload to Cloud Storage</button>
      <p style="text-align: center; color: #64748b; margin-top: 15px; font-size: 14px;">Upload button will enable when all connections are verified</p>

      <div id="upload-progress" class="hidden">
        <div class="progress-bar">
          <div id="upload-progress-fill" class="progress-fill" style="width: 0%">0%</div>
        </div>
        <p id="upload-progress-text" style="text-align: center; color: #666; margin-top: 10px;">Uploading...</p>
      </div>
    </div>

    <div id="hotlinks-section" class="section hidden">
      <h2>üîó Copy Hotlinks</h2>
      
      <div class="alert alert-success">
        <strong>‚úÖ Upload Complete!</strong> Copy these hotlinks for the releaseplate component.
      </div>

      <h3 style="color: #1a1a2e; font-size: 18px; font-weight: 700; margin-bottom: 15px;">üìã Astro/React Component Code:</h3>
      <div class="code-box">
        <pre id="hotlinks-code"></pre>
      </div>
      <button onclick="copyHotlinks()" class="success" style="width: 100%;">üìã Copy All Hotlinks</button>

      <div style="margin-top: 30px;">
        <h3 style="color: #1a1a2e; font-size: 18px; font-weight: 700; margin-bottom: 15px;">üìÅ Uploaded Files:</h3>
        <div id="uploaded-files-list"></div>
      </div>

      <button onclick="resetAll()" style="margin-top: 30px; background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">üîÑ Upload New Release</button>
    </div>
  </div>
</body>
</html>

<style>
  * { margin: 0; padding: 0; box-sizing: border-box; }
  body { 
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; 
    background: #ffffff;
    min-height: 100vh; 
    padding: 40px 20px;
  }
  .container { max-width: 1100px; margin: 0 auto; }
  
  .header { 
    background: #000000;
    color: #ffffff;
    padding: 50px 40px; 
    margin-bottom: 30px; 
    border-radius: 20px; 
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    text-align: center;
    border: 2px solid #000000;
  }
  .logo {
    max-width: 200px;
    height: auto;
    margin-bottom: 20px;
    background: #ffffff;
    padding: 15px;
    border-radius: 12px;
  }
  .header h1 { 
    font-size: 48px; 
    font-weight: 800;
    color: #ffffff;
    margin-bottom: 12px;
  }
  .header p { 
    color: #cccccc; 
    font-size: 18px; 
    font-weight: 500; 
  }
  
  .section { 
    background: #ffffff;
    padding: 40px; 
    margin-bottom: 30px; 
    border-radius: 20px; 
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    border: 2px solid #000000;
  }
  .section h2 { 
    font-size: 28px;
    font-weight: 700;
    margin-bottom: 25px; 
    color: #000000;
    padding-bottom: 20px; 
    border-bottom: 3px solid #000000;
  }
  
  .dropzone { 
    border: 3px dashed #000000;
    border-radius: 16px; 
    padding: 70px 30px; 
    text-align: center; 
    cursor: pointer; 
    transition: all 0.3s;
    background: #ffffff;
  }
  .dropzone:hover { 
    background: #f5f5f5;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  .dropzone.dragover { 
    background: #eeeeee;
    border-color: #333333;
  }
  .dropzone-icon { font-size: 72px; margin-bottom: 20px; }
  .dropzone-text { 
    font-size: 22px; 
    font-weight: 700; 
    margin-bottom: 12px; 
    color: #000000; 
  }
  .dropzone-subtext { 
    color: #666666; 
    font-size: 15px; 
    font-weight: 500; 
  }
  
  button { 
    padding: 16px 32px;
    background: #000000;
    color: #ffffff;
    border: 2px solid #000000;
    border-radius: 12px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 700;
    transition: all 0.3s;
    font-family: 'Inter', sans-serif;
  }
  button:hover:not(:disabled) { 
    background: #333333;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }
  button:disabled { 
    opacity: 0.5; 
    cursor: not-allowed; 
  }
  button.success { 
    background: #000000;
    border-color: #000000;
  }
  button.success:hover:not(:disabled) {
    background: #1a1a1a;
  }
  button.large { 
    font-size: 20px; 
    padding: 20px 40px; 
    font-weight: 800; 
  }
  
  .file-list { margin-top: 25px; }
  .file-item { 
    background: #f5f5f5;
    padding: 12px 16px;
    border-radius: 8px;
    margin-bottom: 8px;
    border-left: 4px solid #000000;
    font-size: 14px;
    color: #333333;
  }
  
  .progress-bar { 
    width: 100%;
    height: 36px;
    background: #eeeeee;
    border-radius: 18px;
    overflow: hidden;
    margin: 25px 0;
    border: 2px solid #000000;
  }
  .progress-fill { 
    height: 100%;
    background: #000000;
    transition: width 0.4s;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #ffffff;
    font-size: 15px;
    font-weight: 800;
  }
  
  .code-box {
    background: #000000;
    color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
    max-height: 400px;
    overflow-y: auto;
    font-family: 'Courier New', monospace;
    font-size: 13px;
    line-height: 1.6;
    border: 2px solid #000000;
  }
  
  .alert {
    padding: 20px 24px;
    border-radius: 12px;
    margin: 25px 0;
    font-weight: 500;
    font-size: 15px;
    border: 2px solid #000000;
  }
  .alert-info {
    background: #f5f5f5;
    color: #000000;
  }
  .alert-success {
    background: #000000;
    color: #ffffff;
  }
  
  .hidden { display: none !important; }
  .config-grid { 
    display: grid; 
    gap: 20px; 
    margin: 25px 0; 
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
  }
  .config-box {
    border: 2px solid #000000;
    border-radius: 12px;
    padding: 20px;
    background: #ffffff;
  }
  .config-box h3 {
    margin-bottom: 15px;
    color: #000000;
    font-size: 18px;
    font-weight: 700;
  }
  
  .status-box {
    padding: 15px;
    border-radius: 8px;
    margin-top: 10px;
    font-size: 14px;
    border: 2px solid #000000;
  }
  
  .status-pending {
    background: #f5f5f5;
    color: #666666;
  }
  
  .status-success {
    background: #000000;
    color: #ffffff;
  }
  
  .status-error {
    background: #ffffff;
    color: #dc2626;
    border-color: #dc2626;
  }
  
  .status-warning {
    background: #f5f5f5;
    color: #000000;
  }
</style>

<script is:inline>
  let zipFiles = {};
  let hotlinks = { artwork: [], previews: [], fullTracks: [], metadata: null };
  
  const cloudConfig = {
    cloudinary1: { 
      cloudName: 'dijam9uva', 
      uploadPreset: 'audio-clips', 
      folder: 'previews' 
    },
    cloudinary2: { 
      cloudName: 'dm9gldbda', 
      uploadPreset: 'images-and-json', 
      folderArtwork: 'artwork',
      folderMetadata: 'metadata'
    },
    r2: { 
      endpoint: '/api/upload-r2', 
      publicDomain: 'pub-5c0458d0721c4946884a203f2ca66ee0.r2.dev' 
    }
  };
  
  let connectionsValid = { cloudinary1: false, cloudinary2: false, r2: false };

  document.addEventListener('DOMContentLoaded', () => {
    setupDropzone();
  });

  function setupDropzone() {
    const dropzone = document.getElementById('dropzone');
    const input = document.getElementById('file-input');
    
    dropzone.addEventListener('click', () => input.click());
    dropzone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropzone.classList.add('dragover');
    });
    dropzone.addEventListener('dragleave', () => dropzone.classList.remove('dragover'));
    dropzone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropzone.classList.remove('dragover');
      if (e.dataTransfer.files.length) handleZip(e.dataTransfer.files[0]);
    });
    input.addEventListener('change', (e) => {
      if (e.target.files.length) handleZip(e.target.files[0]);
    });
  }

  async function handleZip(file) {
    if (!file.name.toLowerCase().endsWith('.zip')) {
      alert('Please upload a .zip file');
      return;
    }

    try {
      const zip = await JSZip.loadAsync(file);
      zipFiles = {};
      
      const fileList = document.getElementById('file-list');
      fileList.innerHTML = '';
      
      let counts = { artwork: 0, previews: 0, tracks: 0, metadata: 0 };

      for (let [path, zipEntry] of Object.entries(zip.files)) {
        if (zipEntry.dir) continue;
        
        const blob = await zipEntry.async('blob');
        zipFiles[path] = { blob, name: zipEntry.name };
        
        if (path.startsWith('artwork/')) counts.artwork++;
        else if (path.startsWith('preview-clips/')) counts.previews++;
        else if (path.startsWith('full-tracks/')) counts.tracks++;
        else if (path === 'metadata.json') counts.metadata++;
        
        const item = document.createElement('div');
        item.className = 'file-item';
        item.textContent = path;
        fileList.appendChild(item);
      }

      document.getElementById('file-preview').classList.remove('hidden');
      document.getElementById('config-section').classList.remove('hidden');
      
      checkCloudConnections();
      
      console.log('Loaded files:', Object.keys(zipFiles).length);
      console.log('Categories:', counts);
      
    } catch (err) {
      alert('Failed to read .zip file: ' + err.message);
      console.error(err);
    }
  }

  function clearZip() {
    zipFiles = {};
    document.getElementById('file-preview').classList.add('hidden');
    document.getElementById('config-section').classList.add('hidden');
    document.getElementById('file-input').value = '';
  }

  async function checkCloudConnections() {
    checkCloudinary1();
    checkCloudinary2();
    checkR2();
  }

  async function checkCloudinary1() {
    const statusEl = document.getElementById('cloudinary1-status');
    
    try {
      const testBlob = new Blob(['test'], { type: 'text/plain' });
      const formData = new FormData();
      formData.append('file', testBlob);
      formData.append('upload_preset', cloudConfig.cloudinary1.uploadPreset);
      formData.append('resource_type', 'raw');
      
      const response = await fetch(
        `https://api.cloudinary.com/v1_1/${cloudConfig.cloudinary1.cloudName}/raw/upload`,
        { method: 'POST', body: formData }
      );
      
      if (response.ok) {
        statusEl.innerHTML = '‚úÖ <strong>Connected</strong><br><span style="font-size: 13px;">Cloud: ' + cloudConfig.cloudinary1.cloudName + ' (Previews)</span>';
        statusEl.className = 'status-box status-success';
        connectionsValid.cloudinary1 = true;
      } else {
        throw new Error('Invalid credentials');
      }
    } catch (err) {
      statusEl.innerHTML = '‚ùå <strong>Connection Failed</strong><br><span style="font-size: 13px;">' + err.message + '</span>';
      statusEl.className = 'status-box status-error';
      connectionsValid.cloudinary1 = false;
    }
    
    updateUploadButton();
  }

  async function checkCloudinary2() {
    const statusEl = document.getElementById('cloudinary2-status');
    
    try {
      const testBlob = new Blob(['test'], { type: 'text/plain' });
      const formData = new FormData();
      formData.append('file', testBlob);
      formData.append('upload_preset', cloudConfig.cloudinary2.uploadPreset);
      formData.append('resource_type', 'raw');
      
      const response = await fetch(
        `https://api.cloudinary.com/v1_1/${cloudConfig.cloudinary2.cloudName}/raw/upload`,
        { method: 'POST', body: formData }
      );
      
      if (response.ok) {
        statusEl.innerHTML = '‚úÖ <strong>Connected</strong><br><span style="font-size: 13px;">Cloud: ' + cloudConfig.cloudinary2.cloudName + ' (Artwork & Metadata)</span>';
        statusEl.className = 'status-box status-success';
        connectionsValid.cloudinary2 = true;
      } else {
        throw new Error('Invalid credentials');
      }
    } catch (err) {
      statusEl.innerHTML = '‚ùå <strong>Connection Failed</strong><br><span style="font-size: 13px;">' + err.message + '</span>';
      statusEl.className = 'status-box status-error';
      connectionsValid.cloudinary2 = false;
    }
    
    updateUploadButton();
  }

  async function checkR2() {
    const statusEl = document.getElementById('r2-status');
    
    try {
      const response = await fetch(cloudConfig.r2.endpoint, {
        method: 'OPTIONS',
      });
      
      if (response.ok || response.status === 204 || response.status === 0) {
        statusEl.innerHTML = '‚úÖ <strong>Connected</strong><br><span style="font-size: 13px;">Endpoint ready</span>';
        statusEl.className = 'status-box status-success';
        connectionsValid.r2 = true;
      } else {
        throw new Error('Endpoint unreachable');
      }
    } catch (err) {
      statusEl.innerHTML = '‚ö†Ô∏è <strong>Localhost</strong><br><span style="font-size: 13px;">Will test during upload</span>';
      statusEl.className = 'status-box status-warning';
      connectionsValid.r2 = true;
    }
    
    updateUploadButton();
  }

  function updateUploadButton() {
    const uploadBtn = document.getElementById('upload-btn');
    if (connectionsValid.cloudinary1 && connectionsValid.cloudinary2 && connectionsValid.r2) {
      uploadBtn.disabled = false;
    } else {
      uploadBtn.disabled = true;
    }
  }

  async function uploadToCloud() {
    document.getElementById('upload-progress').classList.remove('hidden');
    document.getElementById('upload-btn').disabled = true;
    
    hotlinks = { artwork: [], previews: [], fullTracks: [], metadata: null };
    
    const files = Object.entries(zipFiles);
    let completed = 0;
    const total = files.length;

    try {
      for (let [path, fileData] of files) {
        const fileName = path.split('/').pop();
        
        if (path.startsWith('artwork/')) {
          const url = await uploadToCloudinary2(fileData.blob, 
            `${cloudConfig.cloudinary2.folderArtwork}/${fileName.replace(/\.[^/.]+$/, '')}`, 'image');
          hotlinks.artwork.push({ name: fileName, url });
          
        } else if (path.startsWith('preview-clips/')) {
          const url = await uploadToCloudinary1(fileData.blob,
            `${cloudConfig.cloudinary1.folder}/${fileName.replace(/\.[^/.]+$/, '')}`, 'video');
          hotlinks.previews.push({ name: fileName, url });
          
        } else if (path.startsWith('full-tracks/')) {
          const url = await uploadToR2(fileData.blob, fileName);
          const format = fileName.toLowerCase().endsWith('.wav') ? 'WAV' : 'MP3 (320kbps)';
          hotlinks.fullTracks.push({ name: fileName, url, format });
          
        } else if (path === 'metadata.json') {
          const url = await uploadToCloudinary2(fileData.blob,
            `${cloudConfig.cloudinary2.folderMetadata}/metadata`, 'raw');
          hotlinks.metadata = url;
        }
        
        completed++;
        updateProgress(completed, total);
      }

      document.getElementById('upload-progress').classList.add('hidden');
      document.getElementById('upload-btn').disabled = false;
      showHotlinks();
      
    } catch (err) {
      alert('Upload failed: ' + err.message);
      console.error(err);
      document.getElementById('upload-progress').classList.add('hidden');
      document.getElementById('upload-btn').disabled = false;
    }
  }

  function uploadToCloudinary1(blob, publicId, resourceType) {
    return new Promise((resolve, reject) => {
      const formData = new FormData();
      formData.append('file', blob);
      formData.append('upload_preset', cloudConfig.cloudinary1.uploadPreset);
      formData.append('public_id', publicId);
      formData.append('resource_type', resourceType);
      
      fetch(`https://api.cloudinary.com/v1_1/${cloudConfig.cloudinary1.cloudName}/${resourceType}/upload`, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.secure_url) {
          resolve(data.secure_url);
        } else {
          reject(new Error('Cloudinary #1 upload failed: ' + JSON.stringify(data)));
        }
      })
      .catch(reject);
    });
  }

  function uploadToCloudinary2(blob, publicId, resourceType) {
    return new Promise((resolve, reject) => {
      const formData = new FormData();
      formData.append('file', blob);
      formData.append('upload_preset', cloudConfig.cloudinary2.uploadPreset);
      formData.append('public_id', publicId);
      formData.append('resource_type', resourceType);
      
      fetch(`https://api.cloudinary.com/v1_1/${cloudConfig.cloudinary2.cloudName}/${resourceType}/upload`, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.secure_url) {
          resolve(data.secure_url);
        } else {
          reject(new Error('Cloudinary #2 upload failed: ' + JSON.stringify(data)));
        }
      })
      .catch(reject);
    });
  }

  function uploadToR2(blob, filename) {
    return new Promise((resolve, reject) => {
      const formData = new FormData();
      formData.append('file', blob);
      formData.append('filename', filename);
      
      fetch(cloudConfig.r2.endpoint, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.url) {
          resolve(data.url);
        } else if (data.key) {
          resolve(`https://${cloudConfig.r2.publicDomain}/${data.key}`);
        } else {
          reject(new Error('R2 upload failed: ' + JSON.stringify(data)));
        }
      })
      .catch(reject);
    });
  }

  function updateProgress(completed, total) {
    const percent = Math.round((completed / total) * 100);
    document.getElementById('upload-progress-fill').style.width = percent + '%';
    document.getElementById('upload-progress-fill').textContent = percent + '%';
    document.getElementById('upload-progress-text').textContent = 
      `Uploading ${completed} of ${total} files...`;
  }

  function showHotlinks() {
    document.getElementById('hotlinks-section').classList.remove('hidden');
    
    let code = `// Release hotlinks\nconst release = {\n`;
    
    code += `  artwork: [\n`;
    hotlinks.artwork.forEach((item, i) => {
      code += `    "${item.url}"${i < hotlinks.artwork.length - 1 ? ',' : ''} // ${item.name}\n`;
    });
    code += `  ],\n\n`;
    
    code += `  previews: [\n`;
    hotlinks.previews.forEach((item, i) => {
      code += `    "${item.url}"${i < hotlinks.previews.length - 1 ? ',' : ''} // ${item.name}\n`;
    });
    code += `  ],\n\n`;
    
    code += `  fullTracks: [\n`;
    hotlinks.fullTracks.forEach((item, i) => {
      code += `    { url: "${item.url}", format: "${item.format}" }${i < hotlinks.fullTracks.length - 1 ? ',' : ''} // ${item.name}\n`;
    });
    code += `  ],\n\n`;
    
    if (hotlinks.metadata) {
      code += `  metadata: "${hotlinks.metadata}"\n`;
    }
    
    code += `};`;
    
    document.getElementById('hotlinks-code').textContent = code;
    
    const uploadedList = document.getElementById('uploaded-files-list');
    uploadedList.innerHTML = `
      <div class="file-item">üì∏ Artwork: ${hotlinks.artwork.length} file(s)</div>
      <div class="file-item">üéµ Preview Clips: ${hotlinks.previews.length} file(s)</div>
      <div class="file-item">üíø Full Tracks: ${hotlinks.fullTracks.length} file(s)</div>
      <div class="file-item">üìÑ Metadata: ${hotlinks.metadata ? '1 file' : 'None'}</div>
    `;
    
    document.getElementById('hotlinks-section').scrollIntoView({ behavior: 'smooth' });
  }

  function copyHotlinks() {
    const code = document.getElementById('hotlinks-code').textContent;
    navigator.clipboard.writeText(code).then(() => {
      const btn = event.target;
      const originalText = btn.textContent;
      btn.textContent = '‚úÖ Copied!';
      setTimeout(() => {
        btn.textContent = originalText;
      }, 2000);
    }).catch(err => {
      alert('Failed to copy: ' + err);
    });
  }

  function resetAll() {
    zipFiles = {};
    hotlinks = { artwork: [], previews: [], fullTracks: [], metadata: null };
    document.getElementById('file-input').value = '';
    document.getElementById('file-preview').classList.add('hidden');
    document.getElementById('config-section').classList.add('hidden');
    document.getElementById('hotlinks-section').classList.add('hidden');
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
</script>