---
// src/pages/admin/publish-release.astro
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Publish Release to Store">
<style>
body {
background: #ffffff;
}

.container {
max-width: 1400px;
margin: 0 auto;
padding: 20px;
}

/* Logo Container */
.logo-container {
background: #ffffff;
padding: 30px 20px;
margin-bottom: 30px;
display: flex;
justify-content: center;
align-items: center;
border: 3px solid #000;
}

.logo {
height: 80px;
width: auto;
max-width: 90%;
}

.logo-fallback {
font-size: 48px;
font-weight: 900;
color: #000;
text-transform: uppercase;
letter-spacing: 2px;
}

/* Header */
.header {
background: #fff;
padding: 30px;
margin-bottom: 30px;
border: 3px solid #000;
position: relative;
}

.header::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
height: 5px;
background: #000;
}

.header-content {
display: flex;
justify-content: space-between;
align-items: center;
}

.header h1 {
font-size: 32px;
color: #000;
margin-bottom: 5px;
font-weight: 900;
letter-spacing: -0.5px;
}

.header p {
color: #666;
font-size: 16px;
font-weight: 500;
}

.back-btn {
padding: 10px 20px;
background: #000;
color: white;
text-decoration: none;
border: 2px solid #000;
font-size: 14px;
font-weight: 700;
transition: all 0.2s;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.back-btn:hover {
background: #fff;
color: #000;
transform: translateY(-2px);
box-shadow: 4px 4px 0 #000;
}

/* Section Cards */
.section-card {
background: white;
border: 3px solid #000;
padding: 30px;
margin-bottom: 30px;
position: relative;
}

.section-card::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
height: 5px;
background: #000;
}

.section-title {
font-size: 24px;
font-weight: 900;
color: #000;
margin-bottom: 20px;
padding-bottom: 15px;
border-bottom: 3px solid #000;
text-transform: uppercase;
letter-spacing: 1px;
}

/* Dropzone */
.dropzone-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
gap: 20px;
margin-bottom: 25px;
}

.dropzone-wrapper h3 {
font-weight: 900;
margin-bottom: 12px;
font-size: 14px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.dropzone {
border: 3px dashed #000;
padding: 30px;
text-align: center;
cursor: pointer;
transition: all 0.2s;
background: #fff;
}

.dropzone:hover {
background: #f9f9f9;
transform: translateY(-2px);
}

.dropzone-icon {
font-size: 48px;
margin-bottom: 12px;
}

.dropzone-text {
font-weight: 700;
color: #000;
margin-bottom: 5px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.dropzone-subtext {
font-size: 12px;
color: #666;
font-weight: 600;
}

/* Textarea */
.paste-area {
width: 100%;
height: 120px;
margin-top: 12px;
padding: 12px;
border: 3px solid #000;
font-family: monospace;
font-size: 12px;
resize: vertical;
}

.paste-area:focus {
outline: none;
box-shadow: 4px 4px 0 #000;
}

/* Status Messages */
.status-message {
margin-top: 12px;
padding: 12px;
border: 3px solid #000;
font-weight: 700;
font-size: 12px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.status-success {
background: #fff;
color: #000;
}

.status-error {
background: #000;
color: #fff;
}

.status-info {
background: #f9f9f9;
color: #000;
}

/* Buttons */
.button-row {
display: flex;
gap: 12px;
flex-wrap: wrap;
}

.btn {
padding: 12px 24px;
border: 3px solid #000;
font-size: 14px;
font-weight: 700;
cursor: pointer;
transition: all 0.2s;
text-transform: uppercase;
letter-spacing: 0.5px;
background: #fff;
color: #000;
}

.btn:disabled {
opacity: 0.5;
cursor: not-allowed;
}

.btn-primary {
background: #000;
color: white;
}

.btn-primary:hover:not(:disabled) {
background: #fff;
color: #000;
transform: translate(-2px, -2px);
box-shadow: 4px 4px 0 #000;
}

.btn-secondary {
background: #fff;
color: #000;
}

.btn-secondary:hover:not(:disabled) {
transform: translate(-2px, -2px);
box-shadow: 4px 4px 0 #000;
}

.btn-edit {
background: #fff;
color: #000;
border: 3px solid #000;
}

.btn-edit:hover:not(:disabled) {
background: #000;
color: #fff;
transform: translate(-2px, -2px);
box-shadow: 4px 4px 0 #000;
}

/* Publish Section */
.publish-section {
background: #000;
color: #fff;
padding: 30px;
border: 3px solid #000;
}

.publish-section h2 {
font-size: 24px;
font-weight: 900;
margin-bottom: 20px;
padding-bottom: 15px;
border-bottom: 3px solid #fff;
text-transform: uppercase;
letter-spacing: 1px;
}

.input-group {
margin-bottom: 20px;
}

.input-label {
display: block;
font-size: 12px;
font-weight: 700;
margin-bottom: 8px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.text-input {
width: 100%;
padding: 12px;
border: 3px solid #fff;
background: #000;
color: #fff;
font-size: 14px;
font-weight: 600;
}

.text-input:focus {
outline: none;
box-shadow: 4px 4px 0 #fff;
}

.input-hint {
font-size: 11px;
color: #999;
margin-top: 5px;
}

.warning-text {
font-size: 11px;
color: #999;
margin-top: 15px;
padding: 12px;
border: 2px solid #333;
}

/* Info Box */
.info-box {
padding: 15px;
background: #f9f9f9;
border: 3px solid #000;
margin-top: 20px;
}

.info-box h3 {
font-weight: 900;
margin-bottom: 10px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.info-box p {
font-size: 14px;
color: #666;
margin-bottom: 5px;
}

.hidden {
display: none;
}

/* Loading Spinner */
.spinner {
width: 30px;
height: 30px;
border: 3px solid #e0e0e0;
border-top: 3px solid #000;
border-radius: 50%;
animation: spin 1s linear infinite;
display: inline-block;
vertical-align: middle;
margin-right: 10px;
}

@keyframes spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
.header-content {
flex-direction: column;
align-items: flex-start;
gap: 15px;
}

.button-row {
flex-direction: column;
}

.btn {
width: 100%;
text-align: center;
}
}
</style>

<div class="container">
<!-- Logo -->
<div class="logo-container">
<img
src="/logo.webp"
alt="Fresh Wax"
class="logo"
onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
>
<div class="logo-fallback" style="display: none;">FRESH WAX</div>
</div>

<!-- Header -->
<div class="header">
<div class="header-content">
<div>
<h1><span style="font-family: 'Arial', sans-serif;">üöÄ</span> Publish Release to Store</h1>
<p>Upload metadata, paste hotlinks, preview, and publish</p>
</div>
<a href="/admin" class="back-btn">‚Üê Dashboard</a>
</div>
</div>

<!-- Step 1: Upload Files -->
<div class="section-card">
<h2 class="section-title"><span style="font-family: 'Arial', sans-serif;">üì¶</span> Upload Release Data</h2>

<div class="dropzone-grid">
<!-- Metadata JSON -->
<div class="dropzone-wrapper">
<h3><span style="font-family: 'Arial', sans-serif;">üìÑ</span> Metadata JSON</h3>
<div id="metadata-dropzone" class="dropzone">
<div class="dropzone-icon" style="font-family: 'Arial', sans-serif;">üìÑ</div>
<p class="dropzone-text">Drop metadata.json</p>
<p class="dropzone-subtext">or click to browse</p>
<input type="file" id="metadata-input" accept=".json" style="display: none;">
</div>
<div id="metadata-status" class="hidden"></div>
</div>

<!-- Hotlinks -->
<div class="dropzone-wrapper">
<h3><span style="font-family: 'Arial', sans-serif;">üîó</span> Hotlinks JSON</h3>
<div id="hotlinks-dropzone" class="dropzone">
<div class="dropzone-icon" style="font-family: 'Arial', sans-serif;">üîó</div>
<p class="dropzone-text">Drop hotlinks JSON</p>
<p class="dropzone-subtext">or paste below</p>
<input type="file" id="hotlinks-input" accept=".json" style="display: none;">
</div>
<textarea
id="hotlinks-paste"
class="paste-area"
placeholder="Paste hotlinks code from upload page here..."
></textarea>
<div id="hotlinks-status" class="hidden"></div>
</div>
</div>

<div class="button-row">
<button
onclick="mergeAndPreview()"
id="merge-btn"
class="btn btn-primary"
disabled
>
<span style="font-family: 'Arial', sans-serif;">üîÑ</span> Merge & Preview
</button>
<button
onclick="validateLinks()"
id="validate-btn"
class="btn btn-secondary"
disabled
>
‚úì Validate Links
</button>
</div>

<div id="validation-results" class="hidden"></div>
</div>

<!-- Step 2: Preview (Hidden initially) -->
<div id="preview-section" class="hidden">
<div class="section-card">
<h2 class="section-title"><span style="font-family: 'Arial', sans-serif;">üëÅÔ∏è</span> Preview Release</h2>
<div id="release-preview"></div>

<div class="info-box">
<h3><span style="font-family: 'Arial', sans-serif;">üìã</span> Release Summary</h3>
<div id="release-info"></div>
</div>
</div>

<!-- Step 3: Publish -->
<div class="publish-section">
<h2><span style="font-family: 'Arial', sans-serif;">üöÄ</span> Ready to Publish?</h2>

<div class="input-group">
<label class="input-label">Filename (no spaces or special chars)</label>
<input
type="text"
id="filename-input"
class="text-input"
placeholder="artist-name-release-title"
>
<p class="input-hint">Will be saved as: src/data/releases/[filename].json</p>
</div>

<div class="button-row">
<button
onclick="publishRelease()"
id="publish-btn"
class="btn btn-primary"
disabled
style="font-size: 16px; padding: 15px 30px;"
>
<span style="font-family: 'Arial', sans-serif;">üöÄ</span> Publish to Store
</button>
<button
onclick="editRelease()"
id="edit-btn"
class="btn btn-edit"
disabled
style="font-size: 16px; padding: 15px 30px;"
>
<span style="font-family: 'Arial', sans-serif;">‚úèÔ∏è</span> Edit & Customize
</button>
<button
onclick="downloadJSON()"
class="btn btn-secondary"
>
<span style="font-family: 'Arial', sans-serif;">üíæ</span> Download JSON
</button>
</div>

<p class="warning-text">
<span style="font-family: 'Arial', sans-serif;">‚ÑπÔ∏è</span> After publishing, rebuild your Astro site to see the release live in your store. A backup JSON will also be downloaded.
</p>
</div>
</div>
</div>

<script is:inline>
let currentRelease = null;
let metadataData = null;
let hotlinksData = null;

document.addEventListener('DOMContentLoaded', () => {
setupDropzone('metadata-dropzone', 'metadata-input', handleMetadataFile);
setupDropzone('hotlinks-dropzone', 'hotlinks-input', handleHotlinksFile);

// Handle paste in textarea
document.getElementById('hotlinks-paste').addEventListener('input', (e) => {
const text = e.target.value.trim();
if (text) {
try {
hotlinksData = JSON.parse(text);
showStatus('hotlinks-status', '‚úì Hotlinks loaded from paste', 'success');
checkIfReadyToMerge();
} catch (err) {
try {
const startIndex = text.indexOf('{');
const endIndex = text.lastIndexOf('}');
if (startIndex === -1 || endIndex === -1) {
throw new Error('No object found');
}

let objStr = text.substring(startIndex, endIndex + 1);
objStr = objStr.replace(/\/\/[^\n]*/g, '');
objStr = objStr.replace(/\/\*[\s\S]*?\*\//g, '');
objStr = objStr.replace(/,(\s*[}\]])/g, '$1');

try {
hotlinksData = (new Function('return ' + objStr))();
} catch (evalErr) {
throw new Error('Invalid JavaScript object');
}

if (!hotlinksData.artwork && !hotlinksData.previews && !hotlinksData.fullTracks) {
throw new Error('Invalid structure');
}

showStatus('hotlinks-status', '‚úì Hotlinks loaded from JavaScript format', 'success');
checkIfReadyToMerge();
} catch (err2) {
showStatus('hotlinks-status', '‚úó Invalid format - paste the full hotlinks code', 'error');
}
}
}
});
});

function setupDropzone(dropzoneId, inputId, handler) {
const dropzone = document.getElementById(dropzoneId);
const input = document.getElementById(inputId);

dropzone.addEventListener('click', () => input.click());

dropzone.addEventListener('dragover', (e) => {
e.preventDefault();
dropzone.style.background = '#f0f0f0';
});

dropzone.addEventListener('dragleave', () => {
dropzone.style.background = '#fff';
});

dropzone.addEventListener('drop', (e) => {
e.preventDefault();
dropzone.style.background = '#fff';
if (e.dataTransfer.files.length) {
handler(e.dataTransfer.files[0]);
}
});

input.addEventListener('change', (e) => {
if (e.target.files.length) {
handler(e.target.files[0]);
}
});
}

async function handleMetadataFile(file) {
if (!file.name.endsWith('.json')) {
showStatus('metadata-status', '‚úó Please upload a .json file', 'error');
return;
}

try {
const text = await file.text();
metadataData = JSON.parse(text);
showStatus('metadata-status', `‚úì Loaded: ${file.name}`, 'success');
checkIfReadyToMerge();
} catch (err) {
showStatus('metadata-status', '‚úó Invalid JSON format', 'error');
metadataData = null;
}
}

async function handleHotlinksFile(file) {
if (!file.name.endsWith('.json')) {
showStatus('hotlinks-status', '‚úó Please upload a .json file', 'error');
return;
}

try {
const text = await file.text();
hotlinksData = JSON.parse(text);
document.getElementById('hotlinks-paste').value = text;
showStatus('hotlinks-status', `‚úì Loaded: ${file.name}`, 'success');
checkIfReadyToMerge();
} catch (err) {
showStatus('hotlinks-status', '‚úó Invalid JSON format', 'error');
hotlinksData = null;
}
}

function showStatus(elementId, message, type) {
const element = document.getElementById(elementId);
element.classList.remove('hidden');
element.className = `status-message status-${type}`;
element.textContent = message;
}

function checkIfReadyToMerge() {
const mergeBtn = document.getElementById('merge-btn');
const validateBtn = document.getElementById('validate-btn');

if (metadataData && hotlinksData) {
mergeBtn.disabled = false;
validateBtn.disabled = false;
} else {
mergeBtn.disabled = true;
validateBtn.disabled = true;
}
}

function mergeAndPreview() {
if (!metadataData || !hotlinksData) {
alert('Please upload both metadata and hotlinks first!');
return;
}

try {
// Extract track names safely
let trackNames = [];
if (metadataData.trackListing && typeof metadataData.trackListing === 'string') {
trackNames = metadataData.trackListing
.split('\n')
.map(t => t.trim())
.filter(t => t.length > 0);
} else if (Array.isArray(metadataData.trackListing)) {
trackNames = metadataData.trackListing;
} else if (Array.isArray(metadataData.tracks)) {
trackNames = metadataData.tracks.map(t => t.title || t);
} else {
const trackCount = hotlinksData.previews?.length || Math.floor((hotlinksData.fullTracks?.length || 0) / 2) || 0;
trackNames = Array.from({ length: trackCount }, (_, i) => `Track ${i + 1}`);
}

// Check if preorder
const releaseDate = new Date(metadataData.releaseDate || metadataData.officialReleaseDate);
const today = new Date();
const isPreorder = releaseDate > today;

// Create tracks array
const tracks = trackNames.map((trackName, i) => ({
id: `track-${String(i + 1).padStart(3, '0')}`,
title: trackName,
preview_url: hotlinksData.previews?.[i] || null,
track_number: i + 1
}));

// Generate release ID
const releaseId = `release-${Date.now()}`;

// Merge all data
currentRelease = {
id: releaseId,
title: metadataData.releaseName || metadataData.title || "Untitled Release",
artist: metadataData.artistName || metadataData.artist || "Unknown Artist",
label: metadataData.labelName || metadataData.label || "",
artworkUrl: hotlinksData.artwork?.[0] || "",
releaseDate: metadataData.releaseDate || metadataData.officialReleaseDate || new Date().toISOString().split('T')[0],
isPreorder: isPreorder,
hasVinyl: metadataData.vinylRelease || false,
vinylStock: parseInt(metadataData.vinylRecordCount) || 0,
digitalPrice: parseFloat(metadataData.pricePerSale || metadataData.digitalPrice) || 7.99,
vinylPrice: parseFloat(metadataData.vinylPrice) || 0,
tracks: tracks,
fullTracks: hotlinksData.fullTracks || [],
metadata: hotlinksData.metadata || "",
extraNotes: metadataData.notes || "",
description: metadataData.description || "",
genre: metadataData.genre || metadataData.customGenre || "",
trackPrice: parseFloat(metadataData.trackPrice) || 1.00,
hasLimitedEdition: metadataData.hasLimitedEdition || false,
limitedEditionType: metadataData.limitedEditionType || "",
limitedEditionPrice: parseFloat(metadataData.limitedEditionPrice) || 0,
limitedEditionDetails: metadataData.limitedEditionDetails || ""
};

// Generate filename
const filename = `${currentRelease.artist}-${currentRelease.title}`
.toLowerCase()
.replace(/[^a-z0-9]+/g, '-')
.replace(/^-|-$/g, '');

document.getElementById('filename-input').value = filename;

// Show preview
document.getElementById('preview-section').classList.remove('hidden');
renderPreview(currentRelease);
showReleaseInfo(currentRelease);

// Enable buttons
document.getElementById('publish-btn').disabled = false;
document.getElementById('edit-btn').disabled = false;

// Scroll to preview
document.getElementById('preview-section').scrollIntoView({ behavior: 'smooth', block: 'start' });
} catch (err) {
alert('Error merging data: ' + err.message);
console.error('Merge error:', err);
}
}

function renderPreview(release) {
const previewContainer = document.getElementById('release-preview');
const formattedDate = new Date(release.releaseDate).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' });
const vinylAvailable = release.hasVinyl && release.vinylStock > 0;
const initialTracksDesktop = 2;
const initialTracksMobile = 2;
const trackPrice = release.trackPrice || 1.00;
    
const html = `
<article style="background: white; border-radius: 0.5rem; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); overflow: hidden;">
<!-- Mobile Layout -->
<div style="display: block;">
<div style="position: relative; width: 100%;">
<img src="${release.artworkUrl}" alt="${release.title} by ${release.artist}" style="width: 100%; aspect-ratio: 1; object-fit: cover;" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 400 400%22%3E%3Crect fill=%22%23ddd%22 width=%22400%22 height=%22400%22/%3E%3Ctext x=%2250%25%22 y=%2250%25%22 text-anchor=%22middle%22 dy=%22.3em%22 fill=%22%23666%22 font-size=%2224%22%3ENo Image%3C/text%3E%3C/svg%3E'" />
<div style="position: absolute; bottom: 0; left: 0; right: 0; padding: 0.75rem; background: linear-gradient(to top, rgba(0,0,0,0.8), transparent); display: flex; gap: 0.5rem; justify-content: center;">
<button style="background: #3b82f6; color: white; padding: 0.5rem 0.75rem; border-radius: 0.5rem; display: inline-flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; font-weight: 600; border: none; cursor: pointer; transition: background 0.2s;">
<svg style="width: 1rem; height: 1rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
</svg>
¬£${release.digitalPrice.toFixed(2)}
</button>
${release.hasVinyl ? `
<button ${!vinylAvailable ? 'disabled' : ''} style="background: ${vinylAvailable ? '#a855f7' : '#9ca3af'}; color: ${vinylAvailable ? 'white' : '#d1d5db'}; padding: 0.5rem 0.75rem; border-radius: 0.5rem; display: inline-flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; font-weight: 600; border: none; ${vinylAvailable ? 'cursor: pointer;' : 'cursor: not-allowed;'} transition: background 0.2s;">
<svg style="width: 1rem; height: 1rem;" fill="currentColor" viewBox="0 0 24 24">
<circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="1.5"/>
<circle cx="12" cy="12" r="6" fill="none" stroke="currentColor" stroke-width="1.5"/>
<circle cx="12" cy="12" r="2" fill="currentColor"/>
</svg>
${vinylAvailable ? `¬£${release.vinylPrice.toFixed(2)}` : 'Sold Out'}
</button>
` : ''}
</div>
</div>
<div style="padding: 1rem;">
<div style="margin-bottom: 0.75rem;">
<h3 style="font-size: 1.25rem; font-weight: 700; color: #111827; margin-bottom: 0.25rem; line-height: 1.375;">${release.title}</h3>
<p style="font-size: 1rem; color: #4b5563; margin-bottom: 0.25rem;">${release.artist}</p>
${release.label ? `<p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.5rem;">${release.label}</p>` : ''}
<div style="display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap;">
${release.isPreorder ? '<span style="display: inline-block; background: #fed7aa; color: #9a3412; font-size: 0.75rem; font-weight: 600; padding: 0.125rem 0.5rem; border-radius: 0.25rem;">Pre-order</span>' : ''}
<span style="font-size: 0.75rem; color: #6b7280;">${release.isPreorder ? `Ships ${formattedDate}` : formattedDate}</span>
${vinylAvailable && release.vinylStock <= 5 ? `<span style="display: inline-block; background: #fecaca; color: #991b1b; font-size: 0.75rem; font-weight: 600; padding: 0.125rem 0.5rem; border-radius: 0.25rem;">Only ${release.vinylStock} left</span>` : ''}
${release.hasVinyl && vinylAvailable ? '<span style="display: inline-block; background: #e9d5ff; color: #6b21a8; font-size: 0.75rem; font-weight: 600; padding: 0.125rem 0.5rem; border-radius: 0.25rem;">Vinyl includes digital</span>' : ''}
</div>
</div>
${release.extraNotes ? `<div style="margin-bottom: 0.75rem; padding: 0.5rem; background: #dbeafe; border-left: 4px solid #3b82f6; border-radius: 0.25rem;"><p style="font-size: 0.75rem; color: #1e3a8a;">${release.extraNotes}</p></div>` : ''}
${release.tracks.length > 0 ? `
<div style="margin-top: 0.75rem;">
<div style="display: flex; flex-direction: column; gap: 0.5rem;">
${release.tracks.slice(0, initialTracksMobile).map(track => `
<div style="display: flex; align-items: center; gap: 0.5rem; background: #f9fafb; border-radius: 0.25rem; padding: 0.5rem;">
<span style="font-size: 0.75rem; font-weight: 600; color: #6b7280; width: 1.25rem; flex-shrink: 0;">${track.track_number}.</span>
<p style="font-size: 0.75rem; font-weight: 500; color: #111827; flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${track.title}">${track.title}</p>
<button style="flex-shrink: 0; display: flex; align-items: center; justify-content: center; width: 1.5rem; height: 1.5rem; border-radius: 0.25rem; background: #3b82f6; color: white; border: none; cursor: pointer; transition: background 0.2s;" title="Play">
<svg style="width: 1rem; height: 1rem;" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
</button>
<div style="width: 6rem; flex-shrink: 0; height: 2rem; background: #e5e7eb; border-radius: 0.25rem;"></div>
<button style="flex-shrink: 0; background: #22c55e; color: white; font-size: 0.75rem; font-weight: 700; padding: 0.375rem 0.625rem; border-radius: 0.25rem; white-space: nowrap; margin-left: 0.25rem; border: none; cursor: pointer; transition: background 0.2s;" title="Buy track">
¬£${trackPrice.toFixed(2)}
</button>
</div>
`).join('')}
</div>
${release.tracks.length > initialTracksMobile ? `
<details style="margin-top: 0.5rem;">
<summary style="cursor: pointer; font-size: 0.75rem; color: #2563eb; font-weight: 600; padding: 0.5rem; background: #f9fafb; border-radius: 0.25rem; list-style: none;">
+ Show ${release.tracks.length - initialTracksMobile} more track${release.tracks.length - initialTracksMobile !== 1 ? 's' : ''}
</summary>
<div style="display: flex; flex-direction: column; gap: 0.5rem; margin-top: 0.5rem;">
${release.tracks.slice(initialTracksMobile).map(track => `
<div style="display: flex; align-items: center; gap: 0.5rem; background: #f9fafb; border-radius: 0.25rem; padding: 0.5rem;">
<span style="font-size: 0.75rem; font-weight: 600; color: #6b7280; width: 1.25rem; flex-shrink: 0;">${track.track_number}.</span>
<p style="font-size: 0.75rem; font-weight: 500; color: #111827; flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${track.title}">${track.title}</p>
<button style="flex-shrink: 0; display: flex; align-items: center; justify-content: center; width: 1.5rem; height: 1.5rem; border-radius: 0.25rem; background: #3b82f6; color: white; border: none; cursor: pointer; transition: background 0.2s;" title="Play">
<svg style="width: 1rem; height: 1rem;" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
</button>
<div style="width: 6rem; flex-shrink: 0; height: 2rem; background: #e5e7eb; border-radius: 0.25rem;"></div>
<button style="flex-shrink: 0; background: #22c55e; color: white; font-size: 0.75rem; font-weight: 700; padding: 0.375rem 0.625rem; border-radius: 0.25rem; white-space: nowrap; margin-left: 0.25rem; border: none; cursor: pointer; transition: background 0.2s;" title="Buy track">
¬£${trackPrice.toFixed(2)}
</button>
</div>
`).join('')}
</div>
</details>
` : ''}
</div>
` : ''}
</div>
</div>

<!-- Desktop Layout -->
<div style="display: none;">
<div style="position: relative; width: 16rem; height: 16rem; flex-shrink: 0;">
<img src="${release.artworkUrl}" alt="${release.title} by ${release.artist}" style="width: 100%; height: 100%; object-fit: cover;" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 400 400%22%3E%3Crect fill=%22%23ddd%22 width=%22400%22 height=%22400%22/%3E%3Ctext x=%2250%25%22 y=%2250%25%22 text-anchor=%22middle%22 dy=%22.3em%22 fill=%22%23666%22 font-size=%2224%22%3ENo Image%3C/text%3E%3C/svg%3E'" />
<div style="position: absolute; bottom: 0; left: 0; right: 0; padding: 0.75rem; background: linear-gradient(to top, rgba(0,0,0,0.7), transparent); display: flex; gap: 0.5rem; justify-content: center;">
<button style="background: #3b82f6; color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; display: inline-flex; align-items: center; gap: 0.5rem; border: none; cursor: pointer; transition: background 0.2s;">
<svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
</svg>
<span style="font-size: 0.875rem; font-weight: 600;">¬£${release.digitalPrice.toFixed(2)}</span>
</button>
${release.hasVinyl ? `
<button ${!vinylAvailable ? 'disabled' : ''} style="background: ${vinylAvailable ? '#a855f7' : '#9ca3af'}; color: ${vinylAvailable ? 'white' : '#d1d5db'}; padding: 0.5rem 1rem; border-radius: 0.5rem; display: inline-flex; align-items: center; gap: 0.5rem; border: none; ${vinylAvailable ? 'cursor: pointer;' : 'cursor: not-allowed;'} transition: background 0.2s;">
<svg style="width: 1.25rem; height: 1.25rem;" fill="currentColor" viewBox="0 0 24 24">
<circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="1.5"/>
<circle cx="12" cy="12" r="6" fill="none" stroke="currentColor" stroke-width="1.5"/>
<circle cx="12" cy="12" r="2" fill="currentColor"/>
</svg>
<span style="font-size: 0.875rem; font-weight: 600;">${vinylAvailable ? `¬£${release.vinylPrice.toFixed(2)}` : 'Sold Out'}</span>
</button>
` : ''}
</div>
</div>
<div style="flex: 1; padding: 1.5rem; display: flex; flex-direction: column;">
<div style="margin-bottom: 0.75rem;">
<h3 style="font-size: 1.5rem; font-weight: 700; color: #111827; margin-bottom: 0.25rem;">${release.title}</h3>
<p style="font-size: 1.125rem; color: #4b5563; margin-bottom: 0.25rem;">${release.artist}</p>
${release.label ? `<p style="font-size: 1rem; color: #6b7280; margin-bottom: 0.5rem;">${release.label}</p>` : ''}
<div style="display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap;">
${release.isPreorder ? '<span style="display: inline-block; background: #fed7aa; color: #9a3412; font-size: 0.75rem; font-weight: 600; padding: 0.25rem 0.625rem; border-radius: 0.25rem;">Pre-order</span>' : ''}
<span style="font-size: 0.875rem; color: #6b7280;">${release.isPreorder ? `Ships ${formattedDate}` : formattedDate}</span>
${vinylAvailable && release.vinylStock <= 5 ? `<span style="display: inline-block; background: #fecaca; color: #991b1b; font-size: 0.75rem; font-weight: 600; padding: 0.25rem 0.625rem; border-radius: 0.25rem;">Only ${release.vinylStock} left</span>` : ''}
${release.hasVinyl && vinylAvailable ? '<span style="display: inline-block; background: #e9d5ff; color: #6b21a8; font-size: 0.75rem; font-weight: 600; padding: 0.25rem 0.625rem; border-radius: 0.25rem;">Vinyl includes digital</span>' : ''}
</div>
</div>
${release.extraNotes ? `<div style="margin-bottom: 0.75rem; padding: 0.75rem; background: #dbeafe; border-left: 4px solid #3b82f6; border-radius: 0.25rem;"><p style="font-size: 0.875rem; color: #1e3a8a;">${release.extraNotes}</p></div>` : ''}
${release.tracks.length > 0 ? `
<div style="flex: 1; display: flex; flex-direction: column;">
<div style="display: flex; flex-direction: column; gap: 0.5rem;">
${release.tracks.slice(0, initialTracksDesktop).map(track => `
<div style="display: flex; align-items: center; gap: 0.75rem; background: #f9fafb; border-radius: 0.25rem; padding: 0.5rem;">
<span style="font-size: 0.875rem; font-weight: 600; color: #6b7280; width: 1.5rem; flex-shrink: 0;">${track.track_number}.</span>
<p style="font-size: 0.875rem; font-weight: 500; color: #111827; flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${track.title}">${track.title}</p>
<button style="flex-shrink: 0; display: flex; align-items: center; justify-content: center; width: 1.75rem; height: 1.75rem; border-radius: 0.25rem; background: #3b82f6; color: white; border: none; cursor: pointer; transition: background 0.2s;" title="Play">
<svg style="width: 1rem; height: 1rem;" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
</button>
<div style="width: 12rem; flex-shrink: 0; height: 2rem; background: #e5e7eb; border-radius: 0.25rem;"></div>
<button style="flex-shrink: 0; background: #22c55e; color: white; font-size: 0.875rem; font-weight: 700; padding: 0.5rem 1rem; border-radius: 0.25rem; white-space: nowrap; margin-left: 0.5rem; border: none; cursor: pointer; transition: background 0.2s;" title="Buy track">
¬£${trackPrice.toFixed(2)}
</button>
</div>
`).join('')}
</div>
${release.tracks.length > initialTracksDesktop ? `
<details style="margin-top: 0.5rem;">
<summary style="cursor: pointer; font-size: 0.875rem; color: #2563eb; font-weight: 600; padding: 0.5rem; background: #f9fafb; border-radius: 0.25rem; list-style: none;">
+ Show ${release.tracks.length - initialTracksDesktop} more track${release.tracks.length - initialTracksDesktop !== 1 ? 's' : ''}
</summary>
<div style="display: flex; flex-direction: column; gap: 0.5rem; margin-top: 0.5rem;">
${release.tracks.slice(initialTracksDesktop).map(track => `
<div style="display: flex; align-items: center; gap: 0.75rem; background: #f9fafb; border-radius: 0.25rem; padding: 0.5rem;">
<span style="font-size: 0.875rem; font-weight: 600; color: #6b7280; width: 1.5rem; flex-shrink: 0;">${track.track_number}.</span>
<p style="font-size: 0.875rem; font-weight: 500; color: #111827; flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${track.title}">${track.title}</p>
<button style="flex-shrink: 0; display: flex; align-items: center; justify-content: center; width: 1.75rem; height: 1.75rem; border-radius: 0.25rem; background: #3b82f6; color: white; border: none; cursor: pointer; transition: background 0.2s;" title="Play">
<svg style="width: 1rem; height: 1rem;" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
</button>
<div style="width: 12rem; flex-shrink: 0; height: 2rem; background: #e5e7eb; border-radius: 0.25rem;"></div>
<button style="flex-shrink: 0; background: #22c55e; color: white; font-size: 0.875rem; font-weight: 700; padding: 0.5rem 1rem; border-radius: 0.25rem; white-space: nowrap; margin-left: 0.5rem; border: none; cursor: pointer; transition: background 0.2s;" title="Buy track">
¬£${trackPrice.toFixed(2)}
</button>
</div>
`).join('')}
</div>
</details>
` : ''}
</div>
` : ''}
</div>
</div>
</article>

<style>
@media (min-width: 640px) {
article > div:first-child { display: none !important; }
article > div:last-child { display: flex !important; }
}
</style>
`;

previewContainer.innerHTML = html;
}

function showReleaseInfo(release) {
const infoContainer = document.getElementById('release-info');
const info = `
<p><strong>ID:</strong> ${release.id}</p>
<p><strong>Artist:</strong> ${release.artist}</p>
<p><strong>Title:</strong> ${release.title}</p>
<p><strong>Tracks:</strong> ${release.tracks.length}</p>
<p><strong>Digital Price:</strong> ¬£${release.digitalPrice.toFixed(2)}</p>
${release.hasVinyl ? `<p><strong>Vinyl Price:</strong> ¬£${release.vinylPrice.toFixed(2)} (Stock: ${release.vinylStock})</p>` : ''}
<p><strong>Genre:</strong> ${release.genre || 'Not specified'}</p>
<p><strong>Release Date:</strong> ${new Date(release.releaseDate).toLocaleDateString()}</p>
`;
infoContainer.innerHTML = info;
}

async function validateLinks() {
if (!currentRelease) {
alert('Please merge data first!');
return;
}

const resultsDiv = document.getElementById('validation-results');
resultsDiv.classList.remove('hidden');
resultsDiv.innerHTML = '<div class="status-message status-info"><span style="font-family: \'Arial\', sans-serif;">üîç</span> Validating links...</div>';

const checks = [];

// Check artwork
if (currentRelease.artworkUrl) {
checks.push(checkUrl(currentRelease.artworkUrl, 'Artwork'));
}

// Check previews
currentRelease.tracks.forEach((track, i) => {
if (track.preview_url) {
checks.push(checkUrl(track.preview_url, `Preview ${i + 1}`));
}
});

// Check full tracks
if (currentRelease.fullTracks && currentRelease.fullTracks.length > 0) {
currentRelease.fullTracks.forEach((url, i) => {
if (url) {
checks.push(checkUrl(url, `Full Track ${i + 1}`));
}
});
}

try {
const results = await Promise.all(checks);
const passed = results.filter(r => r.status === 'ok').length;
const failed = results.filter(r => r.status === 'error').length;

let html = `<div class="status-message status-success">‚úì Validation Complete: ${passed} passed, ${failed} failed</div>`;

if (failed > 0) {
html += '<div style="margin-top: 12px; padding: 12px; border: 3px solid #000; background: #fff;">';
html += '<p style="font-weight: 900; margin-bottom: 8px;"><span style="font-family: \'Arial\', sans-serif;">‚ö†Ô∏è</span> Failed URLs:</p>';
results.filter(r => r.status === 'error').forEach(r => {
html += `<p style="font-size: 12px; color: #666; margin-bottom: 4px;">‚Ä¢ ${r.label}: ${r.message}</p>`;
});
html += '</div>';
}

resultsDiv.innerHTML = html;
} catch (err) {
resultsDiv.innerHTML = '<div class="status-message status-error">‚úó Validation failed</div>';
}
}

async function checkUrl(url, label) {
try {
const response = await fetch(url, { method: 'HEAD', mode: 'no-cors' });
return { status: 'ok', label, url };
} catch (err) {
return { status: 'error', label, url, message: 'Cannot reach URL' };
}
}

async function publishRelease() {
const filename = document.getElementById('filename-input').value.trim();

if (!filename) {
alert('Please enter a filename!');
return;
}

if (!currentRelease) {
alert('No release data to publish!');
return;
}

// Validate required fields
if (!currentRelease.title || !currentRelease.artist) {
alert('Missing required fields: Title and Artist');
return;
}

// Disable publish button while processing
const publishBtn = document.getElementById('publish-btn');
const originalText = publishBtn.innerHTML;
publishBtn.disabled = true;
publishBtn.innerHTML = '<span class="spinner"></span> Publishing...';

try {
// Add filename to release data
const releaseWithFilename = {
...currentRelease,
filename: filename
};

// Call API to save release
const response = await fetch('/api/save-release', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify(releaseWithFilename)
});

const result = await response.json();

if (response.ok && result.success) {
alert(`‚úÖ Success!\n\n${result.message}\n\nFile saved: ${result.filename}\nAction: ${result.action}`);

// Also download as backup
downloadJSON();

// Clear sessionStorage draft if it exists
sessionStorage.removeItem('freshwax-release-draft');
} else {
throw new Error(result.error || 'Failed to publish release');
}
} catch (error) {
console.error('Publish error:', error);
alert(`‚ùå Error publishing release:\n\n${error.message}\n\nDownloading JSON as fallback...`);
downloadJSON();
} finally {
// Re-enable button
publishBtn.disabled = false;
publishBtn.innerHTML = originalText;
}
}

function editRelease() {
if (!currentRelease) {
alert('No release data to edit!');
return;
}

// Store release data in sessionStorage so edit page can access it
sessionStorage.setItem('freshwax-release-draft', JSON.stringify(currentRelease));

// Navigate to editor
window.location.href = '/admin/edit-release';
}

function downloadJSON() {
if (!currentRelease) {
alert('No release data loaded!');
return;
}

const filename = document.getElementById('filename-input').value.trim() || 'release';
const jsonString = JSON.stringify(currentRelease, null, 2);
const blob = new Blob([jsonString], { type: 'application/json' });
const url = URL.createObjectURL(blob);

const a = document.createElement('a');
a.href = url;
a.download = `${filename}.json`;
document.body.appendChild(a);
a.click();
document.body.removeChild(a);
URL.revokeObjectURL(url);
}
</script>
</Layout>