---
// src/pages/admin/releases/manage.astro
// UPDATED VERSION - Uses Cloudinary for master JSON (matches DJ mixes)
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Releases Management - Fresh Wax Admin</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
      background: #ffffff;
      min-height: 100vh;
    }

    .admin-logo-header {
      background: #000;
      padding: 20px;
      margin-bottom: 30px;
      display: flex;
      justify-content: center;
      border: 3px solid #000;
    }

    .admin-logo {
      height: 80px;
      width: auto;
      background: #fff;
      padding: 10px 20px;
    }

    .admin-container { 
      max-width: 1400px; 
      margin: 0 auto; 
      padding: 20px; 
      background: #ffffff;
    }
    
    .admin-header {
      background: #fff;
      padding: 30px;
      margin-bottom: 30px;
      border: 3px solid #000;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }

    .admin-header h1 {
      font-size: 32px;
      color: #000;
      margin: 0;
      font-weight: 900;
      text-transform: uppercase;
    }

    .admin-back-btn {
      padding: 12px 24px;
      background: #000;
      color: white;
      border: 3px solid #000;
      font-size: 14px;
      font-weight: 700;
      cursor: pointer;
      text-decoration: none;
      text-transform: uppercase;
      transition: all 0.2s;
    }

    .admin-back-btn:hover {
      background: #fff;
      color: #000;
      transform: translate(-4px, -4px);
      box-shadow: 8px 8px 0 #000;
    }

    .admin-toolbar {
      background: #fff;
      padding: 20px;
      margin-bottom: 20px;
      border: 3px solid #000;
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      align-items: center;
    }

    .admin-search {
      flex: 1;
      min-width: 250px;
      padding: 12px;
      border: 3px solid #000;
      font-size: 14px;
      font-weight: 600;
    }

    .admin-btn-refresh {
      padding: 12px 24px;
      background: #000;
      color: white;
      border: 3px solid #000;
      font-size: 14px;
      font-weight: 700;
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s;
    }

    .admin-btn-refresh:hover {
      background: #fff;
      color: #000;
    }

    .admin-releases-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 25px;
      margin-bottom: 30px;
    }

    .admin-release-card {
      background: #fff;
      border: 3px solid #000;
      overflow: hidden;
      transition: all 0.2s;
      cursor: pointer;
    }

    .admin-release-card:hover {
      transform: translate(-4px, -4px);
      box-shadow: 8px 8px 0 #000;
    }

    .admin-release-artwork-container {
      width: 100%;
      height: 300px;
      border-bottom: 3px solid #000;
      background: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    .admin-release-artwork {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .admin-release-artwork-placeholder {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, #e0e0e0 0%, #f5f5f5 100%);
      font-size: 48px;
      color: #999;
    }

    .admin-release-content {
      padding: 20px;
    }

    .admin-release-title {
      font-size: 18px;
      font-weight: 900;
      margin-bottom: 5px;
      text-transform: uppercase;
    }

    .admin-release-artist {
      font-size: 14px;
      color: #666;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .admin-release-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 15px;
      padding-top: 15px;
      border-top: 2px solid #000;
    }

    .admin-release-price {
      font-size: 20px;
      font-weight: 900;
    }

    .admin-release-status {
      padding: 4px 10px;
      background: #000;
      color: #fff;
      font-size: 11px;
      font-weight: 700;
      text-transform: uppercase;
    }

    .admin-release-actions {
      display: flex;
      gap: 8px;
      margin-top: 15px;
    }

    .admin-btn-edit, .admin-btn-delete {
      flex: 1;
      padding: 10px;
      font-weight: 700;
      text-transform: uppercase;
      font-size: 12px;
      cursor: pointer;
      border: 2px solid #000;
      transition: all 0.2s;
    }

    .admin-btn-edit {
      background: #000;
      color: #fff;
    }

    .admin-btn-delete {
      background: #fff;
      color: #000;
    }

    .admin-btn-edit:hover, .admin-btn-delete:hover {
      transform: scale(1.05);
    }

    .admin-modal-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.8);
      z-index: 1000;
      padding: 20px;
      overflow-y: auto;
    }

    .admin-modal-overlay.active {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .admin-modal {
      background: #fff;
      border: 3px solid #000;
      max-width: 800px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
    }

    .admin-modal-header {
      background: #000;
      color: #fff;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .admin-modal-header h2 {
      margin: 0;
      font-size: 24px;
      font-weight: 900;
      text-transform: uppercase;
    }

    .admin-modal-close {
      background: none;
      border: none;
      color: #fff;
      font-size: 30px;
      cursor: pointer;
      line-height: 1;
    }

    .admin-modal-body {
      padding: 30px;
      background: #fff;
    }

    .admin-form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 20px;
    }

    .admin-form-group {
      margin-bottom: 20px;
    }

    .admin-form-group.full-width {
      grid-column: 1 / -1;
    }

    .admin-form-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 700;
      text-transform: uppercase;
      font-size: 12px;
      letter-spacing: 0.5px;
      color: #000;
    }

    .admin-form-input, .admin-form-textarea {
      width: 100%;
      padding: 12px;
      border: 3px solid #000;
      font-size: 14px;
      font-weight: 600;
      background: #fff;
    }

    .admin-form-textarea {
      min-height: 100px;
      resize: vertical;
      font-family: inherit;
    }

    .admin-form-actions {
      display: flex;
      gap: 12px;
      margin-top: 30px;
    }

    .admin-btn-primary {
      flex: 1;
      padding: 15px;
      background: #000;
      color: #fff;
      border: 3px solid #000;
      font-weight: 700;
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s;
    }

    .admin-btn-primary:hover:not(:disabled) {
      background: #fff;
      color: #000;
      transform: translate(-4px, -4px);
      box-shadow: 8px 8px 0 #000;
    }

    .admin-btn-primary:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .admin-btn-secondary {
      flex: 1;
      padding: 15px;
      background: #fff;
      color: #000;
      border: 3px solid #000;
      font-weight: 700;
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s;
    }

    .admin-loading {
      text-align: center;
      padding: 60px;
      background: #fff;
      border: 3px solid #000;
    }

    .admin-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid #e0e0e0;
      border-top: 3px solid #000;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .admin-empty-state {
      text-align: center;
      padding: 80px 20px;
      background: #fff;
      border: 3px solid #000;
    }

    .admin-empty-state h3 {
      font-size: 24px;
      font-weight: 900;
      margin-bottom: 10px;
    }

    .success-message {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #000;
      color: #fff;
      padding: 15px 25px;
      border: 3px solid #000;
      font-weight: 700;
      z-index: 2000;
      animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
      from {
        transform: translateX(400px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @media (max-width: 768px) {
      .admin-container { padding: 15px; }
      .admin-logo { height: 60px; }
      .admin-header { flex-direction: column; align-items: flex-start; }
      .admin-header h1 { font-size: 24px; }
      .admin-releases-grid { grid-template-columns: 1fr; }
      .admin-form-row { grid-template-columns: 1fr; }
    }
  </style>
</head>
<body>
  <!-- Logo Header -->
  <div class="admin-logo-header">
    <img src="/logo.webp" alt="Fresh Wax" class="admin-logo" onerror="this.style.display='none'">
  </div>

  <div class="admin-container">
    <!-- Header -->
    <div class="admin-header">
      <h1>üéµ Releases Management</h1>
      <a href="/admin" class="admin-back-btn">‚Üê Dashboard</a>
    </div>

    <!-- Toolbar -->
    <div class="admin-toolbar">
      <input 
        type="text" 
        id="searchInput" 
        class="admin-search" 
        placeholder="Search releases by title or artist..."
      >
      <button id="refreshBtn" class="admin-btn-refresh" onclick="loadReleases()">üîÑ Refresh</button>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="admin-loading">
      <div class="admin-spinner"></div>
      <p>Loading releases from Cloudinary...</p>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="admin-empty-state" style="display: none;">
      <h3>No Releases Found</h3>
      <p>Start by uploading your first release!</p>
    </div>

    <!-- Releases Grid -->
    <div id="releasesGrid" class="admin-releases-grid" style="display: none;">
      <!-- Populated by JavaScript -->
    </div>
  </div>

  <!-- Edit Release Modal -->
  <div id="editModal" class="admin-modal-overlay">
    <div class="admin-modal">
      <div class="admin-modal-header">
        <h2>Edit Release</h2>
        <button class="admin-modal-close" onclick="closeEditModal()">√ó</button>
      </div>
      <div class="admin-modal-body">
        <form id="editForm">
          <input type="hidden" id="editReleaseId">
          
          <div class="admin-form-row">
            <div class="admin-form-group">
              <label class="admin-form-label">Release Title</label>
              <input type="text" id="editTitle" class="admin-form-input" required>
            </div>

            <div class="admin-form-group">
              <label class="admin-form-label">Artist Name</label>
              <input type="text" id="editArtist" class="admin-form-input" required>
            </div>
          </div>

          <div class="admin-form-row">
            <div class="admin-form-group">
              <label class="admin-form-label">Digital Price (¬£)</label>
              <input type="number" id="editDigitalPrice" class="admin-form-input" step="0.01" required>
            </div>

            <div class="admin-form-group">
              <label class="admin-form-label">Track Price (¬£)</label>
              <input type="number" id="editTrackPrice" class="admin-form-input" step="0.01">
            </div>
          </div>

          <div class="admin-form-row">
            <div class="admin-form-group">
              <label class="admin-form-label">Vinyl Price (¬£)</label>
              <input type="number" id="editVinylPrice" class="admin-form-input" step="0.01">
            </div>

            <div class="admin-form-group">
              <label class="admin-form-label">Vinyl Stock</label>
              <input type="number" id="editVinylStock" class="admin-form-input">
            </div>
          </div>

          <div class="admin-form-row">
            <div class="admin-form-group">
              <label class="admin-form-label">Release Date</label>
              <input type="date" id="editReleaseDate" class="admin-form-input">
            </div>

            <div class="admin-form-group">
              <label class="admin-form-label">Genre</label>
              <input type="text" id="editGenre" class="admin-form-input">
            </div>
          </div>

          <div class="admin-form-group full-width">
            <label class="admin-form-label">Description / Notes</label>
            <textarea id="editDescription" class="admin-form-textarea"></textarea>
          </div>

          <div class="admin-form-actions">
            <button type="submit" class="admin-btn-primary" id="saveBtn">Save Changes</button>
            <button type="button" class="admin-btn-secondary" onclick="closeEditModal()">Cancel</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    let allReleases = [];

    // Load releases from Cloudinary
    async function loadReleases() {
      try {
        document.getElementById('loadingState').style.display = 'block';
        document.getElementById('releasesGrid').style.display = 'none';
        document.getElementById('emptyState').style.display = 'none';

        const response = await fetch('/api/manage-releases-cloudinary');
        const data = await response.json();

        allReleases = data.releases || [];
        console.log(`Loaded ${allReleases.length} releases from Cloudinary`);

        document.getElementById('loadingState').style.display = 'none';
        
        if (allReleases.length === 0) {
          document.getElementById('emptyState').style.display = 'block';
        } else {
          document.getElementById('releasesGrid').style.display = 'grid';
          renderReleases();
        }
      } catch (error) {
        console.error('Error loading releases:', error);
        document.getElementById('loadingState').innerHTML = `
          <h3>Error Loading Releases</h3>
          <p>${error.message}</p>
          <button onclick="loadReleases()" class="admin-btn-refresh">Try Again</button>
        `;
      }
    }

    // Render releases
    function renderReleases() {
      const grid = document.getElementById('releasesGrid');
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      
      let filtered = allReleases.filter(release => {
        return (release.title?.toLowerCase().includes(searchTerm) || '') ||
               (release.artist?.toLowerCase().includes(searchTerm) || '');
      });

      if (filtered.length === 0) {
        grid.innerHTML = '<div class="admin-empty-state"><h3>No releases found</h3><p>Try a different search term</p></div>';
        return;
      }

      grid.innerHTML = filtered.map(release => {
        const artworkUrl = release.artworkUrl || release.artwork || '';
        const title = release.title || 'Untitled';
        const artist = release.artist || 'Unknown Artist';
        const price = release.digitalPrice || 0;
        
        return `
          <div class="admin-release-card">
            <div class="admin-release-artwork-container">
              ${artworkUrl ? 
                `<img src="${artworkUrl}" alt="${title}" class="admin-release-artwork" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                 <div class="admin-release-artwork-placeholder" style="display: none;">üéµ</div>` 
                : 
                `<div class="admin-release-artwork-placeholder">üéµ</div>`
              }
            </div>
            <div class="admin-release-content">
              <div class="admin-release-title">${title}</div>
              <div class="admin-release-artist">${artist}</div>
              <div class="admin-release-meta">
                <div class="admin-release-price">¬£${price.toFixed(2)}</div>
                <div class="admin-release-status">${release.isPreorder ? 'Pre-order' : 'Available'}</div>
              </div>
              <div class="admin-release-actions">
                <button class="admin-btn-edit" onclick="editRelease('${release.id}')">‚úèÔ∏è Edit</button>
                <button class="admin-btn-delete" onclick="deleteRelease('${release.id}')">üóëÔ∏è Delete</button>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // Edit release
    window.editRelease = function(releaseId) {
      const release = allReleases.find(r => r.id === releaseId);
      if (!release) return;

      document.getElementById('editReleaseId').value = release.id;
      document.getElementById('editTitle').value = release.title || '';
      document.getElementById('editArtist').value = release.artist || '';
      document.getElementById('editDigitalPrice').value = release.digitalPrice || 0;
      document.getElementById('editTrackPrice').value = release.trackPrice || 0;
      document.getElementById('editVinylPrice').value = release.vinylPrice || 0;
      document.getElementById('editVinylStock').value = release.vinylStock || 0;
      document.getElementById('editReleaseDate').value = release.releaseDate || '';
      document.getElementById('editGenre').value = release.genre || '';
      document.getElementById('editDescription').value = release.description || release.extraNotes || '';

      document.getElementById('editModal').classList.add('active');
    };

    window.closeEditModal = function() {
      document.getElementById('editModal').classList.remove('active');
    };

    // Save release changes
    document.getElementById('editForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const saveBtn = document.getElementById('saveBtn');
      const originalText = saveBtn.textContent;
      saveBtn.disabled = true;
      saveBtn.textContent = 'Saving...';

      const releaseId = document.getElementById('editReleaseId').value;
      const release = allReleases.find(r => r.id === releaseId);
      
      if (!release) {
        alert('Release not found');
        saveBtn.disabled = false;
        saveBtn.textContent = originalText;
        return;
      }

      const updates = {
        title: document.getElementById('editTitle').value,
        artist: document.getElementById('editArtist').value,
        digitalPrice: parseFloat(document.getElementById('editDigitalPrice').value),
        trackPrice: parseFloat(document.getElementById('editTrackPrice').value) || 1.00,
        vinylPrice: parseFloat(document.getElementById('editVinylPrice').value) || 0,
        vinylStock: parseInt(document.getElementById('editVinylStock').value) || 0,
        releaseDate: document.getElementById('editReleaseDate').value,
        genre: document.getElementById('editGenre').value,
        description: document.getElementById('editDescription').value,
        extraNotes: document.getElementById('editDescription').value,
      };

      try {
        const response = await fetch('/api/manage-releases-cloudinary', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: releaseId, updates })
        });

        const result = await response.json();

        if (response.ok && result.success) {
          showSuccessMessage('Release updated in Cloudinary!');
          closeEditModal();
          await loadReleases();
        } else {
          throw new Error(result.error || 'Failed to update release');
        }
      } catch (error) {
        console.error('Error updating release:', error);
        alert('Failed to update release: ' + error.message);
      } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = originalText;
      }
    });

    // Delete release
    window.deleteRelease = async function(releaseId) {
      const release = allReleases.find(r => r.id === releaseId);
      if (!release) return;

      if (!confirm(`Are you sure you want to delete "${release.title}" by ${release.artist}?\n\nThis will remove it from the master JSON in Cloudinary.\nThis cannot be undone.`)) {
        return;
      }

      try {
        const response = await fetch('/api/manage-releases-cloudinary', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: releaseId })
        });

        const result = await response.json();

        if (response.ok && result.success) {
          showSuccessMessage('Release deleted from Cloudinary!');
          await loadReleases();
        } else {
          throw new Error(result.error || 'Failed to delete release');
        }
      } catch (error) {
        console.error('Error deleting release:', error);
        alert('Failed to delete release: ' + error.message);
      }
    };

    function showSuccessMessage(message) {
      const msgEl = document.createElement('div');
      msgEl.className = 'success-message';
      msgEl.textContent = message;
      document.body.appendChild(msgEl);

      setTimeout(() => {
        msgEl.remove();
      }, 3000);
    }

    // Search
    document.getElementById('searchInput').addEventListener('input', renderReleases);

    // Close modal on overlay click
    document.getElementById('editModal').addEventListener('click', (e) => {
      if (e.target.id === 'editModal') closeEditModal();
    });

    // Load releases on page load
    loadReleases();
  </script>
</body>
</html>