---
// src/pages/admin/dj-mix-reports.astro
import Layout from '../../layouts/Layout.astro';
---

<Layout title="DJ Mix Reports - Fresh Wax Admin">
	<style>
		body {
			background: #ffffff;
		}

		.admin-container {
			max-width: 1400px;
			margin: 0 auto;
			padding: 20px;
			background: #ffffff;
		}

		.admin-logo-container {
			background: #ffffff;
			padding: 30px 20px;
			margin-bottom: 30px;
			display: flex;
			justify-content: center;
			align-items: center;
			border: 3px solid #000;
		}

		.admin-logo {
			height: 80px;
			width: auto;
			max-width: 90%;
			display: block;
		}

		.admin-header-card {
			background: #fff;
			padding: 30px;
			margin-bottom: 30px;
			border: 3px solid #000;
			position: relative;
		}

		.admin-header-card::before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			height: 5px;
			background: #000;
		}

		.admin-header-card h1 {
			font-size: 32px;
			color: #000;
			margin-bottom: 10px;
			font-weight: 900;
			letter-spacing: -0.5px;
		}

		.admin-header-card p {
			color: #666;
			font-size: 16px;
		}

		.admin-logout-btn {
			position: absolute;
			top: 20px;
			right: 20px;
			padding: 10px 20px;
			background: #000;
			color: #ffffff;
			border: 3px solid #000;
			font-weight: 700;
			cursor: pointer;
			transition: all 0.2s;
			font-size: 14px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.admin-logout-btn:hover {
			background: #ffffff;
			color: #000;
			transform: translate(-4px, -4px);
			box-shadow: 8px 8px 0 #000;
		}

		.back-btn {
			display: inline-block;
			padding: 10px 20px;
			background: #000;
			color: #ffffff;
			border: 3px solid #000;
			font-weight: 700;
			text-decoration: none;
			transition: all 0.2s;
			margin-bottom: 20px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
			font-size: 14px;
		}

		.back-btn:hover {
			background: #ffffff;
			color: #000;
			transform: translate(-4px, -4px);
			box-shadow: 8px 8px 0 #000;
		}

		.reports-container {
			background: #fff;
			border: 3px solid #000;
			padding: 30px;
			margin-bottom: 30px;
		}

		.reports-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 30px;
			padding-bottom: 20px;
			border-bottom: 3px solid #000;
		}

		.reports-header h2 {
			font-size: 28px;
			font-weight: 900;
			color: #000;
			text-transform: uppercase;
			letter-spacing: 1px;
		}

		.filter-buttons {
			display: flex;
			gap: 10px;
		}

		.filter-btn {
			padding: 10px 20px;
			border: 3px solid #000;
			background: #ffffff;
			color: #000;
			font-weight: 700;
			cursor: pointer;
			transition: all 0.2s;
			text-transform: uppercase;
			letter-spacing: 0.5px;
			font-size: 14px;
		}

		.filter-btn.active {
			background: #000;
			color: #ffffff;
		}

		.filter-btn:hover:not(.active) {
			transform: translate(-2px, -2px);
			box-shadow: 4px 4px 0 #000;
		}

		.filter-btn .badge {
			display: inline-block;
			background: #ff0000;
			color: #ffffff;
			padding: 2px 8px;
			border-radius: 10px;
			font-size: 12px;
			margin-left: 5px;
			font-weight: 900;
		}

		.report-card {
			border: 3px solid #000;
			padding: 25px;
			margin-bottom: 20px;
			background: #ffffff;
			transition: all 0.2s;
		}

		.report-card.pending {
			background: #ffe0e0;
			border-color: #ff0000;
		}

		.report-card:hover {
			transform: translate(-4px, -4px);
			box-shadow: 8px 8px 0 #000;
		}

		.report-header {
			display: flex;
			justify-between;
			align-items: start;
			margin-bottom: 20px;
		}

		.report-info h3 {
			font-size: 20px;
			font-weight: 900;
			color: #000;
			margin-bottom: 8px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		.report-meta {
			color: #666;
			font-size: 14px;
			font-weight: 600;
			margin-bottom: 4px;
		}

		.report-meta strong {
			color: #000;
		}

		.report-actions {
			display: flex;
			gap: 10px;
		}

		.report-btn {
			padding: 8px 16px;
			border: 3px solid #000;
			font-weight: 700;
			cursor: pointer;
			transition: all 0.2s;
			font-size: 12px;
			text-transform: uppercase;
			letter-spacing: 0.5px;
			text-decoration: none;
			display: inline-block;
		}

		.btn-reviewed {
			background: #00cc00;
			color: #ffffff;
		}

		.btn-reviewed:hover {
			background: #ffffff;
			color: #00cc00;
			border-color: #00cc00;
		}

		.btn-delete {
			background: #ff0000;
			color: #ffffff;
		}

		.btn-delete:hover {
			background: #ffffff;
			color: #ff0000;
			border-color: #ff0000;
		}

		.btn-view {
			background: #000;
			color: #ffffff;
		}

		.btn-view:hover {
			background: #ffffff;
			color: #000;
		}

		.report-reason {
			background: #f9f9f9;
			border: 3px solid #000;
			padding: 20px;
			margin-top: 15px;
		}

		.report-reason-title {
			font-size: 12px;
			font-weight: 900;
			color: #666;
			text-transform: uppercase;
			letter-spacing: 1px;
			margin-bottom: 10px;
		}

		.report-reason-text {
			color: #000;
			font-size: 14px;
			line-height: 1.6;
			font-weight: 600;
		}

		.reviewed-tag {
			background: #f9f9f9;
			padding: 10px 15px;
			margin-top: 15px;
			border: 2px solid #000;
			color: #666;
			font-size: 12px;
			font-weight: 700;
		}

		.empty-state {
			text-align: center;
			padding: 60px 20px;
			color: #666;
			font-size: 16px;
			font-weight: 600;
		}

		.loading-state {
			text-align: center;
			padding: 60px 20px;
			color: #000;
			font-size: 16px;
			font-weight: 700;
		}

		.stats-row {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
			gap: 20px;
			margin-bottom: 30px;
		}

		.stat-card {
			background: #fff;
			border: 3px solid #000;
			padding: 20px;
			text-align: center;
		}

		.stat-card.pending {
			background: #ffe0e0;
			border-color: #ff0000;
		}

		.stat-value {
			font-size: 48px;
			font-weight: 900;
			color: #000;
			margin-bottom: 5px;
		}

		.stat-label {
			font-size: 12px;
			font-weight: 700;
			color: #666;
			text-transform: uppercase;
			letter-spacing: 1px;
		}

		@media (max-width: 768px) {
			.reports-header {
				flex-direction: column;
				align-items: flex-start;
				gap: 20px;
			}

			.filter-buttons {
				flex-wrap: wrap;
				width: 100%;
			}

			.filter-btn {
				flex: 1;
				min-width: 100px;
			}

			.report-header {
				flex-direction: column;
				gap: 15px;
			}

			.report-actions {
				flex-wrap: wrap;
				width: 100%;
			}

			.report-btn {
				flex: 1;
			}
		}
	</style>

	<div class="admin-container">
		<!-- Logo Header -->
		<div class="admin-logo-container">
			<img 
				src="/logo.webp" 
				alt="Fresh Wax" 
				class="admin-logo"
				onerror="this.style.display='none'"
			>
		</div>

		<!-- Main Header -->
		<div class="admin-header-card">
			<button class="admin-logout-btn" id="logoutBtn">üö™ Logout</button>
			<h1>üö® DJ Mix Reports</h1>
			<p>Review and manage reported mixes from the community</p>
		</div>

		<a href="/admin" class="back-btn">‚Üê Back to Dashboard</a>

		<!-- Stats Row -->
		<div class="stats-row" id="statsRow">
			<div class="stat-card pending">
				<div class="stat-value" id="pendingCount">0</div>
				<div class="stat-label">Pending Reports</div>
			</div>
			<div class="stat-card">
				<div class="stat-value" id="reviewedCount">0</div>
				<div class="stat-label">Reviewed</div>
			</div>
			<div class="stat-card">
				<div class="stat-value" id="totalCount">0</div>
				<div class="stat-label">Total Reports</div>
			</div>
		</div>

		<!-- Reports Container -->
		<div class="reports-container">
			<div class="reports-header">
				<h2>üìã Reports</h2>
				<div class="filter-buttons">
					<button class="filter-btn active" data-filter="pending" id="filterPending">
						Pending <span class="badge" id="pendingBadge">0</span>
					</button>
					<button class="filter-btn" data-filter="reviewed" id="filterReviewed">Reviewed</button>
					<button class="filter-btn" data-filter="all" id="filterAll">All</button>
				</div>
			</div>

			<div id="reportsContainer">
				<div class="loading-state">Loading reports...</div>
			</div>
		</div>
	</div>

	<script type="module">
		import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
		import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
		import { getFirestore, collection, query, where, getDocs, updateDoc, doc, deleteDoc, orderBy } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

		const firebaseConfig = {
			apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
			authDomain: "freshwax-store.firebaseapp.com",
			projectId: "freshwax-store",
			storageBucket: "freshwax-store.firebasestorage.app",
			messagingSenderId: "675435782973",
			appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
		};

		const app = initializeApp(firebaseConfig);
		const auth = getAuth(app);
		const db = getFirestore(app);

		let currentFilter = 'pending';
		let allReports = [];

		// Auth check
		onAuthStateChanged(auth, (user) => {
			if (user) {
				loadReports();
			} else {
				window.location.href = '/login';
			}
		});

		// Logout
		document.getElementById('logoutBtn').addEventListener('click', async () => {
			await signOut(auth);
			window.location.href = '/login';
		});

		// Filter buttons
		document.querySelectorAll('.filter-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
				btn.classList.add('active');
				currentFilter = btn.dataset.filter;
				renderReports();
			});
		});

		// Load reports
		async function loadReports() {
			try {
				const q = query(collection(db, 'reports'), orderBy('timestamp', 'desc'));
				const snapshot = await getDocs(q);
				
				allReports = snapshot.docs.map(doc => ({
					id: doc.id,
					...doc.data()
				}));

				updateStats();
				renderReports();
			} catch (error) {
				console.error('Error loading reports:', error);
				document.getElementById('reportsContainer').innerHTML = `
					<div class="empty-state">‚ùå Error loading reports</div>
				`;
			}
		}

		// Update stats
		function updateStats() {
			const pending = allReports.filter(r => r.status === 'pending').length;
			const reviewed = allReports.filter(r => r.status === 'reviewed').length;
			
			document.getElementById('pendingCount').textContent = pending;
			document.getElementById('reviewedCount').textContent = reviewed;
			document.getElementById('totalCount').textContent = allReports.length;
			document.getElementById('pendingBadge').textContent = pending;
		}

		// Render reports
		function renderReports() {
			const container = document.getElementById('reportsContainer');
			
			let filteredReports = allReports;
			if (currentFilter !== 'all') {
				filteredReports = allReports.filter(r => r.status === currentFilter);
			}

			if (filteredReports.length === 0) {
				container.innerHTML = `
					<div class="empty-state">
						${currentFilter === 'pending' ? '‚úÖ No pending reports' : 'üì≠ No reports found'}
					</div>
				`;
				return;
			}

			container.innerHTML = filteredReports.map(report => `
				<div class="report-card ${report.status === 'pending' ? 'pending' : ''}">
					<div class="report-header">
						<div class="report-info">
							<h3>${report.djName} - ${report.mixTitle}</h3>
							<p class="report-meta">
								<strong>Reported by:</strong> ${report.reportedBy}
							</p>
							<p class="report-meta">
								<strong>Date:</strong> ${report.timestamp?.toDate?.()?.toLocaleString() || 'Recent'}
							</p>
						</div>
						<div class="report-actions">
							${report.status === 'pending' ? `
								<button class="report-btn btn-reviewed" onclick="markAsReviewed('${report.id}')">
									‚úì Mark Reviewed
								</button>
							` : ''}
							<button class="report-btn btn-delete" onclick="deleteReport('${report.id}')">
								Delete
							</button>
							<a href="/dj-mixes?mix=${report.mixId}" target="_blank" class="report-btn btn-view">
								View Mix
							</a>
						</div>
					</div>
					
					<div class="report-reason">
						<div class="report-reason-title">Reason for Report:</div>
						<div class="report-reason-text">${report.reason}</div>
					</div>

					${report.status === 'reviewed' && report.reviewedAt ? `
						<div class="reviewed-tag">
							‚úì Reviewed on ${new Date(report.reviewedAt).toLocaleString()}
						</div>
					` : ''}
				</div>
			`).join('');
		}

		// Mark as reviewed
		window.markAsReviewed = async function(reportId) {
			if (!confirm('Mark this report as reviewed?')) return;
			
			try {
				await updateDoc(doc(db, 'reports', reportId), {
					status: 'reviewed',
					reviewedAt: new Date().toISOString()
				});
				await loadReports();
			} catch (error) {
				console.error('Error updating report:', error);
				alert('Failed to update report');
			}
		};

		// Delete report
		window.deleteReport = async function(reportId) {
			if (!confirm('Delete this report permanently?')) return;
			
			try {
				await deleteDoc(doc(db, 'reports', reportId));
				await loadReports();
			} catch (error) {
				console.error('Error deleting report:', error);
				alert('Failed to delete report');
			}
		};
	</script>
</Layout>