---
// src/pages/admin/merch/manage.astro
import { v2 as cloudinary } from 'cloudinary';

cloudinary.config({
  cloud_name: 'dscqbze0d',
  api_key: '555922422486159',
  api_secret: '1OV_96Pd_x7MSdt7Bph5aNELYho',
});

let products = [];
let errorMessage = '';

try {
  const info = await cloudinary.api.resource('merch/products.json', {
    resource_type: 'raw'
  });
  
  const version = info.version;
  const productsUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/v${version}/merch/products.json`;
  
  const response = await fetch(productsUrl, { cache: 'no-store' });
  
  if (response.ok) {
    const data = await response.json();
    if (Array.isArray(data)) {
      products = data;
      products.sort((a, b) => new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime());
    }
  }
} catch (error) {
  console.error('Error loading products:', error);
  errorMessage = error instanceof Error ? error.message : 'Unknown error';
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Merch - Admin</title>
  <style>
    .container { max-width: 1400px; margin: 0 auto; padding: 20px; background: #fff; }
    .header { background: #fff; border: 3px solid #000; padding: 30px; margin-bottom: 30px; position: relative; }
    .header h1 { font-size: 32px; font-weight: 900; text-transform: uppercase; margin-bottom: 10px; }
    .header p { color: #666; font-size: 16px; }
    .back-btn { position: absolute; top: 20px; right: 20px; padding: 10px 20px; background: #000; color: #fff; border: 3px solid #000; font-weight: 700; text-decoration: none; text-transform: uppercase; transition: all 0.2s; }
    .back-btn:hover { background: #fff; color: #000; transform: translate(-4px, -4px); box-shadow: 8px 8px 0 #000; }
    
    .stats-row { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
    .stat-card { background: #fff; border: 3px solid #000; padding: 20px; }
    .stat-label { font-size: 12px; font-weight: 700; color: #666; text-transform: uppercase; margin-bottom: 10px; }
    .stat-value { font-size: 36px; font-weight: 900; color: #000; }
    
    .product-table { background: #fff; border: 3px solid #000; width: 100%; border-collapse: collapse; margin-bottom: 30px; }
    .product-table thead { background: #000; color: #fff; }
    .product-table th { text-align: left; padding: 15px; font-weight: 700; font-size: 12px; text-transform: uppercase; }
    .product-table tbody tr { border-bottom: 2px solid #000; }
    .product-table tbody tr:last-child { border-bottom: none; }
    .product-table tbody tr:hover { background: #f9f9f9; }
    .product-table td { padding: 15px; }
    
    .product-image { width: 80px; height: 80px; object-fit: cover; border: 2px solid #000; }
    .product-info h3 { font-size: 16px; font-weight: 900; margin-bottom: 5px; }
    .product-info p { font-size: 14px; color: #666; margin: 2px 0; }
    
    .btn { padding: 8px 16px; border: 2px solid #000; font-weight: 700; cursor: pointer; transition: all 0.2s; font-size: 12px; text-transform: uppercase; text-decoration: none; display: inline-block; text-align: center; }
    .btn-view { background: #fff; color: #000; }
    .btn-view:hover { background: #000; color: #fff; }
    .btn-delete { background: #ff0000; color: #fff; border-color: #ff0000; }
    .btn-delete:hover { background: #fff; color: #ff0000; }
    
    .btn-group { display: flex; gap: 10px; }
    
    .empty-state { text-align: center; padding: 60px 20px; background: #fff; border: 3px solid #000; }
    .empty-state h2 { font-size: 24px; font-weight: 900; margin-bottom: 10px; }
    .empty-state p { color: #666; margin-bottom: 20px; }
    
    .modal-overlay { display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); z-index: 1000; justify-content: center; align-items: center; }
    .modal-overlay.active { display: flex; }
    .modal { background: #fff; border: 5px solid #000; max-width: 500px; width: 90%; padding: 30px; box-shadow: 12px 12px 0 #000; }
    .modal h2 { font-size: 24px; font-weight: 900; margin-bottom: 20px; text-transform: uppercase; }
    .modal p { margin-bottom: 20px; line-height: 1.6; }
    .modal-buttons { display: flex; gap: 10px; }
    .modal-btn { flex: 1; padding: 15px; border: 3px solid #000; font-weight: 700; cursor: pointer; transition: all 0.2s; text-transform: uppercase; }
    .modal-btn-confirm { background: #ff0000; color: #fff; border-color: #ff0000; }
    .modal-btn-confirm:hover { background: #fff; color: #ff0000; }
    .modal-btn-cancel { background: #fff; color: #000; }
    .modal-btn-cancel:hover { background: #000; color: #fff; }
    
    .success-message { position: fixed; top: 20px; right: 20px; background: #000; color: #fff; padding: 15px 20px; border: 3px solid #000; font-weight: 700; box-shadow: 8px 8px 0 #000; z-index: 10000; }
    .error-message { background: #ff0000; color: #fff; padding: 15px; border: 3px solid #ff0000; margin-bottom: 20px; font-weight: 700; }
  </style>

  <div class="container">
    <div class="header">
      <a href="/admin" class="back-btn">‚Üê Back to Dashboard</a>
      <h1>üëï Manage Merch Products</h1>
      <p>Review, edit, and delete merch products</p>
    </div>

    {errorMessage && (
      <div class="error-message">
        ‚ö†Ô∏è Error loading products: {errorMessage}
      </div>
    )}

    <div class="stats-row">
      <div class="stat-card">
        <div class="stat-label">Total Products</div>
        <div class="stat-value">{products.length}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Total Stock</div>
        <div class="stat-value">{products.reduce((sum, p) => sum + (p.stock || 0), 0)}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">Total Value</div>
        <div class="stat-value">¬£{products.reduce((sum, p) => sum + (p.price * (p.stock || 0)), 0).toFixed(2)}</div>
      </div>
    </div>

    {products.length === 0 ? (
      <div class="empty-state">
        <h2>No Products Found</h2>
        <p>There are currently no products uploaded to the system.</p>
        <a href="/admin/merch-upload-tool" class="btn btn-view">Upload First Product</a>
      </div>
    ) : (
      <table class="product-table">
        <thead>
          <tr>
            <th>Image</th>
            <th>Product Info</th>
            <th>Category</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Upload Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {products.map((product) => (
            <tr data-product-id={product.id}>
              <td>
                <img 
                  src={product.image} 
                  alt={product.name}
                  class="product-image"
                />
              </td>
              <td>
                <div class="product-info">
                  <h3>{product.name}</h3>
                  <p>SKU: {product.sku}</p>
                  <p>Sizes: {product.sizes.join(', ')}</p>
                </div>
              </td>
              <td>
                <strong>{product.categoryName}</strong>
                <br/>
                <span style="color: #666; font-size: 12px;">{product.type}</span>
              </td>
              <td style="font-weight: 900;">¬£{product.price.toFixed(2)}</td>
              <td style="font-weight: 700;">{product.stock}</td>
              <td>{new Date(product.upload_date).toLocaleDateString()}</td>
              <td>
                <div class="btn-group">
                  <button class="btn btn-view edit-product-btn" data-product-id={product.id}>
                    Edit
                  </button>
                  <button class="btn btn-delete delete-product-btn" data-product-id={product.id} data-product-name={product.name}>
                    Delete
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    )}
  </div>

  <div id="deleteModal" class="modal-overlay">
    <div class="modal">
      <h2>‚ö†Ô∏è Confirm Deletion</h2>
      <p>
        Are you sure you want to delete "<strong id="deleteProductName"></strong>"?
      </p>
      <p style="color: #ff0000;">
        This will permanently remove:
        <br>‚Ä¢ The product image
        <br>‚Ä¢ All metadata
        <br>‚Ä¢ Stock information
      </p>
      <p><strong>This action cannot be undone.</strong></p>
      <div class="modal-buttons">
        <button id="confirmDeleteBtn" class="modal-btn modal-btn-confirm">Delete Product</button>
        <button id="cancelDeleteBtn" class="modal-btn modal-btn-cancel">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="modal-overlay" style="overflow-y: auto; padding: 20px;">
    <div class="modal" style="max-width: 800px; max-height: 90vh; overflow-y: auto;">
      <h2>‚úèÔ∏è Edit Product</h2>
      <form id="edit-form">
        <input type="hidden" id="edit-product-id" />
        <input type="hidden" id="edit-product-type" />
        <input type="hidden" id="edit-category-id" />
        <input type="hidden" id="edit-category-name" />
        
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
          <div>
            <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">Product Name</label>
            <input type="text" id="edit-product-name" required style="width: 100%; padding: 8px; border: 2px solid #000; font-size: 14px;" />
          </div>
          
          <div>
            <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">SKU</label>
            <input type="text" id="edit-sku" required style="width: 100%; padding: 8px; border: 2px solid #000; font-size: 14px;" />
          </div>
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">Price (¬£)</label>
          <input type="number" id="edit-price" step="0.01" required style="width: 100%; padding: 8px; border: 2px solid #000; font-size: 14px;" />
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">Description</label>
          <textarea id="edit-description" required style="width: 100%; padding: 8px; border: 2px solid #000; font-size: 14px; min-height: 60px;"></textarea>
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">Product Image (optional)</label>
          <input type="file" id="edit-image" accept="image/*" style="width: 100%; padding: 8px; border: 2px solid #000; font-size: 12px;" />
          <img id="edit-current-image" style="max-width: 100px; margin-top: 8px; border: 2px solid #000; display: block;" />
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">Available Sizes</label>
          <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px;" id="edit-sizes-container">
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="XS" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">XS</label>
            </div>
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="S" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">S</label>
            </div>
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="M" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">M</label>
            </div>
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="L" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">L</label>
            </div>
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="XL" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">XL</label>
            </div>
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="XXL" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">XXL</label>
            </div>
            <div style="display: flex; align-items: center; gap: 5px; padding: 6px; background: #f5f5f5; border: 2px solid #000;">
              <input type="checkbox" value="One Size" style="width: 16px; height: 16px;" />
              <label style="font-weight: 700; font-size: 12px;">One Size</label>
            </div>
          </div>
        </div>

        <div style="margin-bottom: 15px;">
          <label style="display: block; font-weight: 700; margin-bottom: 5px; font-size: 11px; text-transform: uppercase;">Stock by Size</label>
          <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;" id="edit-stock-inputs"></div>
        </div>

        <div class="modal-buttons">
          <button type="submit" class="modal-btn modal-btn-confirm" style="background: #000; border-color: #000;">Save Changes</button>
          <button type="button" id="cancelEditBtn" class="modal-btn modal-btn-cancel">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script define:vars={{ products: JSON.stringify(products) }}>
    const allProducts = JSON.parse(products);
    let productToDelete = null;
    let productToEdit = null;
    
    const deleteModal = document.getElementById('deleteModal');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
    
    const editModal = document.getElementById('editModal');
    const editForm = document.getElementById('edit-form');
    const cancelEditBtn = document.getElementById('cancelEditBtn');

    // Delete functionality
    document.querySelectorAll('.delete-product-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const productId = btn.getAttribute('data-product-id');
        const productName = btn.getAttribute('data-product-name');
        
        productToDelete = productId;
        document.getElementById('deleteProductName').textContent = productName;
        deleteModal.classList.add('active');
      });
    });

    cancelDeleteBtn.addEventListener('click', () => {
      deleteModal.classList.remove('active');
      productToDelete = null;
    });

    deleteModal.addEventListener('click', (e) => {
      if (e.target === deleteModal) {
        deleteModal.classList.remove('active');
        productToDelete = null;
      }
    });

    confirmDeleteBtn.addEventListener('click', async () => {
      if (!productToDelete) return;

      confirmDeleteBtn.disabled = true;
      confirmDeleteBtn.textContent = 'Deleting...';

      try {
        const response = await fetch('/api/delete-merch', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId: productToDelete })
        });

        if (response.ok) {
          showSuccess('Product deleted successfully');
          
          const row = document.querySelector(`tr[data-product-id="${productToDelete}"]`);
          if (row) row.remove();
          
          deleteModal.classList.remove('active');
          productToDelete = null;
          
          setTimeout(() => location.reload(), 2000);
        } else {
          const error = await response.json();
          alert('Failed to delete product: ' + (error.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete product: ' + error.message);
      } finally {
        confirmDeleteBtn.disabled = false;
        confirmDeleteBtn.textContent = 'Delete Product';
      }
    });

    // Edit functionality
    document.querySelectorAll('.edit-product-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const productId = btn.getAttribute('data-product-id');
        productToEdit = allProducts.find(p => p.id === productId);
        
        if (productToEdit) {
          openEditModal(productToEdit);
        }
      });
    });

    function openEditModal(product) {
      document.getElementById('edit-product-id').value = product.id;
      document.getElementById('edit-product-type').value = product.type;
      document.getElementById('edit-category-id').value = product.categoryId;
      document.getElementById('edit-category-name').value = product.categoryName;
      document.getElementById('edit-product-name').value = product.name;
      document.getElementById('edit-sku').value = product.sku;
      document.getElementById('edit-price').value = product.price;
      document.getElementById('edit-description').value = product.description;
      document.getElementById('edit-current-image').src = product.image;

      // Set sizes
      const sizeCheckboxes = document.querySelectorAll('#edit-sizes-container input[type="checkbox"]');
      sizeCheckboxes.forEach(cb => {
        cb.checked = product.sizes.includes(cb.value);
      });

      updateEditStockInputs();
      
      // Set stock values
      Object.keys(product.sizeStock).forEach(size => {
        const input = document.getElementById(`edit-stock-${size.replace(/\s/g, '-')}`);
        if (input) input.value = product.sizeStock[size];
      });

      editModal.classList.add('active');
    }

    cancelEditBtn.addEventListener('click', () => {
      editModal.classList.remove('active');
      productToEdit = null;
    });

    editModal.addEventListener('click', (e) => {
      if (e.target === editModal) {
        editModal.classList.remove('active');
        productToEdit = null;
      }
    });

    // Update stock inputs when sizes change
    document.querySelectorAll('#edit-sizes-container input[type="checkbox"]').forEach(cb => {
      cb.addEventListener('change', updateEditStockInputs);
    });

    function updateEditStockInputs() {
      const stockContainer = document.getElementById('edit-stock-inputs');
      const checkedSizes = Array.from(document.querySelectorAll('#edit-sizes-container input[type="checkbox"]:checked')).map(cb => cb.value);
      
      if (checkedSizes.length === 0) {
        stockContainer.innerHTML = '<p style="color: #666; text-align: center; grid-column: 1/-1; font-size: 12px;">Select sizes to set stock levels</p>';
        return;
      }
      
      stockContainer.innerHTML = checkedSizes.map(size => `
        <div>
          <label style="font-size: 10px; font-weight: 700; text-transform: uppercase; display: block; margin-bottom: 3px;">${size}</label>
          <input type="number" id="edit-stock-${size.replace(/\s/g, '-')}" min="0" value="10" style="width: 100%; padding: 6px; border: 2px solid #000; font-size: 13px;" />
        </div>
      `).join('');
    }

    // Submit edit form
    editForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const submitBtn = editForm.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.textContent = 'Saving...';

      try {
        const formData = new FormData();
        
        formData.append('productId', document.getElementById('edit-product-id').value);
        formData.append('productName', document.getElementById('edit-product-name').value);
        formData.append('sku', document.getElementById('edit-sku').value);
        formData.append('price', document.getElementById('edit-price').value);
        formData.append('description', document.getElementById('edit-description').value);

        const imageFile = document.getElementById('edit-image').files[0];
        if (imageFile) {
          formData.append('imageFile', imageFile);
        }

        const sizes = Array.from(document.querySelectorAll('#edit-sizes-container input[type="checkbox"]:checked')).map(cb => cb.value);
        formData.append('sizes', JSON.stringify(sizes));

        const sizeStock = {};
        sizes.forEach(size => {
          const input = document.getElementById(`edit-stock-${size.replace(/\s/g, '-')}`);
          sizeStock[size] = parseInt(input?.value || 0);
        });
        formData.append('sizeStock', JSON.stringify(sizeStock));

        const response = await fetch('/api/update-merch', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          showSuccess('Product updated successfully!');
          editModal.classList.remove('active');
          setTimeout(() => location.reload(), 2000);
        } else {
          const error = await response.json();
          alert('Update failed: ' + (error.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Update error:', error);
        alert('Update failed: ' + error.message);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Save Changes';
      }
    });

    function showSuccess(message) {
      const msgEl = document.createElement('div');
      msgEl.className = 'success-message';
      msgEl.textContent = message;
      document.body.appendChild(msgEl);
      setTimeout(() => msgEl.remove(), 3000);
    }
  </script>
</body>
</html>