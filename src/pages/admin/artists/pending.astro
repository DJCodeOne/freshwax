---
// src/pages/admin/artists/pending.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pending Artist Approvals - Fresh Wax Admin</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; 
      background: #ffffff; 
      min-height: 100vh; 
      padding: 20px; 
    }
    
    .container { max-width: 1200px; margin: 0 auto; }
    
    .logo-container {
      background: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .logo {
      max-height: 60px;
      width: auto;
      display: inline-block;
    }
    
    .header { 
      background: white; 
      padding: 30px; 
      margin-bottom: 30px; 
      border-radius: 12px; 
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header h1 { 
      font-size: 32px; 
      color: #000; 
      margin-bottom: 5px; 
    }
    
    .header p { 
      color: #666; 
      font-size: 14px; 
    }
    
    .back-btn {
      padding: 10px 20px;
      background: #666;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.2s;
    }
    
    .back-btn:hover {
      background: #000;
      transform: translateY(-2px);
    }
    
    .loading {
      background: white;
      padding: 40px;
      border-radius: 12px;
      text-align: center;
      color: #666;
    }
    
    .empty-state {
      background: white;
      padding: 60px 40px;
      border-radius: 12px;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .empty-state-icon {
      font-size: 64px;
      margin-bottom: 20px;
    }
    
    .empty-state h2 {
      font-size: 24px;
      color: #000;
      margin-bottom: 10px;
    }
    
    .empty-state p {
      color: #666;
      font-size: 16px;
    }
    
    .artists-grid {
      display: grid;
      gap: 20px;
    }
    
    .artist-card {
      background: white;
      border-radius: 12px;
      padding: 25px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 20px;
      align-items: start;
    }
    
    .artist-info h3 {
      font-size: 20px;
      color: #000;
      margin-bottom: 8px;
    }
    
    .artist-detail {
      display: flex;
      align-items: center;
      gap: 8px;
      color: #666;
      font-size: 14px;
      margin-bottom: 6px;
    }
    
    .artist-detail svg {
      width: 16px;
      height: 16px;
      flex-shrink: 0;
      min-width: 16px;
      min-height: 16px;
    }
    
    .artist-date {
      font-size: 12px;
      color: #999;
      margin-top: 10px;
    }
    
    .action-buttons {
      display: flex;
      gap: 10px;
      flex-direction: column;
    }
    
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      white-space: nowrap;
    }
    
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .btn-approve {
      background: #28a745;
      color: white;
    }
    
    .btn-approve:hover:not(:disabled) {
      background: #218838;
      transform: translateY(-2px);
    }
    
    .btn-reject {
      background: #dc3545;
      color: white;
    }
    
    .btn-reject:hover:not(:disabled) {
      background: #c82333;
      transform: translateY(-2px);
    }
    
    .message {
      padding: 15px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 14px;
      font-weight: 500;
    }
    
    .message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    
    @media (max-width: 768px) {
      .artist-card {
        grid-template-columns: 1fr;
      }
      
      .action-buttons {
        flex-direction: row;
      }
      
      .header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="logo-container">
      <img src="/logo.webp" alt="Fresh Wax" class="logo" onerror="this.style.display='none'">
    </div>
    
    <div class="header">
      <div>
        <h1>‚úÖ Pending Artist Approvals</h1>
        <p>Review and approve artist registrations</p>
      </div>
      <a href="/admin" class="back-btn">‚Üê Back to Dashboard</a>
    </div>

    <div id="messageContainer"></div>
    
    <div id="loadingState" class="loading">
      Loading pending artists...
    </div>
    
    <div id="emptyState" class="empty-state" style="display: none;">
      <div class="empty-state-icon">üéâ</div>
      <h2>All caught up!</h2>
      <p>No pending artist approvals at the moment.</p>
    </div>
    
    <div id="artistsContainer" class="artists-grid" style="display: none;"></div>
  </div>

  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
    import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    import { getFirestore, collection, query, where, getDocs, doc, getDoc, updateDoc, deleteDoc } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
      authDomain: "freshwax-store.firebaseapp.com",
      projectId: "freshwax-store",
      storageBucket: "freshwax-store.firebasestorage.app",
      messagingSenderId: "675435782973",
      appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    const loadingState = document.getElementById('loadingState');
    const emptyState = document.getElementById('emptyState');
    const artistsContainer = document.getElementById('artistsContainer');
    const messageContainer = document.getElementById('messageContainer');

    // Check admin authentication
    onAuthStateChanged(auth, async (user) => {
      if (!user) {
        window.location.href = '/admin/login';
        return;
      }

      try {
        const adminDoc = await getDoc(doc(db, 'admins', user.uid));
        
        if (!adminDoc.exists()) {
          await signOut(auth);
          window.location.href = '/admin/login';
          return;
        }
        
        // User is authenticated admin - load pending artists
        loadPendingArtists();
      } catch (error) {
        console.error('Auth check error:', error);
        window.location.href = '/admin/login';
      }
    });

    function showMessage(text, type = 'success') {
      const message = document.createElement('div');
      message.className = `message ${type}`;
      message.textContent = text;
      messageContainer.appendChild(message);
      
      setTimeout(() => {
        message.remove();
      }, 5000);
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-GB', { 
        day: 'numeric', 
        month: 'short', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    async function loadPendingArtists() {
      try {
        const artistsRef = collection(db, 'artists');
        const q = query(artistsRef, where('approved', '==', false));
        const querySnapshot = await getDocs(q);
        
        loadingState.style.display = 'none';
        
        if (querySnapshot.empty) {
          emptyState.style.display = 'block';
          artistsContainer.style.display = 'none';
          return;
        }
        
        emptyState.style.display = 'none';
        artistsContainer.style.display = 'grid';
        artistsContainer.innerHTML = '';
        
        querySnapshot.forEach((docSnapshot) => {
          const artist = docSnapshot.data();
          const artistId = docSnapshot.id;
          
          const card = document.createElement('div');
          card.className = 'artist-card';
          card.id = `artist-${artistId}`;
          
          card.innerHTML = `
            <div class="artist-info">
              <h3>${artist.artistName}</h3>
              <div class="artist-detail">
                <svg style="width: 16px; height: 16px; min-width: 16px; min-height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                ${artist.email}
              </div>
              <div class="artist-date">
                Registered: ${formatDate(artist.registeredAt)}
              </div>
            </div>
            <div class="action-buttons">
              <button class="btn btn-approve" onclick="approveArtist('${artistId}', '${artist.email}')">
                ‚úì Approve
              </button>
              <button class="btn btn-reject" onclick="rejectArtist('${artistId}', '${artist.email}')">
                ‚úó Reject
              </button>
            </div>
          `;
          
          artistsContainer.appendChild(card);
        });
        
      } catch (error) {
        console.error('Error loading pending artists:', error);
        loadingState.innerHTML = '<p style="color: #dc3545;">Error loading artists. Please refresh the page.</p>';
      }
    }

    window.approveArtist = async function(artistId, email) {
      const card = document.getElementById(`artist-${artistId}`);
      const buttons = card.querySelectorAll('.btn');
      buttons.forEach(btn => btn.disabled = true);
      
      try {
        const artistRef = doc(db, 'artists', artistId);
        await updateDoc(artistRef, {
          approved: true,
          approvedAt: new Date().toISOString()
        });
        
        showMessage(`‚úì ${email} has been approved!`, 'success');
        
        // Remove card with animation
        card.style.transition = 'all 0.3s ease';
        card.style.opacity = '0';
        card.style.transform = 'translateX(20px)';
        
        setTimeout(() => {
          card.remove();
          
          // Check if there are any cards left
          if (artistsContainer.children.length === 0) {
            artistsContainer.style.display = 'none';
            emptyState.style.display = 'block';
          }
        }, 300);
        
      } catch (error) {
        console.error('Error approving artist:', error);
        showMessage('Failed to approve artist. Please try again.', 'error');
        buttons.forEach(btn => btn.disabled = false);
      }
    };

    window.rejectArtist = async function(artistId, email) {
      if (!confirm(`Are you sure you want to reject ${email}? This will delete their account.`)) {
        return;
      }
      
      const card = document.getElementById(`artist-${artistId}`);
      const buttons = card.querySelectorAll('.btn');
      buttons.forEach(btn => btn.disabled = true);
      
      try {
        const artistRef = doc(db, 'artists', artistId);
        await deleteDoc(artistRef);
        
        showMessage(`${email} has been rejected and removed.`, 'success');
        
        // Remove card with animation
        card.style.transition = 'all 0.3s ease';
        card.style.opacity = '0';
        card.style.transform = 'translateX(-20px)';
        
        setTimeout(() => {
          card.remove();
          
          // Check if there are any cards left
          if (artistsContainer.children.length === 0) {
            artistsContainer.style.display = 'none';
            emptyState.style.display = 'block';
          }
        }, 300);
        
      } catch (error) {
        console.error('Error rejecting artist:', error);
        showMessage('Failed to reject artist. Please try again.', 'error');
        buttons.forEach(btn => btn.disabled = false);
      }
    };
  </script>
</body>
</html>