---
// src/pages/login.astro
// Fixed version with approval check
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Artist Login - Fresh Wax</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
      background: #ffffff;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .login-container {
      max-width: 450px;
      width: 100%;
    }

    .login-logo {
      text-align: center;
      margin-bottom: 30px;
    }

    .login-logo img {
      height: 80px;
      width: auto;
    }

    .login-card {
      background: #fff;
      border: 3px solid #000;
      padding: 40px;
    }

    .login-header {
      margin-bottom: 30px;
    }

    .login-header h1 {
      font-size: 28px;
      font-weight: 900;
      color: #000;
      margin-bottom: 8px;
      text-transform: uppercase;
    }

    .login-header p {
      color: #666;
      font-size: 14px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 700;
      text-transform: uppercase;
      font-size: 12px;
      letter-spacing: 0.5px;
      color: #000;
    }

    .form-input {
      width: 100%;
      padding: 12px;
      border: 3px solid #000;
      font-size: 14px;
      font-weight: 600;
      background: #fff;
    }

    .form-input:focus {
      outline: none;
      box-shadow: 4px 4px 0 #000;
      transform: translate(-2px, -2px);
    }

    .login-btn {
      width: 100%;
      padding: 15px;
      background: #000;
      color: #fff;
      border: 3px solid #000;
      font-weight: 700;
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s;
      font-size: 14px;
      letter-spacing: 0.5px;
    }

    .login-btn:hover:not(:disabled) {
      background: #fff;
      color: #000;
      transform: translate(-4px, -4px);
      box-shadow: 8px 8px 0 #000;
    }

    .login-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .login-footer {
      margin-top: 20px;
      text-align: center;
      font-size: 14px;
    }

    .login-footer a {
      color: #000;
      font-weight: 700;
      text-decoration: none;
      border-bottom: 2px solid #000;
    }

    .login-footer a:hover {
      background: #000;
      color: #fff;
    }

    .error-message {
      background: #fff;
      border: 3px solid #000;
      padding: 15px;
      margin-bottom: 20px;
      font-weight: 700;
      color: #000;
      display: none;
    }

    .error-message.show {
      display: block;
    }

    .error-icon {
      display: inline-block;
      margin-right: 8px;
    }

    .pending-message {
      background: #fff;
      border: 3px solid #000;
      padding: 20px;
      margin-top: 20px;
      text-align: center;
    }

    .pending-message.show {
      display: block;
    }

    .pending-message h3 {
      font-size: 20px;
      font-weight: 900;
      margin-bottom: 10px;
      text-transform: uppercase;
    }

    .pending-message p {
      font-size: 14px;
      color: #666;
      line-height: 1.6;
    }

    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid #fff;
      border-top: 2px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      display: inline-block;
      margin-left: 10px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @media (max-width: 480px) {
      .login-card {
        padding: 30px 20px;
      }
      
      .login-header h1 {
        font-size: 24px;
      }
    }
  </style>
</head>
<body>
  <div class="login-container">
    <div class="login-logo">
      <img src="/logo.webp" alt="Fresh Wax" onerror="this.style.display='none'">
    </div>

    <div class="login-card">
      <div class="login-header">
        <h1>üé§ Artist Login</h1>
        <p>Access your artist dashboard</p>
      </div>

      <div id="errorMessage" class="error-message">
        <span class="error-icon">‚ö†Ô∏è</span>
        <span id="errorText"></span>
      </div>

      <form id="loginForm">
        <div class="form-group">
          <label class="form-label">Email Address</label>
          <input 
            type="email" 
            id="email" 
            class="form-input" 
            placeholder="artist@example.com"
            required
          >
        </div>

        <div class="form-group">
          <label class="form-label">Password</label>
          <input 
            type="password" 
            id="password" 
            class="form-input" 
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            required
          >
        </div>

        <button type="submit" class="login-btn" id="loginBtn">
          Sign In
        </button>
      </form>

      <div class="login-footer">
        Don't have an account? <a href="/register">Register here</a>
      </div>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
    import { getAuth, signInWithEmailAndPassword } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    import { getFirestore, doc, getDoc } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
      authDomain: "freshwax-store.firebaseapp.com",
      projectId: "freshwax-store",
      storageBucket: "freshwax-store.firebasestorage.app",
      messagingSenderId: "675435782973",
      appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    const loginForm = document.getElementById('loginForm');
    const loginBtn = document.getElementById('loginBtn');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');

    function showError(message) {
      errorText.textContent = message;
      errorMessage.classList.add('show');
    }

    function hideError() {
      errorMessage.classList.remove('show');
    }

    function setLoading(loading) {
      loginBtn.disabled = loading;
      if (loading) {
        loginBtn.innerHTML = 'Signing In<span class="spinner"></span>';
      } else {
        loginBtn.textContent = 'Sign In';
      }
    }

    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideError();
      setLoading(true);

      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;

      try {
        // Sign in with Firebase Auth
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;

        console.log('User signed in:', user.uid);

        // CRITICAL: Check if artist exists and is approved
        const artistDoc = await getDoc(doc(db, 'artists', user.uid));
        
        if (!artistDoc.exists()) {
          console.error('Artist document not found');
          showError('Artist account not found. Please register first.');
          await auth.signOut();
          setLoading(false);
          return;
        }

        const artistData = artistDoc.data();
        console.log('Artist data:', artistData);

        // CRITICAL: Check approval status
        // Only approved === true can proceed
        if (artistData.approved !== true) {
          console.log('Artist not approved:', artistData.approved);
          
          // Sign out the user
          await auth.signOut();
          
          // Show pending message
          showError('‚è≥ Your account is pending approval. Please wait for admin approval before accessing the artist portal. You will receive an email once approved.');
          setLoading(false);
          return;
        }

        // Artist is approved! Redirect to dashboard
        console.log('Artist approved, redirecting...');
        window.location.href = '/artist/dashboard'; // Update this to your actual artist dashboard path

      } catch (error) {
        console.error('Login error:', error);
        setLoading(false);

        // Handle specific Firebase errors
        if (error.code === 'auth/invalid-credential') {
          showError('Invalid email or password. Please try again.');
        } else if (error.code === 'auth/user-not-found') {
          showError('No account found with this email.');
        } else if (error.code === 'auth/wrong-password') {
          showError('Incorrect password. Please try again.');
        } else if (error.code === 'auth/too-many-requests') {
          showError('Too many failed login attempts. Please try again later.');
        } else if (error.code === 'auth/invalid-email') {
          showError('Invalid email address format.');
        } else {
          showError('Login failed. Please try again.');
        }
      }
    });
  </script>
</body>
</html>