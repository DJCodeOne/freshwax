---
import '../styles/global.css';
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fresh Wax - DJ Mixes</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/wavesurfer.js@7"></script>
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <style>
    body {
      background: #ffffff;
      color: #000;
    }
    .container-grey {
      background: #f5f5f5;
      border: 1px solid #e0e0e0;
    }
    .waveform-container {
      background: #fafafa;
      border: 1px solid #e0e0e0;
      padding: 1rem;
      margin: 1rem 0;
    }
    .star-rating {
      display: inline-flex;
      gap: 0.25rem;
    }
    .star {
      cursor: pointer;
      font-size: 1.5rem;
      color: #ddd;
      transition: color 0.2s;
    }
    .star:hover,
    .star.filled {
      color: #000;
    }
    .upload-zone {
      border: 2px dashed #ccc;
      background: #fafafa;
      transition: all 0.3s;
    }
    .upload-zone.dragover {
      border-color: #000;
      background: #f0f0f0;
    }
    .btn-primary {
      background: #000;
      color: #fff;
    }
    .btn-primary:hover {
      background: #333;
    }
    .btn-secondary {
      background: #f5f5f5;
      color: #000;
      border: 1px solid #e0e0e0;
    }
    .btn-secondary:hover {
      background: #e0e0e0;
    }

    /* Responsive header */
    @media (max-width: 768px) {
      .max-w-7xl .flex.justify-between {
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
      }
      
      .max-w-7xl .flex.justify-between > div:first-child {
        width: 100%;
      }

      .max-w-7xl .flex.justify-between > div:last-child {
        width: 100%;
        align-items: stretch;
      }

      .max-w-7xl .flex.justify-between button {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="min-h-screen p-8">
    <!-- Header -->
    <div class="max-w-7xl mx-auto mb-12">
      <div class="flex justify-between items-center border-b border-gray-300 pb-6">
        <div class="flex items-center gap-6">
          <img 
            src="/logo.webp" 
            alt="Fresh Wax Logo" 
            class="h-16 w-auto"
            onerror="this.style.display='none'"
          />
          <div>
            <h1 class="text-4xl font-bold tracking-tight mb-2 text-black">Fresh Wax DJ Mixes</h1>
            <p class="text-gray-600">Drop your mixes, share the vibes</p>
          </div>
        </div>
        <div class="flex flex-col items-end gap-3">
          <div class="text-right text-sm text-gray-600">
            <div id="user-info"></div>
          </div>
          <a 
            href="/upload-mix"
            class="btn-primary px-6 py-3 rounded font-bold transition whitespace-nowrap inline-block text-center"
          >
            + Upload Mix
          </a>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto">
      <div class="mb-6 flex justify-between items-center">
        <h2 class="text-2xl font-bold text-black">All Mixes</h2>
        <div class="text-sm text-gray-600">
          <span id="total-mixes">0</span> mixes available
        </div>
      </div>

      <div id="mixes-container" class="space-y-6">
        <!-- Mixes will be loaded here -->
      </div>
    </div>
  </div>

  <!-- Google Drive API -->
  <script src="https://apis.google.com/js/api.js"></script>
  
  <!-- Firebase Config -->
  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
    import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    import { getFirestore, collection, addDoc, getDocs, updateDoc, doc, increment, serverTimestamp, query, orderBy } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';

    const firebaseConfig = {
      apiKey: "AIzaSyBiZGsWdvA9ESm3OsUpZ-VQpwqMjMpBY6g",
      authDomain: "freshwax-store.firebaseapp.com",
      projectId: "freshwax-store",
      storageBucket: "freshwax-store.firebasestorage.app",
      messagingSenderId: "675435782973",
      appId: "1:675435782973:web:e8459c2ec4a5f6d683db54"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    let currentUser = null;
    let currentWavesurfer = null;
    let gapiInited = false;
    let tokenClient;
    
    // Google Drive API configuration from environment variables
    const GOOGLE_API_KEY = import.meta.env.PUBLIC_GOOGLE_API_KEY;
    const GOOGLE_CLIENT_ID = import.meta.env.PUBLIC_GOOGLE_CLIENT_ID;
    const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';
    const SCOPES = 'https://www.googleapis.com/auth/drive.file';
    
    let gapiAccessToken = null;
    let selectedAudioFiles = [];

    // Make toggle function available globally immediately
    window.toggleUploadSection = function() {
      console.log('Toggle clicked!');
      const section = document.getElementById('upload-section');
      const btn = document.getElementById('toggle-upload-btn');
      
      if (!section || !btn) {
        console.error('Elements not found:', { section, btn });
        return;
      }
      
      if (section.classList.contains('hidden')) {
        section.classList.remove('hidden');
        btn.textContent = '− Hide Upload';
        console.log('Showing upload section');
      } else {
        section.classList.add('hidden');
        btn.textContent = '+ Upload Mix';
        // Reset form when closing
        const form = document.getElementById('upload-form');
        if (form) form.reset();
        clearAllFiles();
        const preview = document.getElementById('artwork-preview');
        if (preview) preview.innerHTML = '';
        console.log('Hiding upload section');
      }
    };

    // Clear all audio files
    window.clearAllFiles = function() {
      selectedAudioFiles = [];
      const audioFile = document.getElementById('audio-file');
      if (audioFile) audioFile.value = '';
      updateFileList();
    };

    // Remove single file
    window.removeFile = function(index) {
      selectedAudioFiles.splice(index, 1);
      updateFileList();
    };

    // Update file list display
    function updateFileList() {
      const fileList = document.getElementById('audio-file-list');
      const fileItems = document.getElementById('file-items');
      
      if (selectedAudioFiles.length === 0) {
        fileList.classList.add('hidden');
        return;
      }
      
      fileList.classList.remove('hidden');
      fileItems.innerHTML = selectedAudioFiles.map((file, index) => `
        <div class="flex items-center justify-between py-2 px-3 bg-gray-50 rounded border border-gray-200">
          <div class="flex items-center gap-3 flex-grow min-w-0">
            <svg class="w-5 h-5 text-gray-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
            </svg>
            <div class="min-w-0 flex-grow">
              <p class="text-sm font-medium text-black truncate">${file.name}</p>
              <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
            </div>
          </div>
          <button 
            type="button"
            onclick="removeFile(${index})" 
            class="ml-3 text-red-600 hover:text-red-800 flex-shrink-0"
            title="Remove file"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `).join('');
    }

    // Auth check
    onAuthStateChanged(auth, (user) => {
      if (user) {
        currentUser = user;
        document.getElementById('user-info').innerHTML = `
          <div class="text-black">Logged in as: ${user.email}</div>
          <button onclick="authorizeGoogleDrive()" id="gdrive-auth-btn" class="mt-2 text-xs btn-primary px-3 py-1 rounded">
            Connect Google Drive
          </button>
        `;
        gapiLoad();
        loadMixes();
        
        // Setup toggle button event listener
        setupToggleButton();
      } else {
        window.location.href = '/login';
      }
    });

    // Setup toggle button
    function setupToggleButton() {
      const toggleBtn = document.getElementById('toggle-upload-btn');
      const closeBtn = document.getElementById('close-upload-btn');
      const cancelBtn = document.getElementById('cancel-upload-btn');

      if (toggleBtn) {
        // Remove any existing listeners
        toggleBtn.onclick = null;
        // Add new listener
        toggleBtn.addEventListener('click', window.toggleUploadSection);
        console.log('Toggle button listener attached');
      }

      if (closeBtn) {
        closeBtn.addEventListener('click', window.toggleUploadSection);
      }

      if (cancelBtn) {
        cancelBtn.addEventListener('click', window.toggleUploadSection);
      }
    }

    // Initialize Google Drive API
    function gapiLoad() {
      gapi.load('client', initializeGapiClient);
    }

    async function initializeGapiClient() {
      try {
        await gapi.client.init({
          apiKey: GOOGLE_API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        console.log('Google Drive API initialized');
      } catch (error) {
        console.error('Error initializing Google API:', error);
      }
    }

    // Authorize Google Drive
    window.authorizeGoogleDrive = function() {
      tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: GOOGLE_CLIENT_ID,
        scope: SCOPES,
        callback: (response) => {
          if (response.error !== undefined) {
            throw response;
          }
          gapiAccessToken = response.access_token;
          document.getElementById('gdrive-auth-btn').textContent = '✓ Drive Connected';
          document.getElementById('gdrive-auth-btn').disabled = true;
          console.log('Google Drive authorized');
        },
      });

      if (gapi.client.getToken() === null) {
        tokenClient.requestAccessToken({ prompt: 'consent' });
      } else {
        tokenClient.requestAccessToken({ prompt: '' });
      }
    };

    // Upload file to Google Drive
    async function uploadToGoogleDrive(file, fileName) {
      if (!gapiAccessToken) {
        throw new Error('Please connect Google Drive first');
      }

      const metadata = {
        name: fileName,
        mimeType: file.type,
        parents: ['root'] // You can create a specific folder and use its ID
      };

      const form = new FormData();
      form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
      form.append('file', file);

      const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,name,webContentLink,webViewLink', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${gapiAccessToken}`
        },
        body: form
      });

      if (!response.ok) {
        throw new Error('Upload to Google Drive failed');
      }

      const result = await response.json();
      
      // Make file publicly accessible
      await fetch(`https://www.googleapis.com/drive/v3/files/${result.id}/permissions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${gapiAccessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          role: 'reader',
          type: 'anyone'
        })
      });

      return {
        id: result.id,
        name: result.name,
        downloadUrl: `https://drive.google.com/uc?export=download&id=${result.id}`,
        streamUrl: `https://drive.google.com/uc?export=view&id=${result.id}`,
        viewUrl: result.webViewLink
      };
    }

    // Upload zone handlers
    const artworkZone = document.getElementById('artwork-zone');
    const artworkFile = document.getElementById('artwork-file');
    const audioZone = document.getElementById('audio-zone');
    const audioFile = document.getElementById('audio-file');

    artworkZone.addEventListener('click', () => artworkFile.click());
    audioZone.addEventListener('click', () => audioFile.click());

    // Drag and drop
    [artworkZone, audioZone].forEach(zone => {
      zone.addEventListener('dragover', (e) => {
        e.preventDefault();
        zone.classList.add('dragover');
      });

      zone.addEventListener('dragleave', () => {
        zone.classList.remove('dragover');
      });

      zone.addEventListener('drop', (e) => {
        e.preventDefault();
        zone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          if (zone === artworkZone) {
            // Validate artwork file type (JPG or PNG only)
            if (files[0].type.match('image/(jpeg|jpg|png)')) {
              artworkFile.files = files;
              previewArtwork(files[0]);
            } else {
              alert('Please select only JPG or PNG files for artwork');
            }
          } else if (zone === audioZone) {
            // Validate audio file type (MP3 or WAV only)
            if (files[0].type.match('audio/(mpeg|mp3|wav)')) {
              selectedAudioFiles = [files[0]];
              // Create a new FileList-like object for the input
              const dt = new DataTransfer();
              dt.items.add(files[0]);
              audioFile.files = dt.files;
              updateFileList();
            } else {
              alert('Please select only MP3 or WAV files');
            }
          }
        }
      });
    });

    artworkFile.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        const file = e.target.files[0];
        // Validate file type
        if (!file.type.match('image/(jpeg|jpg|png)')) {
          alert('Please select only JPG or PNG files');
          e.target.value = '';
          return;
        }
        previewArtwork(file);
      }
    });

    audioFile.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        const file = e.target.files[0];
        // Validate file type
        if (!file.type.match('audio/(mpeg|mp3|wav)')) {
          alert('Please select only MP3 or WAV files');
          e.target.value = '';
          return;
        }
        selectedAudioFiles = [file];
        updateFileList();
      }
    });

    function previewArtwork(file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        document.getElementById('artwork-preview').innerHTML = `
          <img src="${e.target.result}" class="w-32 h-32 object-cover rounded border border-gray-300" />
        `;
      };
      reader.readAsDataURL(file);
    }

    // Upload form submission
    document.getElementById('upload-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!gapiAccessToken) {
        alert('Please connect Google Drive first using the button in the top right');
        return;
      }

      if (selectedAudioFiles.length === 0) {
        alert('Please select an audio file');
        return;
      }

      const btn = document.getElementById('upload-btn');
      btn.disabled = true;
      btn.textContent = 'Uploading to Google Drive...';

      try {
        const djName = document.getElementById('dj-name').value;
        const mixTitle = document.getElementById('mix-title').value;
        const mixNumber = document.getElementById('mix-number').value;
        const genre = document.getElementById('genre').value;
        
        // Upload artwork to Google Drive if provided
        let artworkData = null;
        if (artworkFile.files.length > 0) {
          btn.textContent = 'Uploading artwork...';
          artworkData = await uploadToGoogleDrive(
            artworkFile.files[0],
            `${djName}_${mixTitle}_artwork.${artworkFile.files[0].name.split('.').pop()}`
          );
        }

        // Upload audio file to Google Drive
        btn.textContent = 'Uploading mix...';
        const audioData = await uploadToGoogleDrive(
          selectedAudioFiles[0],
          `${djName}_${mixTitle}.${selectedAudioFiles[0].name.split('.').pop()}`
        );

        // Save metadata to Firestore
        btn.textContent = 'Saving details...';
        await addDoc(collection(db, 'mixes'), {
          djName,
          mixTitle,
          mixNumber: mixNumber || null,
          genre: genre || null,
          artworkURL: artworkData?.streamUrl || null,
          artworkDriveId: artworkData?.id || null,
          audioURL: audioData.streamUrl,
          audioDriveId: audioData.id,
          downloadUrl: audioData.downloadUrl,
          driveViewUrl: audioData.viewUrl,
          uploadedBy: currentUser.email,
          uploadedAt: serverTimestamp(),
          plays: 0,
          downloads: 0,
          ratings: [],
          messages: []
        });

        alert('Mix uploaded to Google Drive successfully!');
        document.getElementById('upload-form').reset();
        document.getElementById('artwork-preview').innerHTML = '';
        clearAllFiles();
        toggleUploadSection(); // Close the upload section
        loadMixes();

      } catch (error) {
        console.error('Upload error:', error);
        alert('Upload failed: ' + error.message);
      } finally {
        btn.disabled = false;
        btn.textContent = 'Upload Mix';
      }
    });

    // Load mixes
    async function loadMixes() {
      const mixesContainer = document.getElementById('mixes-container');
      mixesContainer.innerHTML = '<div class="text-center text-gray-600 py-8">Loading mixes...</div>';

      try {
        const q = query(collection(db, 'mixes'), orderBy('uploadedAt', 'desc'));
        const snapshot = await getDocs(q);
        
        document.getElementById('total-mixes').textContent = snapshot.size;

        if (snapshot.empty) {
          mixesContainer.innerHTML = '<div class="text-center text-gray-600 py-8">No mixes uploaded yet. Be the first!</div>';
          return;
        }

        mixesContainer.innerHTML = '';
        snapshot.forEach((docSnap) => {
          const mix = docSnap.data();
          const mixId = docSnap.id;
          renderMix(mix, mixId);
        });

      } catch (error) {
        console.error('Error loading mixes:', error);
        mixesContainer.innerHTML = '<div class="text-center text-red-600 py-8">Error loading mixes</div>';
      }
    }

    function renderMix(mix, mixId) {
      const avgRating = mix.ratings && mix.ratings.length > 0
        ? (mix.ratings.reduce((a, b) => a + b, 0) / mix.ratings.length).toFixed(1)
        : 'No ratings';

      const mixCard = document.createElement('div');
      mixCard.className = 'container-grey rounded-lg p-6';
      mixCard.innerHTML = `
        <div class="flex gap-6">
          <!-- Artwork -->
          <div class="flex-shrink-0">
            <img 
              src="${mix.artworkURL || '/placeholder-mix.jpg'}" 
              alt="${mix.mixTitle}"
              class="w-32 h-32 object-cover rounded border border-gray-300"
              onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%22200%22 height=%22200%22%3E%3Crect fill=%22%23f5f5f5%22 width=%22200%22 height=%22200%22/%3E%3Ctext x=%2250%25%22 y=%2250%25%22 dominant-baseline=%22middle%22 text-anchor=%22middle%22 fill=%22%23999%22 font-size=%2216%22%3ENo Artwork%3C/text%3E%3C/svg%3E'"
            />
          </div>

          <!-- Info -->
          <div class="flex-grow">
            <div class="flex justify-between items-start mb-2">
              <div>
                <h3 class="text-xl font-bold text-black">${mix.djName}${mix.mixNumber ? ` #${mix.mixNumber}` : ''}</h3>
                <p class="text-gray-600">${mix.mixTitle}</p>
                ${mix.genre ? `<span class="text-xs text-gray-500">${mix.genre}</span>` : ''}
              </div>
              <div class="flex gap-4 items-start">
                <div class="text-right text-sm text-gray-600">
                  <div>▶ ${mix.plays || 0} plays</div>
                  <div>↓ ${mix.downloads || 0} downloads</div>
                  <div>★ ${avgRating}</div>
                </div>
                <button 
                  onclick="reportMix('${mixId}', '${mix.djName}', '${mix.mixTitle}')"
                  class="text-red-600 hover:text-red-800 transition"
                  title="Report this mix"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                  </svg>
                </button>
              </div>
            </div>

            <!-- Waveform -->
            <div class="waveform-container rounded" id="waveform-${mixId}"></div>

            <!-- Player Controls -->
            <div class="flex gap-2 my-4">
              <button onclick="playMix('${mixId}', '${mix.audioURL}')" class="px-4 py-2 btn-primary rounded transition">
                ▶ Play
              </button>
              <button onclick="pauseMix('${mixId}')" class="px-4 py-2 btn-secondary rounded transition">
                ⏸ Pause
              </button>
              <button onclick="stopMix('${mixId}')" class="px-4 py-2 btn-secondary rounded transition">
                ⏹ Stop
              </button>
              <button onclick="downloadMix('${mixId}', '${mix.downloadUrl}', '${mix.djName} - ${mix.mixTitle}')" class="px-4 py-2 btn-secondary rounded transition">
                ↓ Download
              </button>
              <button onclick="shareMix('${mixId}')" class="px-4 py-2 btn-secondary rounded transition">
                📤 Share
              </button>
            </div>

            <!-- Rating -->
            <div class="flex items-center gap-4 mb-4">
              <span class="text-sm text-gray-600">Rate this mix:</span>
              <div class="star-rating" id="rating-${mixId}">
                ${[1,2,3,4,5].map(star => `<span class="star" onclick="rateMix('${mixId}', ${star})">★</span>`).join('')}
              </div>
            </div>

            <!-- Messages -->
            <div class="mb-4">
              <h4 class="text-sm text-gray-600 mb-2">Messages (${mix.messages?.length || 0})</h4>
              <div class="space-y-2 max-h-32 overflow-y-auto mb-2" id="messages-${mixId}">
                ${mix.messages?.map(msg => `
                  <div class="text-sm bg-white p-2 rounded border border-gray-300">
                    <span class="text-gray-600">${msg.user}:</span> <span class="text-black">${msg.text}</span>
                  </div>
                `).join('') || '<div class="text-xs text-gray-500">No messages yet</div>'}
              </div>
              <div class="flex gap-2">
                <input 
                  type="text" 
                  id="message-${mixId}" 
                  placeholder="Leave a message..."
                  class="flex-grow bg-white border border-gray-300 rounded px-3 py-2 text-sm focus:outline-none focus:border-black text-black"
                />
                <button onclick="addMessage('${mixId}')" class="px-4 py-2 btn-primary rounded text-sm transition">
                  Send
                </button>
              </div>
            </div>

            <div class="text-xs text-gray-500">
              Uploaded by ${mix.uploadedBy} • ${mix.uploadedAt?.toDate().toLocaleDateString() || 'Recent'}
            </div>
          </div>
        </div>
      `;

      document.getElementById('mixes-container').appendChild(mixCard);
    }

    // Player functions
    window.playMix = async function(mixId, audioURL) {
      if (currentWavesurfer) {
        currentWavesurfer.destroy();
      }

      const container = document.getElementById(`waveform-${mixId}`);
      currentWavesurfer = WaveSurfer.create({
        container: container,
        waveColor: '#ccc',
        progressColor: '#000',
        cursorColor: '#000',
        barWidth: 2,
        barGap: 1,
        barRadius: 2,
        height: 80,
        normalize: true,
        backend: 'WebAudio'
      });

      currentWavesurfer.load(audioURL);
      currentWavesurfer.on('ready', () => {
        currentWavesurfer.play();
      });

      // Increment play count
      await updateDoc(doc(db, 'mixes', mixId), {
        plays: increment(1)
      });

      loadMixes();
    };

    window.pauseMix = function(mixId) {
      if (currentWavesurfer) {
        currentWavesurfer.playPause();
      }
    };

    window.stopMix = function(mixId) {
      if (currentWavesurfer) {
        currentWavesurfer.stop();
      }
    };

    window.downloadMix = async function(mixId, audioURL, filename) {
      try {
        // Open Google Drive download link in new tab
        window.open(audioURL, '_blank');

        // Increment download count
        await updateDoc(doc(db, 'mixes', mixId), {
          downloads: increment(1)
        });

        loadMixes();
      } catch (error) {
        console.error('Download error:', error);
        alert('Download failed');
      }
    };

    window.shareMix = function(mixId) {
      const shareURL = `${window.location.origin}${window.location.pathname}?mix=${mixId}`;
      if (navigator.share) {
        navigator.share({
          title: 'Check out this mix on Fresh Wax',
          url: shareURL
        });
      } else {
        navigator.clipboard.writeText(shareURL);
        alert('Share link copied to clipboard!');
      }
    };

    window.rateMix = async function(mixId, rating) {
      try {
        const mixRef = doc(db, 'mixes', mixId);
        const mixDoc = await getDocs(query(collection(db, 'mixes')));
        const mixData = mixDoc.docs.find(d => d.id === mixId)?.data();
        
        const ratings = mixData?.ratings || [];
        ratings.push(rating);

        await updateDoc(mixRef, { ratings });
        loadMixes();
      } catch (error) {
        console.error('Rating error:', error);
      }
    };

    window.addMessage = async function(mixId) {
      const input = document.getElementById(`message-${mixId}`);
      const text = input.value.trim();
      
      if (!text) return;

      try {
        const mixRef = doc(db, 'mixes', mixId);
        const mixDoc = await getDocs(query(collection(db, 'mixes')));
        const mixData = mixDoc.docs.find(d => d.id === mixId)?.data();
        
        const messages = mixData?.messages || [];
        messages.push({
          user: currentUser.email,
          text: text,
          timestamp: new Date().toISOString()
        });

        await updateDoc(mixRef, { messages });
        input.value = '';
        loadMixes();
      } catch (error) {
        console.error('Message error:', error);
      }
    };

    // Report mix function
    window.reportMix = async function(mixId, djName, mixTitle) {
      const reason = prompt('Please describe the issue with this mix:');
      
      if (!reason || reason.trim() === '') {
        return; // User cancelled or entered nothing
      }

      try {
        // Save report to Firestore
        const reportData = {
          mixId: mixId,
          djName: djName,
          mixTitle: mixTitle,
          reportedBy: currentUser.email,
          reason: reason.trim(),
          timestamp: serverTimestamp(),
          status: 'pending'
        };

        await addDoc(collection(db, 'reports'), reportData);

        alert('Thank you for your report. An admin will review this mix shortly.');
        
      } catch (error) {
        console.error('Report error:', error);
        alert('Failed to submit report. Please try again.');
      }
    };
  </script>
</body>
</html>