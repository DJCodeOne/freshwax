---
// src/pages/dj-mixes.astro
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { v2 as cloudinary } from 'cloudinary';

const title = "DJ Mixes - Freshwax";
const description = "Stream and download exclusive DJ mixes";

cloudinary.config({
  cloud_name: 'dscqbze0d',
  api_key: '555922422486159',
  api_secret: '1OV_96Pd_x7MSdt7Bph5aNELYho',
});

let mixes = [];
let errorMessage = '';

try {
  const info = await cloudinary.api.resource('dj-mixes/mixes.json', {
    resource_type: 'raw'
  });
  
  const version = info.version;
  const mixesUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/v${version}/dj-mixes/mixes.json`;
  
  console.log('Fetching mixes from:', mixesUrl);
  console.log('Version:', version);
  
  const response = await fetch(mixesUrl, {
    cache: 'no-store',
  });
  
  console.log('Response status:', response.status);
  
  if (response.ok) {
    const data = await response.json();
    console.log('Mixes loaded:', data);
    
    if (Array.isArray(data)) {
      mixes = data;
      mixes.sort((a, b) => new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime());
      console.log(`Successfully loaded ${mixes.length} mixes`);
    } else {
      console.error('Data is not an array:', data);
      errorMessage = 'Invalid data format';
    }
  } else {
    console.error('Failed to load mixes:', response.status, response.statusText);
    errorMessage = `Failed to load mixes (${response.status})`;
  }
} catch (error) {
  console.error('Error loading mixes:', error);
  errorMessage = error instanceof Error ? error.message : 'Unknown error';
}

console.log('Final mixes count:', mixes.length);
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
</head>
<body class="min-h-screen bg-white">
  <Header />
  
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Header Section -->
    <div class="flex items-center justify-between mb-8 pb-6 border-b-2 border-black">
      <div>
        <h1 class="text-4xl font-bold text-black mb-2">DJ Mixes</h1>
        <p class="text-gray-700">Stream and download exclusive mixes from our community</p>
      </div>
      
      <!-- Upload Button -->
      <a 
        href="/upload-mix" 
        class="bg-black text-white px-6 py-3 rounded-none hover:bg-gray-800 transition-colors flex items-center gap-2 font-medium border-2 border-black"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        Upload Mix
      </a>
    </div>

    <!-- Error Message -->
    {errorMessage && (
      <div class="bg-red-50 border-2 border-red-600 p-4 mb-6">
        <p class="text-red-800 font-medium">⚠️ {errorMessage}</p>
      </div>
    )}

    <!-- Mixes List - Black & White Theme -->
    <div class="space-y-4">
      {mixes.length === 0 ? (
        <div class="text-center py-16 bg-gray-50 border-2 border-black">
          <svg class="w-24 h-24 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
          </svg>
          <h3 class="text-xl font-semibold text-black mb-2">No mixes yet</h3>
          <p class="text-gray-600 mb-6">Be the first to upload a mix!</p>
          <a href="/upload-mix" class="inline-flex items-center gap-2 bg-black text-white px-6 py-3 hover:bg-gray-800 transition-colors border-2 border-black">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Upload Your First Mix
          </a>
        </div>
      ) : (
        mixes.map((mix) => (
          <div class="bg-white border-2 border-black hover:shadow-[8px_8px_0px_0px_rgba(0,0,0,1)] transition-all">
            <!-- Inline Layout -->
            <div class="flex items-center gap-6 p-6">
              
              <!-- 1. Artwork -->
              <div class="flex-shrink-0">
                <img 
                  src={mix.artwork_url} 
                  alt={`${mix.title} artwork`}
                  class="w-24 h-24 object-cover border-2 border-black"
                  onerror="this.src='/logo.webp'"
                />
              </div>

              <!-- 2. Description -->
              <div class="flex-shrink-0 w-48">
                <h2 class="text-lg font-bold text-black mb-1 truncate">{mix.title}</h2>
                <p class="text-sm text-gray-700 truncate">by {mix.dj_name}</p>
                <p class="text-xs text-gray-500 mt-1">
                  {new Date(mix.upload_date).toLocaleDateString()}
                </p>
                
                <!-- Stats -->
                <div class="flex items-center gap-3 mt-2 text-xs">
                  <span class="flex items-center gap-1 text-gray-600" title="Plays">
                    <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                    <span class="plays-count font-mono">{mix.plays || 0}</span>
                  </span>
                  <span class="flex items-center gap-1 text-gray-600" title="Downloads">
                    <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    <span class="downloads-count font-mono">{mix.downloads || 0}</span>
                  </span>
                  <span class="flex items-center gap-1 text-gray-600" title="Likes">
                    <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                    </svg>
                    <span class="likes-count font-mono">{mix.likes || 0}</span>
                  </span>
                </div>
              </div>

              <!-- 3. Audio Player -->
              <div class="flex-1 min-w-0">
                <div 
                  class="mix-player"
                  data-mix-id={mix.id}
                  data-audio-url={mix.audio_url}
                >
                  <!-- Hidden audio element -->
                  <audio class="hidden" preload="metadata"></audio>
                  
                  <!-- Styled Progress Bar -->
                  <div class="mb-4">
                    <div class="progress-container relative h-4 bg-gray-100 border-2 border-black cursor-pointer overflow-hidden group">
                      <!-- Background pattern -->
                      <div class="absolute inset-0 opacity-5">
                        <div class="h-full w-full" style="background-image: repeating-linear-gradient(45deg, black 0, black 2px, transparent 2px, transparent 8px);"></div>
                      </div>
                      
                      <!-- Progress bar -->
                      <div class="progress-bar relative h-full bg-black transition-all duration-100 flex items-center justify-end" style="width: 0%">
                        <div class="absolute right-0 top-0 bottom-0 w-0.5 bg-white"></div>
                      </div>
                      
                      <!-- Hover effect -->
                      <div class="absolute inset-0 bg-black opacity-0 group-hover:opacity-5 transition-opacity pointer-events-none"></div>
                    </div>
                  </div>
                  
                  <!-- Compact Player Controls -->
                  <div class="flex items-center gap-4">
                    <button class="play-pause-btn bg-black text-white p-2.5 border-2 border-black hover:bg-white hover:text-black transition-all">
                      <svg class="w-5 h-5 play-icon" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                      <svg class="w-5 h-5 pause-icon hidden" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>
                      </svg>
                    </button>
                    
                    <div class="text-sm text-gray-700 font-mono flex items-center gap-2">
                      <span class="current-time font-bold">0:00</span>
                      <span class="text-gray-400">/</span>
                      <span class="duration">0:00</span>
                    </div>
                  </div>
                </div>
              </div>

              <!-- 4. Action Buttons -->
              <div class="flex-shrink-0 flex flex-col gap-2">
                <a 
                  href={mix.audio_url} 
                  download
                  class="download-btn bg-black text-white px-5 py-2.5 border-2 border-black hover:bg-white hover:text-black transition-all flex items-center gap-2 text-sm font-bold uppercase tracking-wide"
                  data-mix-id={mix.id}
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                  </svg>
                  Download
                </a>
                
                <!-- Like Button -->
                <button 
                  class="like-btn bg-white text-black px-5 py-2.5 border-2 border-black hover:bg-black hover:text-white transition-all flex items-center justify-center gap-2 text-sm font-bold uppercase tracking-wide"
                  data-mix-id={mix.id}
                >
                  <svg class="w-4 h-4 heart-outline" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                  <svg class="w-4 h-4 heart-filled hidden" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                  </svg>
                  <span class="like-text">Like</span>
                </button>
              </div>

            </div>
          </div>
        ))
      )}
    </div>
  </main>

  <Footer />
  
  <script>
    // Track play, download, and like actions
    async function trackAction(mixId: string, action: 'play' | 'download' | 'like') {
      try {
        const response = await fetch('/api/track-action', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mixId, action })
        });
        
        if (response.ok) {
          const data = await response.json();
          
          // Update UI with new counts
          const mixCard = document.querySelector(`[data-mix-id="${mixId}"]`)?.closest('.border-2');
          if (mixCard) {
            const playsEl = mixCard.querySelector('.plays-count');
            const downloadsEl = mixCard.querySelector('.downloads-count');
            const likesEl = mixCard.querySelector('.likes-count');
            
            if (playsEl && data.plays !== undefined) playsEl.textContent = data.plays.toString();
            if (downloadsEl && data.downloads !== undefined) downloadsEl.textContent = data.downloads.toString();
            if (likesEl && data.likes !== undefined) likesEl.textContent = data.likes.toString();
          }
          
          return data;
        }
      } catch (error) {
        console.error('Failed to track action:', error);
      }
    }

    // Audio player with tracking
    document.addEventListener('DOMContentLoaded', () => {
      const trackedPlays = new Set<string>();
      const likedMixes = new Set<string>(JSON.parse(localStorage.getItem('likedMixes') || '[]'));

      // Initialize like buttons based on localStorage
      likedMixes.forEach(mixId => {
        const likeBtn = document.querySelector(`.like-btn[data-mix-id="${mixId}"]`);
        if (likeBtn) {
          likeBtn.classList.add('liked');
          likeBtn.classList.remove('bg-white', 'text-black');
          likeBtn.classList.add('bg-black', 'text-white');
          const heartOutline = likeBtn.querySelector('.heart-outline');
          const heartFilled = likeBtn.querySelector('.heart-filled');
          const likeText = likeBtn.querySelector('.like-text');
          if (heartOutline) heartOutline.classList.add('hidden');
          if (heartFilled) heartFilled.classList.remove('hidden');
          if (likeText) likeText.textContent = 'Liked';
        }
      });

      // Audio players
      document.querySelectorAll('.mix-player').forEach((playerEl) => {
        const mixId = playerEl.getAttribute('data-mix-id');
        const audioUrl = playerEl.getAttribute('data-audio-url');
        
        if (!mixId || !audioUrl) return;

        const audio = playerEl.querySelector('audio') as HTMLAudioElement;
        const playPauseBtn = playerEl.querySelector('.play-pause-btn');
        const playIcon = playerEl.querySelector('.play-icon');
        const pauseIcon = playerEl.querySelector('.pause-icon');
        const currentTimeEl = playerEl.querySelector('.current-time');
        const durationEl = playerEl.querySelector('.duration');
        const progressBar = playerEl.querySelector('.progress-bar') as HTMLElement;
        const progressContainer = playerEl.querySelector('.progress-container');

        audio.src = audioUrl;

        audio.addEventListener('loadedmetadata', () => {
          const duration = audio.duration;
          if (durationEl) durationEl.textContent = formatTime(duration);
        });

        // Track play after 3 seconds of playback
        audio.addEventListener('timeupdate', () => {
          if (audio.currentTime > 3 && !trackedPlays.has(mixId)) {
            trackedPlays.add(mixId);
            trackAction(mixId, 'play');
          }
        });

        playPauseBtn?.addEventListener('click', () => {
          if (audio.paused) {
            document.querySelectorAll('audio').forEach(a => {
              if (a !== audio) a.pause();
            });
            audio.play();
          } else {
            audio.pause();
          }
        });

        audio.addEventListener('play', () => {
          playIcon?.classList.add('hidden');
          pauseIcon?.classList.remove('hidden');
        });

        audio.addEventListener('pause', () => {
          playIcon?.classList.remove('hidden');
          pauseIcon?.classList.add('hidden');
        });

        audio.addEventListener('timeupdate', () => {
          const currentTime = audio.currentTime;
          const duration = audio.duration;
          
          if (currentTimeEl) currentTimeEl.textContent = formatTime(currentTime);
          
          if (duration > 0) {
            const progress = (currentTime / duration) * 100;
            if (progressBar) progressBar.style.width = `${progress}%`;
          }
        });

        progressContainer?.addEventListener('click', (e) => {
          const rect = progressContainer.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          const width = rect.width;
          const percentage = clickX / width;
          audio.currentTime = percentage * audio.duration;
        });

        audio.addEventListener('ended', () => {
          playIcon?.classList.remove('hidden');
          pauseIcon?.classList.add('hidden');
          audio.currentTime = 0;
          if (progressBar) progressBar.style.width = '0%';
        });
      });

      // Track downloads
      document.querySelectorAll('.download-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
          const mixId = btn.getAttribute('data-mix-id');
          if (mixId) {
            trackAction(mixId, 'download');
          }
        });
      });

      // Like buttons
      document.querySelectorAll('.like-btn').forEach((btn) => {
        btn.addEventListener('click', async () => {
          const mixId = btn.getAttribute('data-mix-id');
          if (!mixId) return;

          const isLiked = likedMixes.has(mixId);
          const heartOutline = btn.querySelector('.heart-outline');
          const heartFilled = btn.querySelector('.heart-filled');
          const likeText = btn.querySelector('.like-text');

          if (isLiked) {
            // Unlike
            likedMixes.delete(mixId);
            btn.classList.remove('liked', 'bg-black', 'text-white');
            btn.classList.add('bg-white', 'text-black');
            if (heartOutline) heartOutline.classList.remove('hidden');
            if (heartFilled) heartFilled.classList.add('hidden');
            if (likeText) likeText.textContent = 'Like';
            
            // Note: You'd need to add 'unlike' action to API for this to work properly
            // For now, this just updates UI locally
          } else {
            // Like
            likedMixes.add(mixId);
            btn.classList.add('liked', 'bg-black', 'text-white');
            btn.classList.remove('bg-white', 'text-black');
            if (heartOutline) heartOutline.classList.add('hidden');
            if (heartFilled) heartFilled.classList.remove('hidden');
            if (likeText) likeText.textContent = 'Liked';
            
            // Track like
            await trackAction(mixId, 'like');
          }

          // Save to localStorage
          localStorage.setItem('likedMixes', JSON.stringify([...likedMixes]));
        });
      });

      function formatTime(seconds: number): string {
        if (!seconds || !isFinite(seconds)) return '0:00';
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
      }
    });
  </script>

  <style>
    @keyframes pulse-line {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .progress-bar .w-0.5 {
      animation: pulse-line 1s ease-in-out infinite;
    }

    .like-btn.liked {
      animation: likeHeartBeat 0.3s ease-in-out;
    }

    @keyframes likeHeartBeat {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }
  </style>
</body>
</html>