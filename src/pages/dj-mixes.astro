---
// src/pages/dj-mixes.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { v2 as cloudinary } from 'cloudinary';

cloudinary.config({
  cloud_name: 'dscqbze0d',
  api_key: '555922422486159',
  api_secret: '1OV_96Pd_x7MSdt7Bph5aNELYho',
});

let mixes = [];

try {
  const info = await cloudinary.api.resource('dj-mixes/mixes.json', {
    resource_type: 'raw'
  });
  
  const version = info.version;
  const timestamp = Date.now();
  const mixesUrl = `https://res.cloudinary.com/dscqbze0d/raw/upload/v${version}/dj-mixes/mixes.json?t=${timestamp}`;
  
  const response = await fetch(mixesUrl, { cache: 'no-store' });
  
  if (response.ok) {
    const data = await response.json();
    if (Array.isArray(data)) {
      mixes = data;
      mixes.sort((a, b) => new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime());
    }
  }
} catch (error) {
  console.error('Error loading mixes:', error);
}
---

<Layout title="DJ Mixes - Fresh Wax">
  <Header />
  
  <main class="min-h-screen bg-gray-50">
    <!-- Hero Section -->
    <section class="bg-black text-white py-16 sm:py-20">
      <div class="container mx-auto px-6 sm:px-8 md:px-12 lg:px-16 max-w-5xl text-center">
        <h1 class="text-4xl sm:text-5xl md:text-6xl font-black mb-4 uppercase" style="letter-spacing: 0.08em;">
          DJ Mixes
        </h1>
        <p class="text-xl sm:text-2xl text-gray-300 font-semibold">
          Curated sets from the best in Jungle and Drum & Bass
        </p>
      </div>
    </section>

    <!-- Mixes Grid -->
    <section class="container mx-auto px-6 sm:px-8 md:px-12 lg:px-16 py-8 sm:py-12 max-w-5xl">
      <div class="mb-8">
        <h2 class="text-2xl sm:text-3xl font-black text-gray-900 mb-2">
          {mixes.length} Mix{mixes.length !== 1 ? 'es' : ''} Available
        </h2>
        <p class="text-gray-600">Stream or download full DJ sets</p>
      </div>

      {mixes.length === 0 ? (
        <div class="text-center py-20 bg-white rounded-lg">
          <div class="text-6xl mb-4">🎧</div>
          <h3 class="text-2xl font-bold text-gray-900 mb-2">No Mixes Yet</h3>
          <p class="text-gray-600">Check back soon for fresh mixes!</p>
        </div>
      ) : (
        <div class="grid grid-cols-1 gap-8">
          {mixes.map((mix) => (
            <article 
              class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300"
              data-mix-id={mix.id}
            >
              <!-- Desktop Layout -->
              <div class="hidden sm:flex">
                <div class="relative w-64 h-64 flex-shrink-0">
                  <img 
                    src={mix.artwork_url} 
                    alt={mix.title}
                    class="w-full h-full object-cover"
                    onerror="this.src='/logo.webp'"
                  />
                </div>
                
                <div class="flex-1 p-6 flex flex-col">
                  <div class="mb-4">
                    <h3 class="text-2xl font-bold text-gray-900 mb-1">{mix.title}</h3>
                    <p class="text-lg text-gray-600 mb-2">by {mix.dj_name}</p>
                    {mix.description && (
                      <p class="text-sm text-gray-600 mb-3">{mix.description}</p>
                    )}
                    
                    <div class="flex items-center gap-4 text-sm text-gray-500">
                      <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                        {mix.plays || 0} plays
                      </span>
                      <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                        </svg>
                        {mix.downloads || 0} downloads
                      </span>
                      <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                        </svg>
                        <span class="likes-count" data-mix-id={mix.id}>{mix.likes || 0}</span>
                      </span>
                      <span class="text-xs">
                        {new Date(mix.upload_date).toLocaleDateString('en-GB', {
                          day: 'numeric',
                          month: 'short',
                          year: 'numeric'
                        })}
                      </span>
                    </div>
                  </div>
                  
                  <!-- Download and Like Buttons -->
                  <div class="mb-3 flex items-center gap-2">
                    <a 
                      href={mix.audio_url}
                      download
                      class="download-btn bg-gray-200 hover:bg-gray-300 active:bg-gray-400 text-black px-3 py-1.5 rounded inline-flex items-center gap-1.5 transition-colors text-xs font-medium"
                      data-mix-id={mix.id}
                    >
                      <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                      </svg>
                      <span>Download</span>
                    </a>
                    
                    <button 
                      class="like-btn bg-gray-200 hover:bg-gray-300 active:bg-gray-400 text-black px-3 py-1.5 rounded inline-flex items-center gap-1.5 transition-colors text-xs font-medium"
                      data-mix-id={mix.id}
                      data-liked="false"
                    >
                      <svg class="w-3.5 h-3.5 like-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                      <span>Like</span>
                    </button>
                  </div>
                  
                  <!-- Audio Player -->
                  <div class="mt-auto">
                    <div class="bg-gray-50 rounded-lg p-4">
                      <div class="flex items-center gap-4 mb-3">
                        <button 
                          class="mix-play-button flex-shrink-0 flex items-center justify-center w-12 h-12 rounded-full bg-black text-white hover:bg-gray-800 transition-colors"
                          data-mix-id={mix.id}
                          title="Play/Pause"
                        >
                          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z"/>
                          </svg>
                        </button>
                        
                        <!-- Volume Slider -->
                        <div class="flex items-center gap-2">
                          <svg class="w-5 h-5 text-gray-600 flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                          </svg>
                          <input 
                            type="range" 
                            min="0" 
                            max="100" 
                            value="70" 
                            class="mix-volume-slider flex-1 h-2" 
                            data-mix-id={mix.id}
                            title="Volume"
                          />
                        </div>
                        
                        <!-- Time Display -->
                        <div class="flex-shrink-0 text-sm font-semibold text-gray-600 min-w-[80px] text-right">
                          <span class="current-time" data-mix-id={mix.id}>0:00</span>
                          <span> / </span>
                          <span class="total-time" data-mix-id={mix.id}>0:00</span>
                        </div>
                      </div>
                      
                      <!-- Waveform / Progress Bar -->
                      <div class="waveform-container" data-mix-id={mix.id}></div>
                    </div>
                    
                    <!-- Hidden Audio Element -->
                    <audio 
                      class="hidden mix-audio" 
                      data-mix-id={mix.id} 
                      preload="metadata"
                    >
                      <source src={mix.audio_url} type="audio/mpeg" />
                    </audio>
                  </div>
                </div>
              </div>

              <!-- Mobile Layout -->
              <div class="sm:hidden">
                <div class="relative w-full aspect-square">
                  <img 
                    src={mix.artwork_url} 
                    alt={mix.title}
                    class="w-full h-full object-cover"
                    onerror="this.src='/logo.webp'"
                  />
                </div>
                
                <div class="p-4">
                  <div class="mb-3">
                    <h3 class="text-xl font-bold text-gray-900 mb-1">{mix.title}</h3>
                    <p class="text-base text-gray-600 mb-2">by {mix.dj_name}</p>
                    {mix.description && (
                      <p class="text-sm text-gray-600 mb-3">{mix.description}</p>
                    )}
                    
                    <div class="flex items-center gap-3 text-xs text-gray-500 flex-wrap">
                      <span class="flex items-center gap-1">▶ {mix.plays || 0}</span>
                      <span class="flex items-center gap-1">⬇ {mix.downloads || 0}</span>
                      <span class="flex items-center gap-1">❤ <span class="likes-count" data-mix-id={mix.id}>{mix.likes || 0}</span></span>
                      <span>
                        {new Date(mix.upload_date).toLocaleDateString('en-GB', {
                          day: 'numeric',
                          month: 'short',
                          year: 'numeric'
                        })}
                      </span>
                    </div>
                  </div>
                  
                  <!-- Download and Like Buttons (Mobile) -->
                  <div class="mb-3 flex items-center gap-2">
                    <a 
                      href={mix.audio_url}
                      download
                      class="download-btn bg-gray-200 hover:bg-gray-300 active:bg-gray-400 text-black px-3 py-1.5 rounded inline-flex items-center gap-1.5 transition-colors text-xs font-medium"
                      data-mix-id={mix.id}
                    >
                      <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                      </svg>
                      <span>Download</span>
                    </a>
                    
                    <button 
                      class="like-btn bg-gray-200 hover:bg-gray-300 active:bg-gray-400 text-black px-3 py-1.5 rounded inline-flex items-center gap-1.5 transition-colors text-xs font-medium"
                      data-mix-id={mix.id}
                      data-liked="false"
                    >
                      <svg class="w-3.5 h-3.5 like-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                      <span>Like</span>
                    </button>
                  </div>
                  
                  <!-- Audio Player (Mobile) -->
                  <div class="bg-gray-50 rounded-lg p-3">
                    <div class="flex items-center gap-3 mb-2">
                      <button 
                        class="mix-play-button flex-shrink-0 flex items-center justify-center w-10 h-10 rounded-full bg-black text-white hover:bg-gray-800 transition-colors"
                        data-mix-id={mix.id}
                        title="Play/Pause"
                      >
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </button>
                      
                      <!-- Volume Slider (Mobile) -->
                      <div class="flex items-center gap-2 flex-1">
                        <svg class="w-4 h-4 text-gray-600 flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
                        </svg>
                        <input 
                          type="range" 
                          min="0" 
                          max="100" 
                          value="70" 
                          class="mix-volume-slider flex-1 h-1.5" 
                          data-mix-id={mix.id}
                          title="Volume"
                        />
                      </div>
                      
                      <!-- Time Display (Mobile) -->
                      <div class="flex-shrink-0 text-xs font-semibold text-gray-600">
                        <span class="current-time" data-mix-id={mix.id}>0:00</span>
                        <span> / </span>
                        <span class="total-time" data-mix-id={mix.id}>0:00</span>
                      </div>
                    </div>
                    
                    <!-- Waveform / Progress Bar (Mobile) -->
                    <div class="waveform-container" data-mix-id={mix.id}></div>
                  </div>
                  
                  <!-- Hidden Audio Element (Mobile) -->
                  <audio 
                    class="hidden mix-audio" 
                    data-mix-id={mix.id} 
                    preload="metadata"
                  >
                    <source src={mix.audio_url} type="audio/mpeg" />
                  </audio>
                </div>
              </div>
            </article>
          ))}
        </div>
      )}
    </section>
  </main>

  <Footer />
</Layout>

<style>
  /* Volume Slider Styling */
  .mix-volume-slider {
    -webkit-appearance: none;
    appearance: none;
    background: #e5e7eb;
    outline: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .mix-volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 14px;
    height: 14px;
    background: #000000;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s;
  }

  .mix-volume-slider::-webkit-slider-thumb:hover {
    background: #1f2937;
    transform: scale(1.2);
  }

  .mix-volume-slider::-moz-range-thumb {
    width: 14px;
    height: 14px;
    background: #000000;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s;
  }

  .mix-volume-slider::-moz-range-thumb:hover {
    background: #1f2937;
    transform: scale(1.2);
  }

  /* Waveform Container */
  .waveform-container {
    height: 48px;
    border-radius: 4px;
    overflow: hidden;
    background: #ddd;
    cursor: pointer;
    position: relative;
  }

  .waveform-container canvas {
    width: 100%;
    height: 100%;
    display: block;
  }

  /* Like Button Styling */
  .like-btn[data-liked="true"] {
    background: #000000;
    color: white;
  }

  .like-btn[data-liked="true"]:hover {
    background: #1f2937;
  }

  .like-btn[data-liked="true"] .like-icon {
    fill: currentColor;
  }
</style>

<script>
  let currentlyPlaying = null;

  function formatTime(seconds) {
    if (!seconds || !isFinite(seconds)) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  function initMixPlayers() {
    // Initialize waveforms
    document.querySelectorAll('.waveform-container').forEach(container => {
      if (container.children.length === 0) {
        const mixId = container.getAttribute('data-mix-id');
        const audio = document.querySelector(`.mix-audio[data-mix-id="${mixId}"]`);
        
        if (audio) {
          const canvas = document.createElement('canvas');
          canvas.width = container.offsetWidth * 2; // 2x for retina
          canvas.height = 96; // 2x for retina
          canvas.style.width = '100%';
          canvas.style.height = '100%';
          
          const ctx = canvas.getContext('2d');
          const bars = 100;
          const barWidth = canvas.width / bars;
          
          function draw(progress = 0) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let i = 0; i < bars; i++) {
              const h = (Math.random() * 0.7 + 0.3) * canvas.height;
              ctx.fillStyle = i / bars < progress ? '#000000' : '#d1d5db';
              ctx.fillRect(i * barWidth, (canvas.height - h) / 2, barWidth - 2, h);
            }
          }
          
          draw();
          container.appendChild(canvas);
          
          // Click to seek
          canvas.onclick = (e) => {
            const rect = canvas.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const progress = clickX / rect.width;
            audio.currentTime = progress * audio.duration;
          };
          
          // Update waveform progress
          audio.addEventListener('timeupdate', () => {
            draw(audio.currentTime / audio.duration);
          });
          
          // Update time display on metadata load
          audio.addEventListener('loadedmetadata', () => {
            const totalTime = document.querySelector(`.total-time[data-mix-id="${mixId}"]`);
            if (totalTime) {
              totalTime.textContent = formatTime(audio.duration);
            }
          });
          
          // Update current time
          audio.addEventListener('timeupdate', () => {
            const currentTime = document.querySelector(`.current-time[data-mix-id="${mixId}"]`);
            if (currentTime) {
              currentTime.textContent = formatTime(audio.currentTime);
            }
          });
        }
      }
    });

    // Play/Pause buttons
    document.querySelectorAll('.mix-play-button').forEach(btn => {
      if (!btn.initialized) {
        btn.initialized = true;
        btn.onclick = () => {
          const mixId = btn.getAttribute('data-mix-id');
          const audio = document.querySelector(`.mix-audio[data-mix-id="${mixId}"]`);
          
          // Pause other mixes
          document.querySelectorAll('.mix-audio').forEach(a => {
            if (a !== audio && !a.paused) {
              a.pause();
              a.currentTime = 0;
              const otherBtn = document.querySelector(`.mix-play-button[data-mix-id="${a.getAttribute('data-mix-id')}"]`);
              if (otherBtn) {
                otherBtn.innerHTML = '<svg class="w-6 h-6 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
              }
            }
          });
          
          if (audio.paused) {
            audio.play();
            btn.innerHTML = '<svg class="w-6 h-6 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/></svg>';
            currentlyPlaying = mixId;
            
            // Track play count
            trackPlay(mixId);
          } else {
            audio.pause();
            btn.innerHTML = '<svg class="w-6 h-6 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
            currentlyPlaying = null;
          }
        };
      }
    });

    // Volume sliders
    document.querySelectorAll('.mix-volume-slider').forEach(slider => {
      if (!slider.initialized) {
        slider.initialized = true;
        const mixId = slider.getAttribute('data-mix-id');
        const audio = document.querySelector(`.mix-audio[data-mix-id="${mixId}"]`);
        
        if (audio) {
          // Set initial volume
          audio.volume = slider.value / 100;
          
          // Update volume on slider change
          slider.oninput = () => {
            audio.volume = slider.value / 100;
          };
        }
      }
    });

    // Track audio end
    document.querySelectorAll('.mix-audio').forEach(audio => {
      audio.onended = () => {
        const btn = document.querySelector(`.mix-play-button[data-mix-id="${audio.getAttribute('data-mix-id')}"]`);
        if (btn) {
          btn.innerHTML = '<svg class="w-6 h-6 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
        }
        currentlyPlaying = null;
      };
    });

    // Track downloads
    document.querySelectorAll('.download-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const mixId = btn.getAttribute('data-mix-id');
        trackDownload(mixId);
      });
    });

    // Like buttons
    document.querySelectorAll('.like-btn').forEach(btn => {
      if (!btn.initialized) {
        btn.initialized = true;
        
        // Check if user has already liked this mix (from localStorage)
        const mixId = btn.getAttribute('data-mix-id');
        const likedMixes = JSON.parse(localStorage.getItem('liked-mixes') || '[]');
        if (likedMixes.includes(mixId)) {
          btn.setAttribute('data-liked', 'true');
        }
        
        btn.addEventListener('click', async () => {
          const isLiked = btn.getAttribute('data-liked') === 'true';
          const likesCountElements = document.querySelectorAll(`.likes-count[data-mix-id="${mixId}"]`);
          
          likesCountElements.forEach(element => {
            const currentCount = parseInt(element.textContent);
            
            if (isLiked) {
              // Unlike
              btn.setAttribute('data-liked', 'false');
              element.textContent = currentCount - 1;
              
              // Remove from localStorage
              const likedMixes = JSON.parse(localStorage.getItem('liked-mixes') || '[]');
              const index = likedMixes.indexOf(mixId);
              if (index > -1) {
                likedMixes.splice(index, 1);
                localStorage.setItem('liked-mixes', JSON.stringify(likedMixes));
              }
            } else {
              // Like
              btn.setAttribute('data-liked', 'true');
              element.textContent = currentCount + 1;
              
              // Add to localStorage
              const likedMixes = JSON.parse(localStorage.getItem('liked-mixes') || '[]');
              if (!likedMixes.includes(mixId)) {
                likedMixes.push(mixId);
                localStorage.setItem('liked-mixes', JSON.stringify(likedMixes));
              }
            }
          });
          
          // Track like/unlike on server
          if (isLiked) {
            await trackUnlike(mixId);
          } else {
            await trackLike(mixId);
          }
        });
      }
    });
  }

  // Track play count
  async function trackPlay(mixId) {
    try {
      await fetch('/api/track-mix-play', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mixId })
      });
    } catch (error) {
      console.error('Error tracking play:', error);
    }
  }

  // Track download count
  async function trackDownload(mixId) {
    try {
      await fetch('/api/track-mix-download', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mixId })
      });
    } catch (error) {
      console.error('Error tracking download:', error);
    }
  }

  // Track like
  async function trackLike(mixId) {
    try {
      const response = await fetch('/api/track-mix-like', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mixId })
      });
      const data = await response.json();
      console.log('Like tracked:', data);
      return data;
    } catch (error) {
      console.error('Error tracking like:', error);
    }
  }

  // Track unlike
  async function trackUnlike(mixId) {
    try {
      const response = await fetch('/api/track-mix-unlike', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mixId })
      });
      const data = await response.json();
      console.log('Unlike tracked:', data);
      return data;
    } catch (error) {
      console.error('Error tracking unlike:', error);
    }
  }

  // Initialize on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMixPlayers);
  } else {
    initMixPlayers();
  }
  
  // Reinitialize after short delay (in case of dynamic content)
  setTimeout(initMixPlayers, 100);
</script>